//
//
// File generated from our OpenAPI spec
//
//

package stripe

// The account's display preference.
type PaymentMethodConfigurationACSSDebitDisplayPreferencePreference string

// List of values that PaymentMethodConfigurationACSSDebitDisplayPreferencePreference can take
const (
	PaymentMethodConfigurationACSSDebitDisplayPreferencePreferenceNone PaymentMethodConfigurationACSSDebitDisplayPreferencePreference = "none"
	PaymentMethodConfigurationACSSDebitDisplayPreferencePreferenceOff  PaymentMethodConfigurationACSSDebitDisplayPreferencePreference = "off"
	PaymentMethodConfigurationACSSDebitDisplayPreferencePreferenceOn   PaymentMethodConfigurationACSSDebitDisplayPreferencePreference = "on"
)

// The effective display preference value.
type PaymentMethodConfigurationACSSDebitDisplayPreferenceValue string

// List of values that PaymentMethodConfigurationACSSDebitDisplayPreferenceValue can take
const (
	PaymentMethodConfigurationACSSDebitDisplayPreferenceValueOff PaymentMethodConfigurationACSSDebitDisplayPreferenceValue = "off"
	PaymentMethodConfigurationACSSDebitDisplayPreferenceValueOn  PaymentMethodConfigurationACSSDebitDisplayPreferenceValue = "on"
)

// The account's display preference.
type PaymentMethodConfigurationAffirmDisplayPreferencePreference string

// List of values that PaymentMethodConfigurationAffirmDisplayPreferencePreference can take
const (
	PaymentMethodConfigurationAffirmDisplayPreferencePreferenceNone PaymentMethodConfigurationAffirmDisplayPreferencePreference = "none"
	PaymentMethodConfigurationAffirmDisplayPreferencePreferenceOff  PaymentMethodConfigurationAffirmDisplayPreferencePreference = "off"
	PaymentMethodConfigurationAffirmDisplayPreferencePreferenceOn   PaymentMethodConfigurationAffirmDisplayPreferencePreference = "on"
)

// The effective display preference value.
type PaymentMethodConfigurationAffirmDisplayPreferenceValue string

// List of values that PaymentMethodConfigurationAffirmDisplayPreferenceValue can take
const (
	PaymentMethodConfigurationAffirmDisplayPreferenceValueOff PaymentMethodConfigurationAffirmDisplayPreferenceValue = "off"
	PaymentMethodConfigurationAffirmDisplayPreferenceValueOn  PaymentMethodConfigurationAffirmDisplayPreferenceValue = "on"
)

// The account's display preference.
type PaymentMethodConfigurationAfterpayClearpayDisplayPreferencePreference string

// List of values that PaymentMethodConfigurationAfterpayClearpayDisplayPreferencePreference can take
const (
	PaymentMethodConfigurationAfterpayClearpayDisplayPreferencePreferenceNone PaymentMethodConfigurationAfterpayClearpayDisplayPreferencePreference = "none"
	PaymentMethodConfigurationAfterpayClearpayDisplayPreferencePreferenceOff  PaymentMethodConfigurationAfterpayClearpayDisplayPreferencePreference = "off"
	PaymentMethodConfigurationAfterpayClearpayDisplayPreferencePreferenceOn   PaymentMethodConfigurationAfterpayClearpayDisplayPreferencePreference = "on"
)

// The effective display preference value.
type PaymentMethodConfigurationAfterpayClearpayDisplayPreferenceValue string

// List of values that PaymentMethodConfigurationAfterpayClearpayDisplayPreferenceValue can take
const (
	PaymentMethodConfigurationAfterpayClearpayDisplayPreferenceValueOff PaymentMethodConfigurationAfterpayClearpayDisplayPreferenceValue = "off"
	PaymentMethodConfigurationAfterpayClearpayDisplayPreferenceValueOn  PaymentMethodConfigurationAfterpayClearpayDisplayPreferenceValue = "on"
)

// The account's display preference.
type PaymentMethodConfigurationAlipayDisplayPreferencePreference string

// List of values that PaymentMethodConfigurationAlipayDisplayPreferencePreference can take
const (
	PaymentMethodConfigurationAlipayDisplayPreferencePreferenceNone PaymentMethodConfigurationAlipayDisplayPreferencePreference = "none"
	PaymentMethodConfigurationAlipayDisplayPreferencePreferenceOff  PaymentMethodConfigurationAlipayDisplayPreferencePreference = "off"
	PaymentMethodConfigurationAlipayDisplayPreferencePreferenceOn   PaymentMethodConfigurationAlipayDisplayPreferencePreference = "on"
)

// The effective display preference value.
type PaymentMethodConfigurationAlipayDisplayPreferenceValue string

// List of values that PaymentMethodConfigurationAlipayDisplayPreferenceValue can take
const (
	PaymentMethodConfigurationAlipayDisplayPreferenceValueOff PaymentMethodConfigurationAlipayDisplayPreferenceValue = "off"
	PaymentMethodConfigurationAlipayDisplayPreferenceValueOn  PaymentMethodConfigurationAlipayDisplayPreferenceValue = "on"
)

// The account's display preference.
type PaymentMethodConfigurationApplePayDisplayPreferencePreference string

// List of values that PaymentMethodConfigurationApplePayDisplayPreferencePreference can take
const (
	PaymentMethodConfigurationApplePayDisplayPreferencePreferenceNone PaymentMethodConfigurationApplePayDisplayPreferencePreference = "none"
	PaymentMethodConfigurationApplePayDisplayPreferencePreferenceOff  PaymentMethodConfigurationApplePayDisplayPreferencePreference = "off"
	PaymentMethodConfigurationApplePayDisplayPreferencePreferenceOn   PaymentMethodConfigurationApplePayDisplayPreferencePreference = "on"
)

// The effective display preference value.
type PaymentMethodConfigurationApplePayDisplayPreferenceValue string

// List of values that PaymentMethodConfigurationApplePayDisplayPreferenceValue can take
const (
	PaymentMethodConfigurationApplePayDisplayPreferenceValueOff PaymentMethodConfigurationApplePayDisplayPreferenceValue = "off"
	PaymentMethodConfigurationApplePayDisplayPreferenceValueOn  PaymentMethodConfigurationApplePayDisplayPreferenceValue = "on"
)

// The account's display preference.
type PaymentMethodConfigurationAUBECSDebitDisplayPreferencePreference string

// List of values that PaymentMethodConfigurationAUBECSDebitDisplayPreferencePreference can take
const (
	PaymentMethodConfigurationAUBECSDebitDisplayPreferencePreferenceNone PaymentMethodConfigurationAUBECSDebitDisplayPreferencePreference = "none"
	PaymentMethodConfigurationAUBECSDebitDisplayPreferencePreferenceOff  PaymentMethodConfigurationAUBECSDebitDisplayPreferencePreference = "off"
	PaymentMethodConfigurationAUBECSDebitDisplayPreferencePreferenceOn   PaymentMethodConfigurationAUBECSDebitDisplayPreferencePreference = "on"
)

// The effective display preference value.
type PaymentMethodConfigurationAUBECSDebitDisplayPreferenceValue string

// List of values that PaymentMethodConfigurationAUBECSDebitDisplayPreferenceValue can take
const (
	PaymentMethodConfigurationAUBECSDebitDisplayPreferenceValueOff PaymentMethodConfigurationAUBECSDebitDisplayPreferenceValue = "off"
	PaymentMethodConfigurationAUBECSDebitDisplayPreferenceValueOn  PaymentMethodConfigurationAUBECSDebitDisplayPreferenceValue = "on"
)

// The account's display preference.
type PaymentMethodConfigurationBACSDebitDisplayPreferencePreference string

// List of values that PaymentMethodConfigurationBACSDebitDisplayPreferencePreference can take
const (
	PaymentMethodConfigurationBACSDebitDisplayPreferencePreferenceNone PaymentMethodConfigurationBACSDebitDisplayPreferencePreference = "none"
	PaymentMethodConfigurationBACSDebitDisplayPreferencePreferenceOff  PaymentMethodConfigurationBACSDebitDisplayPreferencePreference = "off"
	PaymentMethodConfigurationBACSDebitDisplayPreferencePreferenceOn   PaymentMethodConfigurationBACSDebitDisplayPreferencePreference = "on"
)

// The effective display preference value.
type PaymentMethodConfigurationBACSDebitDisplayPreferenceValue string

// List of values that PaymentMethodConfigurationBACSDebitDisplayPreferenceValue can take
const (
	PaymentMethodConfigurationBACSDebitDisplayPreferenceValueOff PaymentMethodConfigurationBACSDebitDisplayPreferenceValue = "off"
	PaymentMethodConfigurationBACSDebitDisplayPreferenceValueOn  PaymentMethodConfigurationBACSDebitDisplayPreferenceValue = "on"
)

// The account's display preference.
type PaymentMethodConfigurationBancontactDisplayPreferencePreference string

// List of values that PaymentMethodConfigurationBancontactDisplayPreferencePreference can take
const (
	PaymentMethodConfigurationBancontactDisplayPreferencePreferenceNone PaymentMethodConfigurationBancontactDisplayPreferencePreference = "none"
	PaymentMethodConfigurationBancontactDisplayPreferencePreferenceOff  PaymentMethodConfigurationBancontactDisplayPreferencePreference = "off"
	PaymentMethodConfigurationBancontactDisplayPreferencePreferenceOn   PaymentMethodConfigurationBancontactDisplayPreferencePreference = "on"
)

// The effective display preference value.
type PaymentMethodConfigurationBancontactDisplayPreferenceValue string

// List of values that PaymentMethodConfigurationBancontactDisplayPreferenceValue can take
const (
	PaymentMethodConfigurationBancontactDisplayPreferenceValueOff PaymentMethodConfigurationBancontactDisplayPreferenceValue = "off"
	PaymentMethodConfigurationBancontactDisplayPreferenceValueOn  PaymentMethodConfigurationBancontactDisplayPreferenceValue = "on"
)

// The account's display preference.
type PaymentMethodConfigurationBLIKDisplayPreferencePreference string

// List of values that PaymentMethodConfigurationBLIKDisplayPreferencePreference can take
const (
	PaymentMethodConfigurationBLIKDisplayPreferencePreferenceNone PaymentMethodConfigurationBLIKDisplayPreferencePreference = "none"
	PaymentMethodConfigurationBLIKDisplayPreferencePreferenceOff  PaymentMethodConfigurationBLIKDisplayPreferencePreference = "off"
	PaymentMethodConfigurationBLIKDisplayPreferencePreferenceOn   PaymentMethodConfigurationBLIKDisplayPreferencePreference = "on"
)

// The effective display preference value.
type PaymentMethodConfigurationBLIKDisplayPreferenceValue string

// List of values that PaymentMethodConfigurationBLIKDisplayPreferenceValue can take
const (
	PaymentMethodConfigurationBLIKDisplayPreferenceValueOff PaymentMethodConfigurationBLIKDisplayPreferenceValue = "off"
	PaymentMethodConfigurationBLIKDisplayPreferenceValueOn  PaymentMethodConfigurationBLIKDisplayPreferenceValue = "on"
)

// The account's display preference.
type PaymentMethodConfigurationBoletoDisplayPreferencePreference string

// List of values that PaymentMethodConfigurationBoletoDisplayPreferencePreference can take
const (
	PaymentMethodConfigurationBoletoDisplayPreferencePreferenceNone PaymentMethodConfigurationBoletoDisplayPreferencePreference = "none"
	PaymentMethodConfigurationBoletoDisplayPreferencePreferenceOff  PaymentMethodConfigurationBoletoDisplayPreferencePreference = "off"
	PaymentMethodConfigurationBoletoDisplayPreferencePreferenceOn   PaymentMethodConfigurationBoletoDisplayPreferencePreference = "on"
)

// The effective display preference value.
type PaymentMethodConfigurationBoletoDisplayPreferenceValue string

// List of values that PaymentMethodConfigurationBoletoDisplayPreferenceValue can take
const (
	PaymentMethodConfigurationBoletoDisplayPreferenceValueOff PaymentMethodConfigurationBoletoDisplayPreferenceValue = "off"
	PaymentMethodConfigurationBoletoDisplayPreferenceValueOn  PaymentMethodConfigurationBoletoDisplayPreferenceValue = "on"
)

// The account's display preference.
type PaymentMethodConfigurationCardDisplayPreferencePreference string

// List of values that PaymentMethodConfigurationCardDisplayPreferencePreference can take
const (
	PaymentMethodConfigurationCardDisplayPreferencePreferenceNone PaymentMethodConfigurationCardDisplayPreferencePreference = "none"
	PaymentMethodConfigurationCardDisplayPreferencePreferenceOff  PaymentMethodConfigurationCardDisplayPreferencePreference = "off"
	PaymentMethodConfigurationCardDisplayPreferencePreferenceOn   PaymentMethodConfigurationCardDisplayPreferencePreference = "on"
)

// The effective display preference value.
type PaymentMethodConfigurationCardDisplayPreferenceValue string

// List of values that PaymentMethodConfigurationCardDisplayPreferenceValue can take
const (
	PaymentMethodConfigurationCardDisplayPreferenceValueOff PaymentMethodConfigurationCardDisplayPreferenceValue = "off"
	PaymentMethodConfigurationCardDisplayPreferenceValueOn  PaymentMethodConfigurationCardDisplayPreferenceValue = "on"
)

// The account's display preference.
type PaymentMethodConfigurationCartesBancairesDisplayPreferencePreference string

// List of values that PaymentMethodConfigurationCartesBancairesDisplayPreferencePreference can take
const (
	PaymentMethodConfigurationCartesBancairesDisplayPreferencePreferenceNone PaymentMethodConfigurationCartesBancairesDisplayPreferencePreference = "none"
	PaymentMethodConfigurationCartesBancairesDisplayPreferencePreferenceOff  PaymentMethodConfigurationCartesBancairesDisplayPreferencePreference = "off"
	PaymentMethodConfigurationCartesBancairesDisplayPreferencePreferenceOn   PaymentMethodConfigurationCartesBancairesDisplayPreferencePreference = "on"
)

// The effective display preference value.
type PaymentMethodConfigurationCartesBancairesDisplayPreferenceValue string

// List of values that PaymentMethodConfigurationCartesBancairesDisplayPreferenceValue can take
const (
	PaymentMethodConfigurationCartesBancairesDisplayPreferenceValueOff PaymentMethodConfigurationCartesBancairesDisplayPreferenceValue = "off"
	PaymentMethodConfigurationCartesBancairesDisplayPreferenceValueOn  PaymentMethodConfigurationCartesBancairesDisplayPreferenceValue = "on"
)

// The account's display preference.
type PaymentMethodConfigurationCashAppDisplayPreferencePreference string

// List of values that PaymentMethodConfigurationCashAppDisplayPreferencePreference can take
const (
	PaymentMethodConfigurationCashAppDisplayPreferencePreferenceNone PaymentMethodConfigurationCashAppDisplayPreferencePreference = "none"
	PaymentMethodConfigurationCashAppDisplayPreferencePreferenceOff  PaymentMethodConfigurationCashAppDisplayPreferencePreference = "off"
	PaymentMethodConfigurationCashAppDisplayPreferencePreferenceOn   PaymentMethodConfigurationCashAppDisplayPreferencePreference = "on"
)

// The effective display preference value.
type PaymentMethodConfigurationCashAppDisplayPreferenceValue string

// List of values that PaymentMethodConfigurationCashAppDisplayPreferenceValue can take
const (
	PaymentMethodConfigurationCashAppDisplayPreferenceValueOff PaymentMethodConfigurationCashAppDisplayPreferenceValue = "off"
	PaymentMethodConfigurationCashAppDisplayPreferenceValueOn  PaymentMethodConfigurationCashAppDisplayPreferenceValue = "on"
)

// The account's display preference.
type PaymentMethodConfigurationEPSDisplayPreferencePreference string

// List of values that PaymentMethodConfigurationEPSDisplayPreferencePreference can take
const (
	PaymentMethodConfigurationEPSDisplayPreferencePreferenceNone PaymentMethodConfigurationEPSDisplayPreferencePreference = "none"
	PaymentMethodConfigurationEPSDisplayPreferencePreferenceOff  PaymentMethodConfigurationEPSDisplayPreferencePreference = "off"
	PaymentMethodConfigurationEPSDisplayPreferencePreferenceOn   PaymentMethodConfigurationEPSDisplayPreferencePreference = "on"
)

// The effective display preference value.
type PaymentMethodConfigurationEPSDisplayPreferenceValue string

// List of values that PaymentMethodConfigurationEPSDisplayPreferenceValue can take
const (
	PaymentMethodConfigurationEPSDisplayPreferenceValueOff PaymentMethodConfigurationEPSDisplayPreferenceValue = "off"
	PaymentMethodConfigurationEPSDisplayPreferenceValueOn  PaymentMethodConfigurationEPSDisplayPreferenceValue = "on"
)

// The account's display preference.
type PaymentMethodConfigurationFPXDisplayPreferencePreference string

// List of values that PaymentMethodConfigurationFPXDisplayPreferencePreference can take
const (
	PaymentMethodConfigurationFPXDisplayPreferencePreferenceNone PaymentMethodConfigurationFPXDisplayPreferencePreference = "none"
	PaymentMethodConfigurationFPXDisplayPreferencePreferenceOff  PaymentMethodConfigurationFPXDisplayPreferencePreference = "off"
	PaymentMethodConfigurationFPXDisplayPreferencePreferenceOn   PaymentMethodConfigurationFPXDisplayPreferencePreference = "on"
)

// The effective display preference value.
type PaymentMethodConfigurationFPXDisplayPreferenceValue string

// List of values that PaymentMethodConfigurationFPXDisplayPreferenceValue can take
const (
	PaymentMethodConfigurationFPXDisplayPreferenceValueOff PaymentMethodConfigurationFPXDisplayPreferenceValue = "off"
	PaymentMethodConfigurationFPXDisplayPreferenceValueOn  PaymentMethodConfigurationFPXDisplayPreferenceValue = "on"
)

// The account's display preference.
type PaymentMethodConfigurationGiropayDisplayPreferencePreference string

// List of values that PaymentMethodConfigurationGiropayDisplayPreferencePreference can take
const (
	PaymentMethodConfigurationGiropayDisplayPreferencePreferenceNone PaymentMethodConfigurationGiropayDisplayPreferencePreference = "none"
	PaymentMethodConfigurationGiropayDisplayPreferencePreferenceOff  PaymentMethodConfigurationGiropayDisplayPreferencePreference = "off"
	PaymentMethodConfigurationGiropayDisplayPreferencePreferenceOn   PaymentMethodConfigurationGiropayDisplayPreferencePreference = "on"
)

// The effective display preference value.
type PaymentMethodConfigurationGiropayDisplayPreferenceValue string

// List of values that PaymentMethodConfigurationGiropayDisplayPreferenceValue can take
const (
	PaymentMethodConfigurationGiropayDisplayPreferenceValueOff PaymentMethodConfigurationGiropayDisplayPreferenceValue = "off"
	PaymentMethodConfigurationGiropayDisplayPreferenceValueOn  PaymentMethodConfigurationGiropayDisplayPreferenceValue = "on"
)

// The account's display preference.
type PaymentMethodConfigurationGooglePayDisplayPreferencePreference string

// List of values that PaymentMethodConfigurationGooglePayDisplayPreferencePreference can take
const (
	PaymentMethodConfigurationGooglePayDisplayPreferencePreferenceNone PaymentMethodConfigurationGooglePayDisplayPreferencePreference = "none"
	PaymentMethodConfigurationGooglePayDisplayPreferencePreferenceOff  PaymentMethodConfigurationGooglePayDisplayPreferencePreference = "off"
	PaymentMethodConfigurationGooglePayDisplayPreferencePreferenceOn   PaymentMethodConfigurationGooglePayDisplayPreferencePreference = "on"
)

// The effective display preference value.
type PaymentMethodConfigurationGooglePayDisplayPreferenceValue string

// List of values that PaymentMethodConfigurationGooglePayDisplayPreferenceValue can take
const (
	PaymentMethodConfigurationGooglePayDisplayPreferenceValueOff PaymentMethodConfigurationGooglePayDisplayPreferenceValue = "off"
	PaymentMethodConfigurationGooglePayDisplayPreferenceValueOn  PaymentMethodConfigurationGooglePayDisplayPreferenceValue = "on"
)

// The account's display preference.
type PaymentMethodConfigurationGrabpayDisplayPreferencePreference string

// List of values that PaymentMethodConfigurationGrabpayDisplayPreferencePreference can take
const (
	PaymentMethodConfigurationGrabpayDisplayPreferencePreferenceNone PaymentMethodConfigurationGrabpayDisplayPreferencePreference = "none"
	PaymentMethodConfigurationGrabpayDisplayPreferencePreferenceOff  PaymentMethodConfigurationGrabpayDisplayPreferencePreference = "off"
	PaymentMethodConfigurationGrabpayDisplayPreferencePreferenceOn   PaymentMethodConfigurationGrabpayDisplayPreferencePreference = "on"
)

// The effective display preference value.
type PaymentMethodConfigurationGrabpayDisplayPreferenceValue string

// List of values that PaymentMethodConfigurationGrabpayDisplayPreferenceValue can take
const (
	PaymentMethodConfigurationGrabpayDisplayPreferenceValueOff PaymentMethodConfigurationGrabpayDisplayPreferenceValue = "off"
	PaymentMethodConfigurationGrabpayDisplayPreferenceValueOn  PaymentMethodConfigurationGrabpayDisplayPreferenceValue = "on"
)

// The account's display preference.
type PaymentMethodConfigurationIDBankTransferDisplayPreferencePreference string

// List of values that PaymentMethodConfigurationIDBankTransferDisplayPreferencePreference can take
const (
	PaymentMethodConfigurationIDBankTransferDisplayPreferencePreferenceNone PaymentMethodConfigurationIDBankTransferDisplayPreferencePreference = "none"
	PaymentMethodConfigurationIDBankTransferDisplayPreferencePreferenceOff  PaymentMethodConfigurationIDBankTransferDisplayPreferencePreference = "off"
	PaymentMethodConfigurationIDBankTransferDisplayPreferencePreferenceOn   PaymentMethodConfigurationIDBankTransferDisplayPreferencePreference = "on"
)

// The effective display preference value.
type PaymentMethodConfigurationIDBankTransferDisplayPreferenceValue string

// List of values that PaymentMethodConfigurationIDBankTransferDisplayPreferenceValue can take
const (
	PaymentMethodConfigurationIDBankTransferDisplayPreferenceValueOff PaymentMethodConfigurationIDBankTransferDisplayPreferenceValue = "off"
	PaymentMethodConfigurationIDBankTransferDisplayPreferenceValueOn  PaymentMethodConfigurationIDBankTransferDisplayPreferenceValue = "on"
)

// The account's display preference.
type PaymentMethodConfigurationIDEALDisplayPreferencePreference string

// List of values that PaymentMethodConfigurationIDEALDisplayPreferencePreference can take
const (
	PaymentMethodConfigurationIDEALDisplayPreferencePreferenceNone PaymentMethodConfigurationIDEALDisplayPreferencePreference = "none"
	PaymentMethodConfigurationIDEALDisplayPreferencePreferenceOff  PaymentMethodConfigurationIDEALDisplayPreferencePreference = "off"
	PaymentMethodConfigurationIDEALDisplayPreferencePreferenceOn   PaymentMethodConfigurationIDEALDisplayPreferencePreference = "on"
)

// The effective display preference value.
type PaymentMethodConfigurationIDEALDisplayPreferenceValue string

// List of values that PaymentMethodConfigurationIDEALDisplayPreferenceValue can take
const (
	PaymentMethodConfigurationIDEALDisplayPreferenceValueOff PaymentMethodConfigurationIDEALDisplayPreferenceValue = "off"
	PaymentMethodConfigurationIDEALDisplayPreferenceValueOn  PaymentMethodConfigurationIDEALDisplayPreferenceValue = "on"
)

// The account's display preference.
type PaymentMethodConfigurationJCBDisplayPreferencePreference string

// List of values that PaymentMethodConfigurationJCBDisplayPreferencePreference can take
const (
	PaymentMethodConfigurationJCBDisplayPreferencePreferenceNone PaymentMethodConfigurationJCBDisplayPreferencePreference = "none"
	PaymentMethodConfigurationJCBDisplayPreferencePreferenceOff  PaymentMethodConfigurationJCBDisplayPreferencePreference = "off"
	PaymentMethodConfigurationJCBDisplayPreferencePreferenceOn   PaymentMethodConfigurationJCBDisplayPreferencePreference = "on"
)

// The effective display preference value.
type PaymentMethodConfigurationJCBDisplayPreferenceValue string

// List of values that PaymentMethodConfigurationJCBDisplayPreferenceValue can take
const (
	PaymentMethodConfigurationJCBDisplayPreferenceValueOff PaymentMethodConfigurationJCBDisplayPreferenceValue = "off"
	PaymentMethodConfigurationJCBDisplayPreferenceValueOn  PaymentMethodConfigurationJCBDisplayPreferenceValue = "on"
)

// The account's display preference.
type PaymentMethodConfigurationKlarnaDisplayPreferencePreference string

// List of values that PaymentMethodConfigurationKlarnaDisplayPreferencePreference can take
const (
	PaymentMethodConfigurationKlarnaDisplayPreferencePreferenceNone PaymentMethodConfigurationKlarnaDisplayPreferencePreference = "none"
	PaymentMethodConfigurationKlarnaDisplayPreferencePreferenceOff  PaymentMethodConfigurationKlarnaDisplayPreferencePreference = "off"
	PaymentMethodConfigurationKlarnaDisplayPreferencePreferenceOn   PaymentMethodConfigurationKlarnaDisplayPreferencePreference = "on"
)

// The effective display preference value.
type PaymentMethodConfigurationKlarnaDisplayPreferenceValue string

// List of values that PaymentMethodConfigurationKlarnaDisplayPreferenceValue can take
const (
	PaymentMethodConfigurationKlarnaDisplayPreferenceValueOff PaymentMethodConfigurationKlarnaDisplayPreferenceValue = "off"
	PaymentMethodConfigurationKlarnaDisplayPreferenceValueOn  PaymentMethodConfigurationKlarnaDisplayPreferenceValue = "on"
)

// The account's display preference.
type PaymentMethodConfigurationKonbiniDisplayPreferencePreference string

// List of values that PaymentMethodConfigurationKonbiniDisplayPreferencePreference can take
const (
	PaymentMethodConfigurationKonbiniDisplayPreferencePreferenceNone PaymentMethodConfigurationKonbiniDisplayPreferencePreference = "none"
	PaymentMethodConfigurationKonbiniDisplayPreferencePreferenceOff  PaymentMethodConfigurationKonbiniDisplayPreferencePreference = "off"
	PaymentMethodConfigurationKonbiniDisplayPreferencePreferenceOn   PaymentMethodConfigurationKonbiniDisplayPreferencePreference = "on"
)

// The effective display preference value.
type PaymentMethodConfigurationKonbiniDisplayPreferenceValue string

// List of values that PaymentMethodConfigurationKonbiniDisplayPreferenceValue can take
const (
	PaymentMethodConfigurationKonbiniDisplayPreferenceValueOff PaymentMethodConfigurationKonbiniDisplayPreferenceValue = "off"
	PaymentMethodConfigurationKonbiniDisplayPreferenceValueOn  PaymentMethodConfigurationKonbiniDisplayPreferenceValue = "on"
)

// The account's display preference.
type PaymentMethodConfigurationLinkDisplayPreferencePreference string

// List of values that PaymentMethodConfigurationLinkDisplayPreferencePreference can take
const (
	PaymentMethodConfigurationLinkDisplayPreferencePreferenceNone PaymentMethodConfigurationLinkDisplayPreferencePreference = "none"
	PaymentMethodConfigurationLinkDisplayPreferencePreferenceOff  PaymentMethodConfigurationLinkDisplayPreferencePreference = "off"
	PaymentMethodConfigurationLinkDisplayPreferencePreferenceOn   PaymentMethodConfigurationLinkDisplayPreferencePreference = "on"
)

// The effective display preference value.
type PaymentMethodConfigurationLinkDisplayPreferenceValue string

// List of values that PaymentMethodConfigurationLinkDisplayPreferenceValue can take
const (
	PaymentMethodConfigurationLinkDisplayPreferenceValueOff PaymentMethodConfigurationLinkDisplayPreferenceValue = "off"
	PaymentMethodConfigurationLinkDisplayPreferenceValueOn  PaymentMethodConfigurationLinkDisplayPreferenceValue = "on"
)

// The account's display preference.
type PaymentMethodConfigurationMultibancoDisplayPreferencePreference string

// List of values that PaymentMethodConfigurationMultibancoDisplayPreferencePreference can take
const (
	PaymentMethodConfigurationMultibancoDisplayPreferencePreferenceNone PaymentMethodConfigurationMultibancoDisplayPreferencePreference = "none"
	PaymentMethodConfigurationMultibancoDisplayPreferencePreferenceOff  PaymentMethodConfigurationMultibancoDisplayPreferencePreference = "off"
	PaymentMethodConfigurationMultibancoDisplayPreferencePreferenceOn   PaymentMethodConfigurationMultibancoDisplayPreferencePreference = "on"
)

// The effective display preference value.
type PaymentMethodConfigurationMultibancoDisplayPreferenceValue string

// List of values that PaymentMethodConfigurationMultibancoDisplayPreferenceValue can take
const (
	PaymentMethodConfigurationMultibancoDisplayPreferenceValueOff PaymentMethodConfigurationMultibancoDisplayPreferenceValue = "off"
	PaymentMethodConfigurationMultibancoDisplayPreferenceValueOn  PaymentMethodConfigurationMultibancoDisplayPreferenceValue = "on"
)

// The account's display preference.
type PaymentMethodConfigurationNetbankingDisplayPreferencePreference string

// List of values that PaymentMethodConfigurationNetbankingDisplayPreferencePreference can take
const (
	PaymentMethodConfigurationNetbankingDisplayPreferencePreferenceNone PaymentMethodConfigurationNetbankingDisplayPreferencePreference = "none"
	PaymentMethodConfigurationNetbankingDisplayPreferencePreferenceOff  PaymentMethodConfigurationNetbankingDisplayPreferencePreference = "off"
	PaymentMethodConfigurationNetbankingDisplayPreferencePreferenceOn   PaymentMethodConfigurationNetbankingDisplayPreferencePreference = "on"
)

// The effective display preference value.
type PaymentMethodConfigurationNetbankingDisplayPreferenceValue string

// List of values that PaymentMethodConfigurationNetbankingDisplayPreferenceValue can take
const (
	PaymentMethodConfigurationNetbankingDisplayPreferenceValueOff PaymentMethodConfigurationNetbankingDisplayPreferenceValue = "off"
	PaymentMethodConfigurationNetbankingDisplayPreferenceValueOn  PaymentMethodConfigurationNetbankingDisplayPreferenceValue = "on"
)

// The account's display preference.
type PaymentMethodConfigurationOXXODisplayPreferencePreference string

// List of values that PaymentMethodConfigurationOXXODisplayPreferencePreference can take
const (
	PaymentMethodConfigurationOXXODisplayPreferencePreferenceNone PaymentMethodConfigurationOXXODisplayPreferencePreference = "none"
	PaymentMethodConfigurationOXXODisplayPreferencePreferenceOff  PaymentMethodConfigurationOXXODisplayPreferencePreference = "off"
	PaymentMethodConfigurationOXXODisplayPreferencePreferenceOn   PaymentMethodConfigurationOXXODisplayPreferencePreference = "on"
)

// The effective display preference value.
type PaymentMethodConfigurationOXXODisplayPreferenceValue string

// List of values that PaymentMethodConfigurationOXXODisplayPreferenceValue can take
const (
	PaymentMethodConfigurationOXXODisplayPreferenceValueOff PaymentMethodConfigurationOXXODisplayPreferenceValue = "off"
	PaymentMethodConfigurationOXXODisplayPreferenceValueOn  PaymentMethodConfigurationOXXODisplayPreferenceValue = "on"
)

// The account's display preference.
type PaymentMethodConfigurationP24DisplayPreferencePreference string

// List of values that PaymentMethodConfigurationP24DisplayPreferencePreference can take
const (
	PaymentMethodConfigurationP24DisplayPreferencePreferenceNone PaymentMethodConfigurationP24DisplayPreferencePreference = "none"
	PaymentMethodConfigurationP24DisplayPreferencePreferenceOff  PaymentMethodConfigurationP24DisplayPreferencePreference = "off"
	PaymentMethodConfigurationP24DisplayPreferencePreferenceOn   PaymentMethodConfigurationP24DisplayPreferencePreference = "on"
)

// The effective display preference value.
type PaymentMethodConfigurationP24DisplayPreferenceValue string

// List of values that PaymentMethodConfigurationP24DisplayPreferenceValue can take
const (
	PaymentMethodConfigurationP24DisplayPreferenceValueOff PaymentMethodConfigurationP24DisplayPreferenceValue = "off"
	PaymentMethodConfigurationP24DisplayPreferenceValueOn  PaymentMethodConfigurationP24DisplayPreferenceValue = "on"
)

// The account's display preference.
type PaymentMethodConfigurationPayByBankDisplayPreferencePreference string

// List of values that PaymentMethodConfigurationPayByBankDisplayPreferencePreference can take
const (
	PaymentMethodConfigurationPayByBankDisplayPreferencePreferenceNone PaymentMethodConfigurationPayByBankDisplayPreferencePreference = "none"
	PaymentMethodConfigurationPayByBankDisplayPreferencePreferenceOff  PaymentMethodConfigurationPayByBankDisplayPreferencePreference = "off"
	PaymentMethodConfigurationPayByBankDisplayPreferencePreferenceOn   PaymentMethodConfigurationPayByBankDisplayPreferencePreference = "on"
)

// The effective display preference value.
type PaymentMethodConfigurationPayByBankDisplayPreferenceValue string

// List of values that PaymentMethodConfigurationPayByBankDisplayPreferenceValue can take
const (
	PaymentMethodConfigurationPayByBankDisplayPreferenceValueOff PaymentMethodConfigurationPayByBankDisplayPreferenceValue = "off"
	PaymentMethodConfigurationPayByBankDisplayPreferenceValueOn  PaymentMethodConfigurationPayByBankDisplayPreferenceValue = "on"
)

// The account's display preference.
type PaymentMethodConfigurationPayNowDisplayPreferencePreference string

// List of values that PaymentMethodConfigurationPayNowDisplayPreferencePreference can take
const (
	PaymentMethodConfigurationPayNowDisplayPreferencePreferenceNone PaymentMethodConfigurationPayNowDisplayPreferencePreference = "none"
	PaymentMethodConfigurationPayNowDisplayPreferencePreferenceOff  PaymentMethodConfigurationPayNowDisplayPreferencePreference = "off"
	PaymentMethodConfigurationPayNowDisplayPreferencePreferenceOn   PaymentMethodConfigurationPayNowDisplayPreferencePreference = "on"
)

// The effective display preference value.
type PaymentMethodConfigurationPayNowDisplayPreferenceValue string

// List of values that PaymentMethodConfigurationPayNowDisplayPreferenceValue can take
const (
	PaymentMethodConfigurationPayNowDisplayPreferenceValueOff PaymentMethodConfigurationPayNowDisplayPreferenceValue = "off"
	PaymentMethodConfigurationPayNowDisplayPreferenceValueOn  PaymentMethodConfigurationPayNowDisplayPreferenceValue = "on"
)

// The account's display preference.
type PaymentMethodConfigurationPaypalDisplayPreferencePreference string

// List of values that PaymentMethodConfigurationPaypalDisplayPreferencePreference can take
const (
	PaymentMethodConfigurationPaypalDisplayPreferencePreferenceNone PaymentMethodConfigurationPaypalDisplayPreferencePreference = "none"
	PaymentMethodConfigurationPaypalDisplayPreferencePreferenceOff  PaymentMethodConfigurationPaypalDisplayPreferencePreference = "off"
	PaymentMethodConfigurationPaypalDisplayPreferencePreferenceOn   PaymentMethodConfigurationPaypalDisplayPreferencePreference = "on"
)

// The effective display preference value.
type PaymentMethodConfigurationPaypalDisplayPreferenceValue string

// List of values that PaymentMethodConfigurationPaypalDisplayPreferenceValue can take
const (
	PaymentMethodConfigurationPaypalDisplayPreferenceValueOff PaymentMethodConfigurationPaypalDisplayPreferenceValue = "off"
	PaymentMethodConfigurationPaypalDisplayPreferenceValueOn  PaymentMethodConfigurationPaypalDisplayPreferenceValue = "on"
)

// The account's display preference.
type PaymentMethodConfigurationPromptPayDisplayPreferencePreference string

// List of values that PaymentMethodConfigurationPromptPayDisplayPreferencePreference can take
const (
	PaymentMethodConfigurationPromptPayDisplayPreferencePreferenceNone PaymentMethodConfigurationPromptPayDisplayPreferencePreference = "none"
	PaymentMethodConfigurationPromptPayDisplayPreferencePreferenceOff  PaymentMethodConfigurationPromptPayDisplayPreferencePreference = "off"
	PaymentMethodConfigurationPromptPayDisplayPreferencePreferenceOn   PaymentMethodConfigurationPromptPayDisplayPreferencePreference = "on"
)

// The effective display preference value.
type PaymentMethodConfigurationPromptPayDisplayPreferenceValue string

// List of values that PaymentMethodConfigurationPromptPayDisplayPreferenceValue can take
const (
	PaymentMethodConfigurationPromptPayDisplayPreferenceValueOff PaymentMethodConfigurationPromptPayDisplayPreferenceValue = "off"
	PaymentMethodConfigurationPromptPayDisplayPreferenceValueOn  PaymentMethodConfigurationPromptPayDisplayPreferenceValue = "on"
)

// The account's display preference.
type PaymentMethodConfigurationSEPADebitDisplayPreferencePreference string

// List of values that PaymentMethodConfigurationSEPADebitDisplayPreferencePreference can take
const (
	PaymentMethodConfigurationSEPADebitDisplayPreferencePreferenceNone PaymentMethodConfigurationSEPADebitDisplayPreferencePreference = "none"
	PaymentMethodConfigurationSEPADebitDisplayPreferencePreferenceOff  PaymentMethodConfigurationSEPADebitDisplayPreferencePreference = "off"
	PaymentMethodConfigurationSEPADebitDisplayPreferencePreferenceOn   PaymentMethodConfigurationSEPADebitDisplayPreferencePreference = "on"
)

// The effective display preference value.
type PaymentMethodConfigurationSEPADebitDisplayPreferenceValue string

// List of values that PaymentMethodConfigurationSEPADebitDisplayPreferenceValue can take
const (
	PaymentMethodConfigurationSEPADebitDisplayPreferenceValueOff PaymentMethodConfigurationSEPADebitDisplayPreferenceValue = "off"
	PaymentMethodConfigurationSEPADebitDisplayPreferenceValueOn  PaymentMethodConfigurationSEPADebitDisplayPreferenceValue = "on"
)

// The account's display preference.
type PaymentMethodConfigurationSofortDisplayPreferencePreference string

// List of values that PaymentMethodConfigurationSofortDisplayPreferencePreference can take
const (
	PaymentMethodConfigurationSofortDisplayPreferencePreferenceNone PaymentMethodConfigurationSofortDisplayPreferencePreference = "none"
	PaymentMethodConfigurationSofortDisplayPreferencePreferenceOff  PaymentMethodConfigurationSofortDisplayPreferencePreference = "off"
	PaymentMethodConfigurationSofortDisplayPreferencePreferenceOn   PaymentMethodConfigurationSofortDisplayPreferencePreference = "on"
)

// The effective display preference value.
type PaymentMethodConfigurationSofortDisplayPreferenceValue string

// List of values that PaymentMethodConfigurationSofortDisplayPreferenceValue can take
const (
	PaymentMethodConfigurationSofortDisplayPreferenceValueOff PaymentMethodConfigurationSofortDisplayPreferenceValue = "off"
	PaymentMethodConfigurationSofortDisplayPreferenceValueOn  PaymentMethodConfigurationSofortDisplayPreferenceValue = "on"
)

// The account's display preference.
type PaymentMethodConfigurationUpiDisplayPreferencePreference string

// List of values that PaymentMethodConfigurationUpiDisplayPreferencePreference can take
const (
	PaymentMethodConfigurationUpiDisplayPreferencePreferenceNone PaymentMethodConfigurationUpiDisplayPreferencePreference = "none"
	PaymentMethodConfigurationUpiDisplayPreferencePreferenceOff  PaymentMethodConfigurationUpiDisplayPreferencePreference = "off"
	PaymentMethodConfigurationUpiDisplayPreferencePreferenceOn   PaymentMethodConfigurationUpiDisplayPreferencePreference = "on"
)

// The effective display preference value.
type PaymentMethodConfigurationUpiDisplayPreferenceValue string

// List of values that PaymentMethodConfigurationUpiDisplayPreferenceValue can take
const (
	PaymentMethodConfigurationUpiDisplayPreferenceValueOff PaymentMethodConfigurationUpiDisplayPreferenceValue = "off"
	PaymentMethodConfigurationUpiDisplayPreferenceValueOn  PaymentMethodConfigurationUpiDisplayPreferenceValue = "on"
)

// The account's display preference.
type PaymentMethodConfigurationUSBankAccountDisplayPreferencePreference string

// List of values that PaymentMethodConfigurationUSBankAccountDisplayPreferencePreference can take
const (
	PaymentMethodConfigurationUSBankAccountDisplayPreferencePreferenceNone PaymentMethodConfigurationUSBankAccountDisplayPreferencePreference = "none"
	PaymentMethodConfigurationUSBankAccountDisplayPreferencePreferenceOff  PaymentMethodConfigurationUSBankAccountDisplayPreferencePreference = "off"
	PaymentMethodConfigurationUSBankAccountDisplayPreferencePreferenceOn   PaymentMethodConfigurationUSBankAccountDisplayPreferencePreference = "on"
)

// The effective display preference value.
type PaymentMethodConfigurationUSBankAccountDisplayPreferenceValue string

// List of values that PaymentMethodConfigurationUSBankAccountDisplayPreferenceValue can take
const (
	PaymentMethodConfigurationUSBankAccountDisplayPreferenceValueOff PaymentMethodConfigurationUSBankAccountDisplayPreferenceValue = "off"
	PaymentMethodConfigurationUSBankAccountDisplayPreferenceValueOn  PaymentMethodConfigurationUSBankAccountDisplayPreferenceValue = "on"
)

// The account's display preference.
type PaymentMethodConfigurationWeChatPayDisplayPreferencePreference string

// List of values that PaymentMethodConfigurationWeChatPayDisplayPreferencePreference can take
const (
	PaymentMethodConfigurationWeChatPayDisplayPreferencePreferenceNone PaymentMethodConfigurationWeChatPayDisplayPreferencePreference = "none"
	PaymentMethodConfigurationWeChatPayDisplayPreferencePreferenceOff  PaymentMethodConfigurationWeChatPayDisplayPreferencePreference = "off"
	PaymentMethodConfigurationWeChatPayDisplayPreferencePreferenceOn   PaymentMethodConfigurationWeChatPayDisplayPreferencePreference = "on"
)

// The effective display preference value.
type PaymentMethodConfigurationWeChatPayDisplayPreferenceValue string

// List of values that PaymentMethodConfigurationWeChatPayDisplayPreferenceValue can take
const (
	PaymentMethodConfigurationWeChatPayDisplayPreferenceValueOff PaymentMethodConfigurationWeChatPayDisplayPreferenceValue = "off"
	PaymentMethodConfigurationWeChatPayDisplayPreferenceValueOn  PaymentMethodConfigurationWeChatPayDisplayPreferenceValue = "on"
)

// List payment method configurations
type PaymentMethodConfigurationListParams struct {
	ListParams `form:"*"`
	// The Connect application to filter by.
	Application *string `form:"application"`
	// Specifies which fields in the response should be expanded.
	Expand []*string `form:"expand"`
}

// AddExpand appends a new field to expand.
func (p *PaymentMethodConfigurationListParams) AddExpand(f string) {
	p.Expand = append(p.Expand, &f)
}

// Whether or not the payment method should be displayed.
type PaymentMethodConfigurationACSSDebitDisplayPreferenceParams struct {
	// The account's preference for whether or not to display this payment method.
	Preference *string `form:"preference"`
}

// Canadian pre-authorized debit payments, check this [page](https://stripe.com/docs/payments/acss-debit) for more details like country availability.
type PaymentMethodConfigurationACSSDebitParams struct {
	// Whether or not the payment method should be displayed.
	DisplayPreference *PaymentMethodConfigurationACSSDebitDisplayPreferenceParams `form:"display_preference"`
}

// Whether or not the payment method should be displayed.
type PaymentMethodConfigurationAffirmDisplayPreferenceParams struct {
	// The account's preference for whether or not to display this payment method.
	Preference *string `form:"preference"`
}

// [Affirm](https://www.affirm.com/) gives your customers a way to split purchases over a series of payments. Depending on the purchase, they can pay with four interest-free payments (Split Pay) or pay over a longer term (Installments), which might include interest. Check this [page](https://stripe.com/docs/payments/affirm) for more details like country availability.
type PaymentMethodConfigurationAffirmParams struct {
	// Whether or not the payment method should be displayed.
	DisplayPreference *PaymentMethodConfigurationAffirmDisplayPreferenceParams `form:"display_preference"`
}

// Whether or not the payment method should be displayed.
type PaymentMethodConfigurationAfterpayClearpayDisplayPreferenceParams struct {
	// The account's preference for whether or not to display this payment method.
	Preference *string `form:"preference"`
}

// Afterpay gives your customers a way to pay for purchases in installments, check this [page](https://stripe.com/docs/payments/afterpay-clearpay) for more details like country availability. Afterpay is particularly popular among businesses selling fashion, beauty, and sports products.
type PaymentMethodConfigurationAfterpayClearpayParams struct {
	// Whether or not the payment method should be displayed.
	DisplayPreference *PaymentMethodConfigurationAfterpayClearpayDisplayPreferenceParams `form:"display_preference"`
}

// Whether or not the payment method should be displayed.
type PaymentMethodConfigurationAlipayDisplayPreferenceParams struct {
	// The account's preference for whether or not to display this payment method.
	Preference *string `form:"preference"`
}

// Alipay is a digital wallet in China that has more than a billion active users worldwide. Alipay users can pay on the web or on a mobile device using login credentials or their Alipay app. Alipay has a low dispute rate and reduces fraud by authenticating payments using the customer's login credentials. Check this [page](https://stripe.com/docs/payments/alipay) for more details.
type PaymentMethodConfigurationAlipayParams struct {
	// Whether or not the payment method should be displayed.
	DisplayPreference *PaymentMethodConfigurationAlipayDisplayPreferenceParams `form:"display_preference"`
}

// Whether or not the payment method should be displayed.
type PaymentMethodConfigurationApplePayDisplayPreferenceParams struct {
	// The account's preference for whether or not to display this payment method.
	Preference *string `form:"preference"`
}

// Stripe users can accept [Apple Pay](https://stripe.com/payments/apple-pay) in iOS applications in iOS 9 and later, and on the web in Safari starting with iOS 10 or macOS Sierra. There are no additional fees to process Apple Pay payments, and the [pricing](https://stripe.com/pricing) is the same as other card transactions. Check this [page](https://stripe.com/docs/apple-pay) for more details.
type PaymentMethodConfigurationApplePayParams struct {
	// Whether or not the payment method should be displayed.
	DisplayPreference *PaymentMethodConfigurationApplePayDisplayPreferenceParams `form:"display_preference"`
}

// Whether or not the payment method should be displayed.
type PaymentMethodConfigurationApplePayLaterDisplayPreferenceParams struct {
	// The account's preference for whether or not to display this payment method.
	Preference *string `form:"preference"`
}

// Apple Pay Later, a payment method for customers to buy now and pay later, gives your customers a way to split purchases into four installments across six weeks.
type PaymentMethodConfigurationApplePayLaterParams struct {
	// Whether or not the payment method should be displayed.
	DisplayPreference *PaymentMethodConfigurationApplePayLaterDisplayPreferenceParams `form:"display_preference"`
}

// Whether or not the payment method should be displayed.
type PaymentMethodConfigurationAUBECSDebitDisplayPreferenceParams struct {
	// The account's preference for whether or not to display this payment method.
	Preference *string `form:"preference"`
}

// Stripe users in Australia can accept Bulk Electronic Clearing System (BECS) direct debit payments from customers with an Australian bank account. Check this [page](https://stripe.com/docs/payments/au-becs-debit) for more details.
type PaymentMethodConfigurationAUBECSDebitParams struct {
	// Whether or not the payment method should be displayed.
	DisplayPreference *PaymentMethodConfigurationAUBECSDebitDisplayPreferenceParams `form:"display_preference"`
}

// Whether or not the payment method should be displayed.
type PaymentMethodConfigurationBACSDebitDisplayPreferenceParams struct {
	// The account's preference for whether or not to display this payment method.
	Preference *string `form:"preference"`
}

// Stripe users in the UK can accept Bacs Direct Debit payments from customers with a UK bank account, check this [page](https://stripe.com/docs/payments/payment-methods/bacs-debit) for more details.
type PaymentMethodConfigurationBACSDebitParams struct {
	// Whether or not the payment method should be displayed.
	DisplayPreference *PaymentMethodConfigurationBACSDebitDisplayPreferenceParams `form:"display_preference"`
}

// Whether or not the payment method should be displayed.
type PaymentMethodConfigurationBancontactDisplayPreferenceParams struct {
	// The account's preference for whether or not to display this payment method.
	Preference *string `form:"preference"`
}

// Bancontact is the most popular online payment method in Belgium, with over 15 million cards in circulation. [Customers](https://stripe.com/docs/api/customers) use a Bancontact card or mobile app linked to a Belgian bank account to make online payments that are secure, guaranteed, and confirmed immediately. Check this [page](https://stripe.com/docs/payments/bancontact) for more details.
type PaymentMethodConfigurationBancontactParams struct {
	// Whether or not the payment method should be displayed.
	DisplayPreference *PaymentMethodConfigurationBancontactDisplayPreferenceParams `form:"display_preference"`
}

// Whether or not the payment method should be displayed.
type PaymentMethodConfigurationBLIKDisplayPreferenceParams struct {
	// The account's preference for whether or not to display this payment method.
	Preference *string `form:"preference"`
}

// BLIK is a [single use](https://stripe.com/docs/payments/payment-methods#usage) payment method that requires customers to authenticate their payments. When customers want to pay online using BLIK, they request a six-digit code from their banking application and enter it into the payment collection form. Check this [page](https://stripe.com/docs/payments/blik) for more details.
type PaymentMethodConfigurationBLIKParams struct {
	// Whether or not the payment method should be displayed.
	DisplayPreference *PaymentMethodConfigurationBLIKDisplayPreferenceParams `form:"display_preference"`
}

// Whether or not the payment method should be displayed.
type PaymentMethodConfigurationBoletoDisplayPreferenceParams struct {
	// The account's preference for whether or not to display this payment method.
	Preference *string `form:"preference"`
}

// Boleto is an official (regulated by the Central Bank of Brazil) payment method in Brazil. Check this [page](https://stripe.com/docs/payments/boleto) for more details.
type PaymentMethodConfigurationBoletoParams struct {
	// Whether or not the payment method should be displayed.
	DisplayPreference *PaymentMethodConfigurationBoletoDisplayPreferenceParams `form:"display_preference"`
}

// Whether or not the payment method should be displayed.
type PaymentMethodConfigurationCardDisplayPreferenceParams struct {
	// The account's preference for whether or not to display this payment method.
	Preference *string `form:"preference"`
}

// Cards are a popular way for consumers and businesses to pay online or in person. Stripe supports global and local card networks.
type PaymentMethodConfigurationCardParams struct {
	// Whether or not the payment method should be displayed.
	DisplayPreference *PaymentMethodConfigurationCardDisplayPreferenceParams `form:"display_preference"`
}

// Whether or not the payment method should be displayed.
type PaymentMethodConfigurationCartesBancairesDisplayPreferenceParams struct {
	// The account's preference for whether or not to display this payment method.
	Preference *string `form:"preference"`
}

// Cartes Bancaires is France's local card network. More than 95% of these cards are co-branded with either Visa or Mastercard, meaning you can process these cards over either Cartes Bancaires or the Visa or Mastercard networks. Check this [page](https://stripe.com/docs/payments/cartes-bancaires) for more details.
type PaymentMethodConfigurationCartesBancairesParams struct {
	// Whether or not the payment method should be displayed.
	DisplayPreference *PaymentMethodConfigurationCartesBancairesDisplayPreferenceParams `form:"display_preference"`
}

// Whether or not the payment method should be displayed.
type PaymentMethodConfigurationCashAppDisplayPreferenceParams struct {
	// The account's preference for whether or not to display this payment method.
	Preference *string `form:"preference"`
}

// Cash App is a popular consumer app in the US that allows customers to bank, invest, send, and receive money using their digital wallet. Check this [page](https://stripe.com/docs/payments/cash-app-pay) for more details.
type PaymentMethodConfigurationCashAppParams struct {
	// Whether or not the payment method should be displayed.
	DisplayPreference *PaymentMethodConfigurationCashAppDisplayPreferenceParams `form:"display_preference"`
}

// Whether or not the payment method should be displayed.
type PaymentMethodConfigurationEPSDisplayPreferenceParams struct {
	// The account's preference for whether or not to display this payment method.
	Preference *string `form:"preference"`
}

// EPS is an Austria-based payment method that allows customers to complete transactions online using their bank credentials. EPS is supported by all Austrian banks and is accepted by over 80% of Austrian online retailers. Check this [page](https://stripe.com/docs/payments/eps) for more details.
type PaymentMethodConfigurationEPSParams struct {
	// Whether or not the payment method should be displayed.
	DisplayPreference *PaymentMethodConfigurationEPSDisplayPreferenceParams `form:"display_preference"`
}

// Whether or not the payment method should be displayed.
type PaymentMethodConfigurationFPXDisplayPreferenceParams struct {
	// The account's preference for whether or not to display this payment method.
	Preference *string `form:"preference"`
}

// Financial Process Exchange (FPX) is a Malaysia-based payment method that allows customers to complete transactions online using their bank credentials. Bank Negara Malaysia (BNM), the Central Bank of Malaysia, and eleven other major Malaysian financial institutions are members of the PayNet Group, which owns and operates FPX. It is one of the most popular online payment methods in Malaysia, with nearly 90 million transactions in 2018 according to BNM. Check this [page](https://stripe.com/docs/payments/fpx) for more details.
type PaymentMethodConfigurationFPXParams struct {
	// Whether or not the payment method should be displayed.
	DisplayPreference *PaymentMethodConfigurationFPXDisplayPreferenceParams `form:"display_preference"`
}

// Whether or not the payment method should be displayed.
type PaymentMethodConfigurationGiropayDisplayPreferenceParams struct {
	// The account's preference for whether or not to display this payment method.
	Preference *string `form:"preference"`
}

// giropay is a German payment method based on online banking, introduced in 2006. It allows customers to complete transactions online using their online banking environment, with funds debited from their bank account. Depending on their bank, customers confirm payments on giropay using a second factor of authentication or a PIN. giropay accounts for 10% of online checkouts in Germany. Check this [page](https://stripe.com/docs/payments/giropay) for more details.
type PaymentMethodConfigurationGiropayParams struct {
	// Whether or not the payment method should be displayed.
	DisplayPreference *PaymentMethodConfigurationGiropayDisplayPreferenceParams `form:"display_preference"`
}

// Whether or not the payment method should be displayed.
type PaymentMethodConfigurationGooglePayDisplayPreferenceParams struct {
	// The account's preference for whether or not to display this payment method.
	Preference *string `form:"preference"`
}

// Google Pay allows customers to make payments in your app or website using any credit or debit card saved to their Google Account, including those from Google Play, YouTube, Chrome, or an Android device. Use the Google Pay API to request any credit or debit card stored in your customer's Google account. Check this [page](https://stripe.com/docs/google-pay) for more details.
type PaymentMethodConfigurationGooglePayParams struct {
	// Whether or not the payment method should be displayed.
	DisplayPreference *PaymentMethodConfigurationGooglePayDisplayPreferenceParams `form:"display_preference"`
}

// Whether or not the payment method should be displayed.
type PaymentMethodConfigurationGrabpayDisplayPreferenceParams struct {
	// The account's preference for whether or not to display this payment method.
	Preference *string `form:"preference"`
}

// GrabPay is a payment method developed by [Grab](https://www.grab.com/sg/consumer/finance/pay/). GrabPay is a digital wallet - customers maintain a balance in their wallets that they pay out with. Check this [page](https://stripe.com/docs/payments/grabpay) for more details.
type PaymentMethodConfigurationGrabpayParams struct {
	// Whether or not the payment method should be displayed.
	DisplayPreference *PaymentMethodConfigurationGrabpayDisplayPreferenceParams `form:"display_preference"`
}

// Whether or not the payment method should be displayed.
type PaymentMethodConfigurationIDEALDisplayPreferenceParams struct {
	// The account's preference for whether or not to display this payment method.
	Preference *string `form:"preference"`
}

// iDEAL is a Netherlands-based payment method that allows customers to complete transactions online using their bank credentials. All major Dutch banks are members of Currence, the scheme that operates iDEAL, making it the most popular online payment method in the Netherlands with a share of online transactions close to 55%. Check this [page](https://stripe.com/docs/payments/ideal) for more details.
type PaymentMethodConfigurationIDEALParams struct {
	// Whether or not the payment method should be displayed.
	DisplayPreference *PaymentMethodConfigurationIDEALDisplayPreferenceParams `form:"display_preference"`
}

// Whether or not the payment method should be displayed.
type PaymentMethodConfigurationJCBDisplayPreferenceParams struct {
	// The account's preference for whether or not to display this payment method.
	Preference *string `form:"preference"`
}

// JCB is a credit card company based in Japan. JCB is currently available in Japan to businesses approved by JCB, and available to all businesses in Australia, Canada, Hong Kong, Japan, New Zealand, Singapore, Switzerland, United Kingdom, United States, and all countries in the European Economic Area except Iceland. Check this [page](https://support.stripe.com/questions/accepting-japan-credit-bureau-%28jcb%29-payments) for more details.
type PaymentMethodConfigurationJCBParams struct {
	// Whether or not the payment method should be displayed.
	DisplayPreference *PaymentMethodConfigurationJCBDisplayPreferenceParams `form:"display_preference"`
}

// Whether or not the payment method should be displayed.
type PaymentMethodConfigurationKlarnaDisplayPreferenceParams struct {
	// The account's preference for whether or not to display this payment method.
	Preference *string `form:"preference"`
}

// Klarna gives customers a range of [payment options](https://stripe.com/docs/payments/klarna#payment-options) during checkout. Available payment options vary depending on the customer's billing address and the transaction amount. These payment options make it convenient for customers to purchase items in all price ranges. Check this [page](https://stripe.com/docs/payments/klarna) for more details.
type PaymentMethodConfigurationKlarnaParams struct {
	// Whether or not the payment method should be displayed.
	DisplayPreference *PaymentMethodConfigurationKlarnaDisplayPreferenceParams `form:"display_preference"`
}

// Whether or not the payment method should be displayed.
type PaymentMethodConfigurationKonbiniDisplayPreferenceParams struct {
	// The account's preference for whether or not to display this payment method.
	Preference *string `form:"preference"`
}

// Konbini allows customers in Japan to pay for bills and online purchases at convenience stores with cash. Check this [page](https://stripe.com/docs/payments/konbini) for more details.
type PaymentMethodConfigurationKonbiniParams struct {
	// Whether or not the payment method should be displayed.
	DisplayPreference *PaymentMethodConfigurationKonbiniDisplayPreferenceParams `form:"display_preference"`
}

// Whether or not the payment method should be displayed.
type PaymentMethodConfigurationLinkDisplayPreferenceParams struct {
	// The account's preference for whether or not to display this payment method.
	Preference *string `form:"preference"`
}

// [Link](https://stripe.com/docs/payments/link) is a payment method network. With Link, users save their payment details once, then reuse that information to pay with one click for any business on the network.
type PaymentMethodConfigurationLinkParams struct {
	// Whether or not the payment method should be displayed.
	DisplayPreference *PaymentMethodConfigurationLinkDisplayPreferenceParams `form:"display_preference"`
}

// Whether or not the payment method should be displayed.
type PaymentMethodConfigurationOXXODisplayPreferenceParams struct {
	// The account's preference for whether or not to display this payment method.
	Preference *string `form:"preference"`
}

// OXXO is a Mexican chain of convenience stores with thousands of locations across Latin America and represents nearly 20% of online transactions in Mexico. OXXO allows customers to pay bills and online purchases in-store with cash. Check this [page](https://stripe.com/docs/payments/oxxo) for more details.
type PaymentMethodConfigurationOXXOParams struct {
	// Whether or not the payment method should be displayed.
	DisplayPreference *PaymentMethodConfigurationOXXODisplayPreferenceParams `form:"display_preference"`
}

// Whether or not the payment method should be displayed.
type PaymentMethodConfigurationP24DisplayPreferenceParams struct {
	// The account's preference for whether or not to display this payment method.
	Preference *string `form:"preference"`
}

// Przelewy24 is a Poland-based payment method aggregator that allows customers to complete transactions online using bank transfers and other methods. Bank transfers account for 30% of online payments in Poland and Przelewy24 provides a way for customers to pay with over 165 banks. Check this [page](https://stripe.com/docs/payments/p24) for more details.
type PaymentMethodConfigurationP24Params struct {
	// Whether or not the payment method should be displayed.
	DisplayPreference *PaymentMethodConfigurationP24DisplayPreferenceParams `form:"display_preference"`
}

// Whether or not the payment method should be displayed.
type PaymentMethodConfigurationPayNowDisplayPreferenceParams struct {
	// The account's preference for whether or not to display this payment method.
	Preference *string `form:"preference"`
}

// PayNow is a Singapore-based payment method that allows customers to make a payment using their preferred app from participating banks and participating non-bank financial institutions. Check this [page](https://stripe.com/docs/payments/paynow) for more details.
type PaymentMethodConfigurationPayNowParams struct {
	// Whether or not the payment method should be displayed.
	DisplayPreference *PaymentMethodConfigurationPayNowDisplayPreferenceParams `form:"display_preference"`
}

// Whether or not the payment method should be displayed.
type PaymentMethodConfigurationPaypalDisplayPreferenceParams struct {
	// The account's preference for whether or not to display this payment method.
	Preference *string `form:"preference"`
}

// PayPal, a digital wallet popular with customers in Europe, allows your customers worldwide to pay using their PayPal account. Check this [page](https://stripe.com/docs/payments/paypal) for more details.
type PaymentMethodConfigurationPaypalParams struct {
	// Whether or not the payment method should be displayed.
	DisplayPreference *PaymentMethodConfigurationPaypalDisplayPreferenceParams `form:"display_preference"`
}

// Whether or not the payment method should be displayed.
type PaymentMethodConfigurationPromptPayDisplayPreferenceParams struct {
	// The account's preference for whether or not to display this payment method.
	Preference *string `form:"preference"`
}

// PromptPay is a Thailand-based payment method that allows customers to make a payment using their preferred app from participating banks. Check this [page](https://stripe.com/docs/payments/promptpay) for more details.
type PaymentMethodConfigurationPromptPayParams struct {
	// Whether or not the payment method should be displayed.
	DisplayPreference *PaymentMethodConfigurationPromptPayDisplayPreferenceParams `form:"display_preference"`
}

// Whether or not the payment method should be displayed.
type PaymentMethodConfigurationSEPADebitDisplayPreferenceParams struct {
	// The account's preference for whether or not to display this payment method.
	Preference *string `form:"preference"`
}

// The [Single Euro Payments Area (SEPA)](https://en.wikipedia.org/wiki/Single_Euro_Payments_Area) is an initiative of the European Union to simplify payments within and across member countries. SEPA established and enforced banking standards to allow for the direct debiting of every EUR-denominated bank account within the SEPA region, check this [page](https://stripe.com/docs/payments/sepa-debit) for more details.
type PaymentMethodConfigurationSEPADebitParams struct {
	// Whether or not the payment method should be displayed.
	DisplayPreference *PaymentMethodConfigurationSEPADebitDisplayPreferenceParams `form:"display_preference"`
}

// Whether or not the payment method should be displayed.
type PaymentMethodConfigurationSofortDisplayPreferenceParams struct {
	// The account's preference for whether or not to display this payment method.
	Preference *string `form:"preference"`
}

// Stripe users in Europe and the United States can use the [Payment Intents API](https://stripe.com/docs/payments/payment-intents)—a single integration path for creating payments using any supported method—to accept [Sofort](https://www.sofort.com/) payments from customers. Check this [page](https://stripe.com/docs/payments/sofort) for more details.
type PaymentMethodConfigurationSofortParams struct {
	// Whether or not the payment method should be displayed.
	DisplayPreference *PaymentMethodConfigurationSofortDisplayPreferenceParams `form:"display_preference"`
}

// Whether or not the payment method should be displayed.
type PaymentMethodConfigurationUSBankAccountDisplayPreferenceParams struct {
	// The account's preference for whether or not to display this payment method.
	Preference *string `form:"preference"`
}

// Stripe users in the United States can accept ACH direct debit payments from customers with a US bank account using the Automated Clearing House (ACH) payments system operated by Nacha. Check this [page](https://stripe.com/docs/payments/ach-debit) for more details.
type PaymentMethodConfigurationUSBankAccountParams struct {
	// Whether or not the payment method should be displayed.
	DisplayPreference *PaymentMethodConfigurationUSBankAccountDisplayPreferenceParams `form:"display_preference"`
}

// Whether or not the payment method should be displayed.
type PaymentMethodConfigurationWeChatPayDisplayPreferenceParams struct {
	// The account's preference for whether or not to display this payment method.
	Preference *string `form:"preference"`
}

// WeChat, owned by Tencent, is China's leading mobile app with over 1 billion monthly active users. Chinese consumers can use WeChat Pay to pay for goods and services inside of businesses' apps and websites. WeChat Pay users buy most frequently in gaming, e-commerce, travel, online education, and food/nutrition. Check this [page](https://stripe.com/docs/payments/wechat-pay) for more details.
type PaymentMethodConfigurationWeChatPayParams struct {
	// Whether or not the payment method should be displayed.
	DisplayPreference *PaymentMethodConfigurationWeChatPayDisplayPreferenceParams `form:"display_preference"`
}

// Creates a payment method configuration
type PaymentMethodConfigurationParams struct {
	Params `form:"*"`
	// Canadian pre-authorized debit payments, check this [page](https://stripe.com/docs/payments/acss-debit) for more details like country availability.
	ACSSDebit *PaymentMethodConfigurationACSSDebitParams `form:"acss_debit"`
	// Whether the configuration can be used for new payments.
	Active *bool `form:"active"`
	// [Affirm](https://www.affirm.com/) gives your customers a way to split purchases over a series of payments. Depending on the purchase, they can pay with four interest-free payments (Split Pay) or pay over a longer term (Installments), which might include interest. Check this [page](https://stripe.com/docs/payments/affirm) for more details like country availability.
	Affirm *PaymentMethodConfigurationAffirmParams `form:"affirm"`
	// Afterpay gives your customers a way to pay for purchases in installments, check this [page](https://stripe.com/docs/payments/afterpay-clearpay) for more details like country availability. Afterpay is particularly popular among businesses selling fashion, beauty, and sports products.
	AfterpayClearpay *PaymentMethodConfigurationAfterpayClearpayParams `form:"afterpay_clearpay"`
	// Alipay is a digital wallet in China that has more than a billion active users worldwide. Alipay users can pay on the web or on a mobile device using login credentials or their Alipay app. Alipay has a low dispute rate and reduces fraud by authenticating payments using the customer's login credentials. Check this [page](https://stripe.com/docs/payments/alipay) for more details.
	Alipay *PaymentMethodConfigurationAlipayParams `form:"alipay"`
	// Stripe users can accept [Apple Pay](https://stripe.com/payments/apple-pay) in iOS applications in iOS 9 and later, and on the web in Safari starting with iOS 10 or macOS Sierra. There are no additional fees to process Apple Pay payments, and the [pricing](https://stripe.com/pricing) is the same as other card transactions. Check this [page](https://stripe.com/docs/apple-pay) for more details.
	ApplePay *PaymentMethodConfigurationApplePayParams `form:"apple_pay"`
	// Apple Pay Later, a payment method for customers to buy now and pay later, gives your customers a way to split purchases into four installments across six weeks.
	ApplePayLater *PaymentMethodConfigurationApplePayLaterParams `form:"apple_pay_later"`
	// Stripe users in Australia can accept Bulk Electronic Clearing System (BECS) direct debit payments from customers with an Australian bank account. Check this [page](https://stripe.com/docs/payments/au-becs-debit) for more details.
	AUBECSDebit *PaymentMethodConfigurationAUBECSDebitParams `form:"au_becs_debit"`
	// Stripe users in the UK can accept Bacs Direct Debit payments from customers with a UK bank account, check this [page](https://stripe.com/docs/payments/payment-methods/bacs-debit) for more details.
	BACSDebit *PaymentMethodConfigurationBACSDebitParams `form:"bacs_debit"`
	// Bancontact is the most popular online payment method in Belgium, with over 15 million cards in circulation. [Customers](https://stripe.com/docs/api/customers) use a Bancontact card or mobile app linked to a Belgian bank account to make online payments that are secure, guaranteed, and confirmed immediately. Check this [page](https://stripe.com/docs/payments/bancontact) for more details.
	Bancontact *PaymentMethodConfigurationBancontactParams `form:"bancontact"`
	// BLIK is a [single use](https://stripe.com/docs/payments/payment-methods#usage) payment method that requires customers to authenticate their payments. When customers want to pay online using BLIK, they request a six-digit code from their banking application and enter it into the payment collection form. Check this [page](https://stripe.com/docs/payments/blik) for more details.
	BLIK *PaymentMethodConfigurationBLIKParams `form:"blik"`
	// Boleto is an official (regulated by the Central Bank of Brazil) payment method in Brazil. Check this [page](https://stripe.com/docs/payments/boleto) for more details.
	Boleto *PaymentMethodConfigurationBoletoParams `form:"boleto"`
	// Cards are a popular way for consumers and businesses to pay online or in person. Stripe supports global and local card networks.
	Card *PaymentMethodConfigurationCardParams `form:"card"`
	// Cartes Bancaires is France's local card network. More than 95% of these cards are co-branded with either Visa or Mastercard, meaning you can process these cards over either Cartes Bancaires or the Visa or Mastercard networks. Check this [page](https://stripe.com/docs/payments/cartes-bancaires) for more details.
	CartesBancaires *PaymentMethodConfigurationCartesBancairesParams `form:"cartes_bancaires"`
	// Cash App is a popular consumer app in the US that allows customers to bank, invest, send, and receive money using their digital wallet. Check this [page](https://stripe.com/docs/payments/cash-app-pay) for more details.
	CashApp *PaymentMethodConfigurationCashAppParams `form:"cashapp"`
	// EPS is an Austria-based payment method that allows customers to complete transactions online using their bank credentials. EPS is supported by all Austrian banks and is accepted by over 80% of Austrian online retailers. Check this [page](https://stripe.com/docs/payments/eps) for more details.
	EPS *PaymentMethodConfigurationEPSParams `form:"eps"`
	// Specifies which fields in the response should be expanded.
	Expand []*string `form:"expand"`
	// Financial Process Exchange (FPX) is a Malaysia-based payment method that allows customers to complete transactions online using their bank credentials. Bank Negara Malaysia (BNM), the Central Bank of Malaysia, and eleven other major Malaysian financial institutions are members of the PayNet Group, which owns and operates FPX. It is one of the most popular online payment methods in Malaysia, with nearly 90 million transactions in 2018 according to BNM. Check this [page](https://stripe.com/docs/payments/fpx) for more details.
	FPX *PaymentMethodConfigurationFPXParams `form:"fpx"`
	// giropay is a German payment method based on online banking, introduced in 2006. It allows customers to complete transactions online using their online banking environment, with funds debited from their bank account. Depending on their bank, customers confirm payments on giropay using a second factor of authentication or a PIN. giropay accounts for 10% of online checkouts in Germany. Check this [page](https://stripe.com/docs/payments/giropay) for more details.
	Giropay *PaymentMethodConfigurationGiropayParams `form:"giropay"`
	// Google Pay allows customers to make payments in your app or website using any credit or debit card saved to their Google Account, including those from Google Play, YouTube, Chrome, or an Android device. Use the Google Pay API to request any credit or debit card stored in your customer's Google account. Check this [page](https://stripe.com/docs/google-pay) for more details.
	GooglePay *PaymentMethodConfigurationGooglePayParams `form:"google_pay"`
	// GrabPay is a payment method developed by [Grab](https://www.grab.com/sg/consumer/finance/pay/). GrabPay is a digital wallet - customers maintain a balance in their wallets that they pay out with. Check this [page](https://stripe.com/docs/payments/grabpay) for more details.
	Grabpay *PaymentMethodConfigurationGrabpayParams `form:"grabpay"`
	// iDEAL is a Netherlands-based payment method that allows customers to complete transactions online using their bank credentials. All major Dutch banks are members of Currence, the scheme that operates iDEAL, making it the most popular online payment method in the Netherlands with a share of online transactions close to 55%. Check this [page](https://stripe.com/docs/payments/ideal) for more details.
	IDEAL *PaymentMethodConfigurationIDEALParams `form:"ideal"`
	// JCB is a credit card company based in Japan. JCB is currently available in Japan to businesses approved by JCB, and available to all businesses in Australia, Canada, Hong Kong, Japan, New Zealand, Singapore, Switzerland, United Kingdom, United States, and all countries in the European Economic Area except Iceland. Check this [page](https://support.stripe.com/questions/accepting-japan-credit-bureau-%28jcb%29-payments) for more details.
	JCB *PaymentMethodConfigurationJCBParams `form:"jcb"`
	// Klarna gives customers a range of [payment options](https://stripe.com/docs/payments/klarna#payment-options) during checkout. Available payment options vary depending on the customer's billing address and the transaction amount. These payment options make it convenient for customers to purchase items in all price ranges. Check this [page](https://stripe.com/docs/payments/klarna) for more details.
	Klarna *PaymentMethodConfigurationKlarnaParams `form:"klarna"`
	// Konbini allows customers in Japan to pay for bills and online purchases at convenience stores with cash. Check this [page](https://stripe.com/docs/payments/konbini) for more details.
	Konbini *PaymentMethodConfigurationKonbiniParams `form:"konbini"`
	// [Link](https://stripe.com/docs/payments/link) is a payment method network. With Link, users save their payment details once, then reuse that information to pay with one click for any business on the network.
	Link *PaymentMethodConfigurationLinkParams `form:"link"`
	// Configuration name.
	Name *string `form:"name"`
	// OXXO is a Mexican chain of convenience stores with thousands of locations across Latin America and represents nearly 20% of online transactions in Mexico. OXXO allows customers to pay bills and online purchases in-store with cash. Check this [page](https://stripe.com/docs/payments/oxxo) for more details.
	OXXO *PaymentMethodConfigurationOXXOParams `form:"oxxo"`
	// Przelewy24 is a Poland-based payment method aggregator that allows customers to complete transactions online using bank transfers and other methods. Bank transfers account for 30% of online payments in Poland and Przelewy24 provides a way for customers to pay with over 165 banks. Check this [page](https://stripe.com/docs/payments/p24) for more details.
	P24 *PaymentMethodConfigurationP24Params `form:"p24"`
	// Configuration's parent configuration. Specify to create a child configuration.
	Parent *string `form:"parent"`
	// PayNow is a Singapore-based payment method that allows customers to make a payment using their preferred app from participating banks and participating non-bank financial institutions. Check this [page](https://stripe.com/docs/payments/paynow) for more details.
	PayNow *PaymentMethodConfigurationPayNowParams `form:"paynow"`
	// PayPal, a digital wallet popular with customers in Europe, allows your customers worldwide to pay using their PayPal account. Check this [page](https://stripe.com/docs/payments/paypal) for more details.
	Paypal *PaymentMethodConfigurationPaypalParams `form:"paypal"`
	// PromptPay is a Thailand-based payment method that allows customers to make a payment using their preferred app from participating banks. Check this [page](https://stripe.com/docs/payments/promptpay) for more details.
	PromptPay *PaymentMethodConfigurationPromptPayParams `form:"promptpay"`
	// The [Single Euro Payments Area (SEPA)](https://en.wikipedia.org/wiki/Single_Euro_Payments_Area) is an initiative of the European Union to simplify payments within and across member countries. SEPA established and enforced banking standards to allow for the direct debiting of every EUR-denominated bank account within the SEPA region, check this [page](https://stripe.com/docs/payments/sepa-debit) for more details.
	SEPADebit *PaymentMethodConfigurationSEPADebitParams `form:"sepa_debit"`
	// Stripe users in Europe and the United States can use the [Payment Intents API](https://stripe.com/docs/payments/payment-intents)—a single integration path for creating payments using any supported method—to accept [Sofort](https://www.sofort.com/) payments from customers. Check this [page](https://stripe.com/docs/payments/sofort) for more details.
	Sofort *PaymentMethodConfigurationSofortParams `form:"sofort"`
	// Stripe users in the United States can accept ACH direct debit payments from customers with a US bank account using the Automated Clearing House (ACH) payments system operated by Nacha. Check this [page](https://stripe.com/docs/payments/ach-debit) for more details.
	USBankAccount *PaymentMethodConfigurationUSBankAccountParams `form:"us_bank_account"`
	// WeChat, owned by Tencent, is China's leading mobile app with over 1 billion monthly active users. Chinese consumers can use WeChat Pay to pay for goods and services inside of businesses' apps and websites. WeChat Pay users buy most frequently in gaming, e-commerce, travel, online education, and food/nutrition. Check this [page](https://stripe.com/docs/payments/wechat-pay) for more details.
	WeChatPay *PaymentMethodConfigurationWeChatPayParams `form:"wechat_pay"`
}

// AddExpand appends a new field to expand.
func (p *PaymentMethodConfigurationParams) AddExpand(f string) {
	p.Expand = append(p.Expand, &f)
}

type PaymentMethodConfigurationACSSDebitDisplayPreference struct {
	// For child configs, whether or not the account's preference will be observed. If `false`, the parent configuration's default is used.
	Overridable bool `json:"overridable"`
	// The account's display preference.
	Preference PaymentMethodConfigurationACSSDebitDisplayPreferencePreference `json:"preference"`
	// The effective display preference value.
	Value PaymentMethodConfigurationACSSDebitDisplayPreferenceValue `json:"value"`
}
type PaymentMethodConfigurationACSSDebit struct {
	// Whether this payment method may be offered at checkout. True if `display_preference` is `on` and the payment method's capability is active.
	Available         bool                                                  `json:"available"`
	DisplayPreference *PaymentMethodConfigurationACSSDebitDisplayPreference `json:"display_preference"`
}
type PaymentMethodConfigurationAffirmDisplayPreference struct {
	// For child configs, whether or not the account's preference will be observed. If `false`, the parent configuration's default is used.
	Overridable bool `json:"overridable"`
	// The account's display preference.
	Preference PaymentMethodConfigurationAffirmDisplayPreferencePreference `json:"preference"`
	// The effective display preference value.
	Value PaymentMethodConfigurationAffirmDisplayPreferenceValue `json:"value"`
}
type PaymentMethodConfigurationAffirm struct {
	// Whether this payment method may be offered at checkout. True if `display_preference` is `on` and the payment method's capability is active.
	Available         bool                                               `json:"available"`
	DisplayPreference *PaymentMethodConfigurationAffirmDisplayPreference `json:"display_preference"`
}
type PaymentMethodConfigurationAfterpayClearpayDisplayPreference struct {
	// For child configs, whether or not the account's preference will be observed. If `false`, the parent configuration's default is used.
	Overridable bool `json:"overridable"`
	// The account's display preference.
	Preference PaymentMethodConfigurationAfterpayClearpayDisplayPreferencePreference `json:"preference"`
	// The effective display preference value.
	Value PaymentMethodConfigurationAfterpayClearpayDisplayPreferenceValue `json:"value"`
}
type PaymentMethodConfigurationAfterpayClearpay struct {
	// Whether this payment method may be offered at checkout. True if `display_preference` is `on` and the payment method's capability is active.
	Available         bool                                                         `json:"available"`
	DisplayPreference *PaymentMethodConfigurationAfterpayClearpayDisplayPreference `json:"display_preference"`
}
type PaymentMethodConfigurationAlipayDisplayPreference struct {
	// For child configs, whether or not the account's preference will be observed. If `false`, the parent configuration's default is used.
	Overridable bool `json:"overridable"`
	// The account's display preference.
	Preference PaymentMethodConfigurationAlipayDisplayPreferencePreference `json:"preference"`
	// The effective display preference value.
	Value PaymentMethodConfigurationAlipayDisplayPreferenceValue `json:"value"`
}
type PaymentMethodConfigurationAlipay struct {
	// Whether this payment method may be offered at checkout. True if `display_preference` is `on` and the payment method's capability is active.
	Available         bool                                               `json:"available"`
	DisplayPreference *PaymentMethodConfigurationAlipayDisplayPreference `json:"display_preference"`
}
type PaymentMethodConfigurationApplePayDisplayPreference struct {
	// For child configs, whether or not the account's preference will be observed. If `false`, the parent configuration's default is used.
	Overridable bool `json:"overridable"`
	// The account's display preference.
	Preference PaymentMethodConfigurationApplePayDisplayPreferencePreference `json:"preference"`
	// The effective display preference value.
	Value PaymentMethodConfigurationApplePayDisplayPreferenceValue `json:"value"`
}
type PaymentMethodConfigurationApplePay struct {
	// Whether this payment method may be offered at checkout. True if `display_preference` is `on` and the payment method's capability is active.
	Available         bool                                                 `json:"available"`
	DisplayPreference *PaymentMethodConfigurationApplePayDisplayPreference `json:"display_preference"`
}
type PaymentMethodConfigurationAUBECSDebitDisplayPreference struct {
	// For child configs, whether or not the account's preference will be observed. If `false`, the parent configuration's default is used.
	Overridable bool `json:"overridable"`
	// The account's display preference.
	Preference PaymentMethodConfigurationAUBECSDebitDisplayPreferencePreference `json:"preference"`
	// The effective display preference value.
	Value PaymentMethodConfigurationAUBECSDebitDisplayPreferenceValue `json:"value"`
}
type PaymentMethodConfigurationAUBECSDebit struct {
	// Whether this payment method may be offered at checkout. True if `display_preference` is `on` and the payment method's capability is active.
	Available         bool                                                    `json:"available"`
	DisplayPreference *PaymentMethodConfigurationAUBECSDebitDisplayPreference `json:"display_preference"`
}
type PaymentMethodConfigurationBACSDebitDisplayPreference struct {
	// For child configs, whether or not the account's preference will be observed. If `false`, the parent configuration's default is used.
	Overridable bool `json:"overridable"`
	// The account's display preference.
	Preference PaymentMethodConfigurationBACSDebitDisplayPreferencePreference `json:"preference"`
	// The effective display preference value.
	Value PaymentMethodConfigurationBACSDebitDisplayPreferenceValue `json:"value"`
}
type PaymentMethodConfigurationBACSDebit struct {
	// Whether this payment method may be offered at checkout. True if `display_preference` is `on` and the payment method's capability is active.
	Available         bool                                                  `json:"available"`
	DisplayPreference *PaymentMethodConfigurationBACSDebitDisplayPreference `json:"display_preference"`
}
type PaymentMethodConfigurationBancontactDisplayPreference struct {
	// For child configs, whether or not the account's preference will be observed. If `false`, the parent configuration's default is used.
	Overridable bool `json:"overridable"`
	// The account's display preference.
	Preference PaymentMethodConfigurationBancontactDisplayPreferencePreference `json:"preference"`
	// The effective display preference value.
	Value PaymentMethodConfigurationBancontactDisplayPreferenceValue `json:"value"`
}
type PaymentMethodConfigurationBancontact struct {
	// Whether this payment method may be offered at checkout. True if `display_preference` is `on` and the payment method's capability is active.
	Available         bool                                                   `json:"available"`
	DisplayPreference *PaymentMethodConfigurationBancontactDisplayPreference `json:"display_preference"`
}
type PaymentMethodConfigurationBLIKDisplayPreference struct {
	// For child configs, whether or not the account's preference will be observed. If `false`, the parent configuration's default is used.
	Overridable bool `json:"overridable"`
	// The account's display preference.
	Preference PaymentMethodConfigurationBLIKDisplayPreferencePreference `json:"preference"`
	// The effective display preference value.
	Value PaymentMethodConfigurationBLIKDisplayPreferenceValue `json:"value"`
}
type PaymentMethodConfigurationBLIK struct {
	// Whether this payment method may be offered at checkout. True if `display_preference` is `on` and the payment method's capability is active.
	Available         bool                                             `json:"available"`
	DisplayPreference *PaymentMethodConfigurationBLIKDisplayPreference `json:"display_preference"`
}
type PaymentMethodConfigurationBoletoDisplayPreference struct {
	// For child configs, whether or not the account's preference will be observed. If `false`, the parent configuration's default is used.
	Overridable bool `json:"overridable"`
	// The account's display preference.
	Preference PaymentMethodConfigurationBoletoDisplayPreferencePreference `json:"preference"`
	// The effective display preference value.
	Value PaymentMethodConfigurationBoletoDisplayPreferenceValue `json:"value"`
}
type PaymentMethodConfigurationBoleto struct {
	// Whether this payment method may be offered at checkout. True if `display_preference` is `on` and the payment method's capability is active.
	Available         bool                                               `json:"available"`
	DisplayPreference *PaymentMethodConfigurationBoletoDisplayPreference `json:"display_preference"`
}
type PaymentMethodConfigurationCardDisplayPreference struct {
	// For child configs, whether or not the account's preference will be observed. If `false`, the parent configuration's default is used.
	Overridable bool `json:"overridable"`
	// The account's display preference.
	Preference PaymentMethodConfigurationCardDisplayPreferencePreference `json:"preference"`
	// The effective display preference value.
	Value PaymentMethodConfigurationCardDisplayPreferenceValue `json:"value"`
}
type PaymentMethodConfigurationCard struct {
	// Whether this payment method may be offered at checkout. True if `display_preference` is `on` and the payment method's capability is active.
	Available         bool                                             `json:"available"`
	DisplayPreference *PaymentMethodConfigurationCardDisplayPreference `json:"display_preference"`
}
type PaymentMethodConfigurationCartesBancairesDisplayPreference struct {
	// For child configs, whether or not the account's preference will be observed. If `false`, the parent configuration's default is used.
	Overridable bool `json:"overridable"`
	// The account's display preference.
	Preference PaymentMethodConfigurationCartesBancairesDisplayPreferencePreference `json:"preference"`
	// The effective display preference value.
	Value PaymentMethodConfigurationCartesBancairesDisplayPreferenceValue `json:"value"`
}
type PaymentMethodConfigurationCartesBancaires struct {
	// Whether this payment method may be offered at checkout. True if `display_preference` is `on` and the payment method's capability is active.
	Available         bool                                                        `json:"available"`
	DisplayPreference *PaymentMethodConfigurationCartesBancairesDisplayPreference `json:"display_preference"`
}
type PaymentMethodConfigurationCashAppDisplayPreference struct {
	// For child configs, whether or not the account's preference will be observed. If `false`, the parent configuration's default is used.
	Overridable bool `json:"overridable"`
	// The account's display preference.
	Preference PaymentMethodConfigurationCashAppDisplayPreferencePreference `json:"preference"`
	// The effective display preference value.
	Value PaymentMethodConfigurationCashAppDisplayPreferenceValue `json:"value"`
}
type PaymentMethodConfigurationCashApp struct {
	// Whether this payment method may be offered at checkout. True if `display_preference` is `on` and the payment method's capability is active.
	Available         bool                                                `json:"available"`
	DisplayPreference *PaymentMethodConfigurationCashAppDisplayPreference `json:"display_preference"`
}
type PaymentMethodConfigurationEPSDisplayPreference struct {
	// For child configs, whether or not the account's preference will be observed. If `false`, the parent configuration's default is used.
	Overridable bool `json:"overridable"`
	// The account's display preference.
	Preference PaymentMethodConfigurationEPSDisplayPreferencePreference `json:"preference"`
	// The effective display preference value.
	Value PaymentMethodConfigurationEPSDisplayPreferenceValue `json:"value"`
}
type PaymentMethodConfigurationEPS struct {
	// Whether this payment method may be offered at checkout. True if `display_preference` is `on` and the payment method's capability is active.
	Available         bool                                            `json:"available"`
	DisplayPreference *PaymentMethodConfigurationEPSDisplayPreference `json:"display_preference"`
}
type PaymentMethodConfigurationFPXDisplayPreference struct {
	// For child configs, whether or not the account's preference will be observed. If `false`, the parent configuration's default is used.
	Overridable bool `json:"overridable"`
	// The account's display preference.
	Preference PaymentMethodConfigurationFPXDisplayPreferencePreference `json:"preference"`
	// The effective display preference value.
	Value PaymentMethodConfigurationFPXDisplayPreferenceValue `json:"value"`
}
type PaymentMethodConfigurationFPX struct {
	// Whether this payment method may be offered at checkout. True if `display_preference` is `on` and the payment method's capability is active.
	Available         bool                                            `json:"available"`
	DisplayPreference *PaymentMethodConfigurationFPXDisplayPreference `json:"display_preference"`
}
type PaymentMethodConfigurationGiropayDisplayPreference struct {
	// For child configs, whether or not the account's preference will be observed. If `false`, the parent configuration's default is used.
	Overridable bool `json:"overridable"`
	// The account's display preference.
	Preference PaymentMethodConfigurationGiropayDisplayPreferencePreference `json:"preference"`
	// The effective display preference value.
	Value PaymentMethodConfigurationGiropayDisplayPreferenceValue `json:"value"`
}
type PaymentMethodConfigurationGiropay struct {
	// Whether this payment method may be offered at checkout. True if `display_preference` is `on` and the payment method's capability is active.
	Available         bool                                                `json:"available"`
	DisplayPreference *PaymentMethodConfigurationGiropayDisplayPreference `json:"display_preference"`
}
type PaymentMethodConfigurationGooglePayDisplayPreference struct {
	// For child configs, whether or not the account's preference will be observed. If `false`, the parent configuration's default is used.
	Overridable bool `json:"overridable"`
	// The account's display preference.
	Preference PaymentMethodConfigurationGooglePayDisplayPreferencePreference `json:"preference"`
	// The effective display preference value.
	Value PaymentMethodConfigurationGooglePayDisplayPreferenceValue `json:"value"`
}
type PaymentMethodConfigurationGooglePay struct {
	// Whether this payment method may be offered at checkout. True if `display_preference` is `on` and the payment method's capability is active.
	Available         bool                                                  `json:"available"`
	DisplayPreference *PaymentMethodConfigurationGooglePayDisplayPreference `json:"display_preference"`
}
type PaymentMethodConfigurationGrabpayDisplayPreference struct {
	// For child configs, whether or not the account's preference will be observed. If `false`, the parent configuration's default is used.
	Overridable bool `json:"overridable"`
	// The account's display preference.
	Preference PaymentMethodConfigurationGrabpayDisplayPreferencePreference `json:"preference"`
	// The effective display preference value.
	Value PaymentMethodConfigurationGrabpayDisplayPreferenceValue `json:"value"`
}
type PaymentMethodConfigurationGrabpay struct {
	// Whether this payment method may be offered at checkout. True if `display_preference` is `on` and the payment method's capability is active.
	Available         bool                                                `json:"available"`
	DisplayPreference *PaymentMethodConfigurationGrabpayDisplayPreference `json:"display_preference"`
}
type PaymentMethodConfigurationIDBankTransferDisplayPreference struct {
	// For child configs, whether or not the account's preference will be observed. If `false`, the parent configuration's default is used.
	Overridable bool `json:"overridable"`
	// The account's display preference.
	Preference PaymentMethodConfigurationIDBankTransferDisplayPreferencePreference `json:"preference"`
	// The effective display preference value.
	Value PaymentMethodConfigurationIDBankTransferDisplayPreferenceValue `json:"value"`
}
type PaymentMethodConfigurationIDBankTransfer struct {
	// Whether this payment method may be offered at checkout. True if `display_preference` is `on` and the payment method's capability is active.
	Available         bool                                                       `json:"available"`
	DisplayPreference *PaymentMethodConfigurationIDBankTransferDisplayPreference `json:"display_preference"`
}
type PaymentMethodConfigurationIDEALDisplayPreference struct {
	// For child configs, whether or not the account's preference will be observed. If `false`, the parent configuration's default is used.
	Overridable bool `json:"overridable"`
	// The account's display preference.
	Preference PaymentMethodConfigurationIDEALDisplayPreferencePreference `json:"preference"`
	// The effective display preference value.
	Value PaymentMethodConfigurationIDEALDisplayPreferenceValue `json:"value"`
}
type PaymentMethodConfigurationIDEAL struct {
	// Whether this payment method may be offered at checkout. True if `display_preference` is `on` and the payment method's capability is active.
	Available         bool                                              `json:"available"`
	DisplayPreference *PaymentMethodConfigurationIDEALDisplayPreference `json:"display_preference"`
}
type PaymentMethodConfigurationJCBDisplayPreference struct {
	// For child configs, whether or not the account's preference will be observed. If `false`, the parent configuration's default is used.
	Overridable bool `json:"overridable"`
	// The account's display preference.
	Preference PaymentMethodConfigurationJCBDisplayPreferencePreference `json:"preference"`
	// The effective display preference value.
	Value PaymentMethodConfigurationJCBDisplayPreferenceValue `json:"value"`
}
type PaymentMethodConfigurationJCB struct {
	// Whether this payment method may be offered at checkout. True if `display_preference` is `on` and the payment method's capability is active.
	Available         bool                                            `json:"available"`
	DisplayPreference *PaymentMethodConfigurationJCBDisplayPreference `json:"display_preference"`
}
type PaymentMethodConfigurationKlarnaDisplayPreference struct {
	// For child configs, whether or not the account's preference will be observed. If `false`, the parent configuration's default is used.
	Overridable bool `json:"overridable"`
	// The account's display preference.
	Preference PaymentMethodConfigurationKlarnaDisplayPreferencePreference `json:"preference"`
	// The effective display preference value.
	Value PaymentMethodConfigurationKlarnaDisplayPreferenceValue `json:"value"`
}
type PaymentMethodConfigurationKlarna struct {
	// Whether this payment method may be offered at checkout. True if `display_preference` is `on` and the payment method's capability is active.
	Available         bool                                               `json:"available"`
	DisplayPreference *PaymentMethodConfigurationKlarnaDisplayPreference `json:"display_preference"`
}
type PaymentMethodConfigurationKonbiniDisplayPreference struct {
	// For child configs, whether or not the account's preference will be observed. If `false`, the parent configuration's default is used.
	Overridable bool `json:"overridable"`
	// The account's display preference.
	Preference PaymentMethodConfigurationKonbiniDisplayPreferencePreference `json:"preference"`
	// The effective display preference value.
	Value PaymentMethodConfigurationKonbiniDisplayPreferenceValue `json:"value"`
}
type PaymentMethodConfigurationKonbini struct {
	// Whether this payment method may be offered at checkout. True if `display_preference` is `on` and the payment method's capability is active.
	Available         bool                                                `json:"available"`
	DisplayPreference *PaymentMethodConfigurationKonbiniDisplayPreference `json:"display_preference"`
}
type PaymentMethodConfigurationLinkDisplayPreference struct {
	// For child configs, whether or not the account's preference will be observed. If `false`, the parent configuration's default is used.
	Overridable bool `json:"overridable"`
	// The account's display preference.
	Preference PaymentMethodConfigurationLinkDisplayPreferencePreference `json:"preference"`
	// The effective display preference value.
	Value PaymentMethodConfigurationLinkDisplayPreferenceValue `json:"value"`
}
type PaymentMethodConfigurationLink struct {
	// Whether this payment method may be offered at checkout. True if `display_preference` is `on` and the payment method's capability is active.
	Available         bool                                             `json:"available"`
	DisplayPreference *PaymentMethodConfigurationLinkDisplayPreference `json:"display_preference"`
}
type PaymentMethodConfigurationMultibancoDisplayPreference struct {
	// For child configs, whether or not the account's preference will be observed. If `false`, the parent configuration's default is used.
	Overridable bool `json:"overridable"`
	// The account's display preference.
	Preference PaymentMethodConfigurationMultibancoDisplayPreferencePreference `json:"preference"`
	// The effective display preference value.
	Value PaymentMethodConfigurationMultibancoDisplayPreferenceValue `json:"value"`
}
type PaymentMethodConfigurationMultibanco struct {
	// Whether this payment method may be offered at checkout. True if `display_preference` is `on` and the payment method's capability is active.
	Available         bool                                                   `json:"available"`
	DisplayPreference *PaymentMethodConfigurationMultibancoDisplayPreference `json:"display_preference"`
}
type PaymentMethodConfigurationNetbankingDisplayPreference struct {
	// For child configs, whether or not the account's preference will be observed. If `false`, the parent configuration's default is used.
	Overridable bool `json:"overridable"`
	// The account's display preference.
	Preference PaymentMethodConfigurationNetbankingDisplayPreferencePreference `json:"preference"`
	// The effective display preference value.
	Value PaymentMethodConfigurationNetbankingDisplayPreferenceValue `json:"value"`
}
type PaymentMethodConfigurationNetbanking struct {
	// Whether this payment method may be offered at checkout. True if `display_preference` is `on` and the payment method's capability is active.
	Available         bool                                                   `json:"available"`
	DisplayPreference *PaymentMethodConfigurationNetbankingDisplayPreference `json:"display_preference"`
}
type PaymentMethodConfigurationOXXODisplayPreference struct {
	// For child configs, whether or not the account's preference will be observed. If `false`, the parent configuration's default is used.
	Overridable bool `json:"overridable"`
	// The account's display preference.
	Preference PaymentMethodConfigurationOXXODisplayPreferencePreference `json:"preference"`
	// The effective display preference value.
	Value PaymentMethodConfigurationOXXODisplayPreferenceValue `json:"value"`
}
type PaymentMethodConfigurationOXXO struct {
	// Whether this payment method may be offered at checkout. True if `display_preference` is `on` and the payment method's capability is active.
	Available         bool                                             `json:"available"`
	DisplayPreference *PaymentMethodConfigurationOXXODisplayPreference `json:"display_preference"`
}
type PaymentMethodConfigurationP24DisplayPreference struct {
	// For child configs, whether or not the account's preference will be observed. If `false`, the parent configuration's default is used.
	Overridable bool `json:"overridable"`
	// The account's display preference.
	Preference PaymentMethodConfigurationP24DisplayPreferencePreference `json:"preference"`
	// The effective display preference value.
	Value PaymentMethodConfigurationP24DisplayPreferenceValue `json:"value"`
}
type PaymentMethodConfigurationP24 struct {
	// Whether this payment method may be offered at checkout. True if `display_preference` is `on` and the payment method's capability is active.
	Available         bool                                            `json:"available"`
	DisplayPreference *PaymentMethodConfigurationP24DisplayPreference `json:"display_preference"`
}
type PaymentMethodConfigurationPayByBankDisplayPreference struct {
	// For child configs, whether or not the account's preference will be observed. If `false`, the parent configuration's default is used.
	Overridable bool `json:"overridable"`
	// The account's display preference.
	Preference PaymentMethodConfigurationPayByBankDisplayPreferencePreference `json:"preference"`
	// The effective display preference value.
	Value PaymentMethodConfigurationPayByBankDisplayPreferenceValue `json:"value"`
}
type PaymentMethodConfigurationPayByBank struct {
	// Whether this payment method may be offered at checkout. True if `display_preference` is `on` and the payment method's capability is active.
	Available         bool                                                  `json:"available"`
	DisplayPreference *PaymentMethodConfigurationPayByBankDisplayPreference `json:"display_preference"`
}
type PaymentMethodConfigurationPayNowDisplayPreference struct {
	// For child configs, whether or not the account's preference will be observed. If `false`, the parent configuration's default is used.
	Overridable bool `json:"overridable"`
	// The account's display preference.
	Preference PaymentMethodConfigurationPayNowDisplayPreferencePreference `json:"preference"`
	// The effective display preference value.
	Value PaymentMethodConfigurationPayNowDisplayPreferenceValue `json:"value"`
}
type PaymentMethodConfigurationPayNow struct {
	// Whether this payment method may be offered at checkout. True if `display_preference` is `on` and the payment method's capability is active.
	Available         bool                                               `json:"available"`
	DisplayPreference *PaymentMethodConfigurationPayNowDisplayPreference `json:"display_preference"`
}
type PaymentMethodConfigurationPaypalDisplayPreference struct {
	// For child configs, whether or not the account's preference will be observed. If `false`, the parent configuration's default is used.
	Overridable bool `json:"overridable"`
	// The account's display preference.
	Preference PaymentMethodConfigurationPaypalDisplayPreferencePreference `json:"preference"`
	// The effective display preference value.
	Value PaymentMethodConfigurationPaypalDisplayPreferenceValue `json:"value"`
}
type PaymentMethodConfigurationPaypal struct {
	// Whether this payment method may be offered at checkout. True if `display_preference` is `on` and the payment method's capability is active.
	Available         bool                                               `json:"available"`
	DisplayPreference *PaymentMethodConfigurationPaypalDisplayPreference `json:"display_preference"`
}
type PaymentMethodConfigurationPromptPayDisplayPreference struct {
	// For child configs, whether or not the account's preference will be observed. If `false`, the parent configuration's default is used.
	Overridable bool `json:"overridable"`
	// The account's display preference.
	Preference PaymentMethodConfigurationPromptPayDisplayPreferencePreference `json:"preference"`
	// The effective display preference value.
	Value PaymentMethodConfigurationPromptPayDisplayPreferenceValue `json:"value"`
}
type PaymentMethodConfigurationPromptPay struct {
	// Whether this payment method may be offered at checkout. True if `display_preference` is `on` and the payment method's capability is active.
	Available         bool                                                  `json:"available"`
	DisplayPreference *PaymentMethodConfigurationPromptPayDisplayPreference `json:"display_preference"`
}
type PaymentMethodConfigurationSEPADebitDisplayPreference struct {
	// For child configs, whether or not the account's preference will be observed. If `false`, the parent configuration's default is used.
	Overridable bool `json:"overridable"`
	// The account's display preference.
	Preference PaymentMethodConfigurationSEPADebitDisplayPreferencePreference `json:"preference"`
	// The effective display preference value.
	Value PaymentMethodConfigurationSEPADebitDisplayPreferenceValue `json:"value"`
}
type PaymentMethodConfigurationSEPADebit struct {
	// Whether this payment method may be offered at checkout. True if `display_preference` is `on` and the payment method's capability is active.
	Available         bool                                                  `json:"available"`
	DisplayPreference *PaymentMethodConfigurationSEPADebitDisplayPreference `json:"display_preference"`
}
type PaymentMethodConfigurationSofortDisplayPreference struct {
	// For child configs, whether or not the account's preference will be observed. If `false`, the parent configuration's default is used.
	Overridable bool `json:"overridable"`
	// The account's display preference.
	Preference PaymentMethodConfigurationSofortDisplayPreferencePreference `json:"preference"`
	// The effective display preference value.
	Value PaymentMethodConfigurationSofortDisplayPreferenceValue `json:"value"`
}
type PaymentMethodConfigurationSofort struct {
	// Whether this payment method may be offered at checkout. True if `display_preference` is `on` and the payment method's capability is active.
	Available         bool                                               `json:"available"`
	DisplayPreference *PaymentMethodConfigurationSofortDisplayPreference `json:"display_preference"`
}
type PaymentMethodConfigurationUpiDisplayPreference struct {
	// For child configs, whether or not the account's preference will be observed. If `false`, the parent configuration's default is used.
	Overridable bool `json:"overridable"`
	// The account's display preference.
	Preference PaymentMethodConfigurationUpiDisplayPreferencePreference `json:"preference"`
	// The effective display preference value.
	Value PaymentMethodConfigurationUpiDisplayPreferenceValue `json:"value"`
}
type PaymentMethodConfigurationUpi struct {
	// Whether this payment method may be offered at checkout. True if `display_preference` is `on` and the payment method's capability is active.
	Available         bool                                            `json:"available"`
	DisplayPreference *PaymentMethodConfigurationUpiDisplayPreference `json:"display_preference"`
}
type PaymentMethodConfigurationUSBankAccountDisplayPreference struct {
	// For child configs, whether or not the account's preference will be observed. If `false`, the parent configuration's default is used.
	Overridable bool `json:"overridable"`
	// The account's display preference.
	Preference PaymentMethodConfigurationUSBankAccountDisplayPreferencePreference `json:"preference"`
	// The effective display preference value.
	Value PaymentMethodConfigurationUSBankAccountDisplayPreferenceValue `json:"value"`
}
type PaymentMethodConfigurationUSBankAccount struct {
	// Whether this payment method may be offered at checkout. True if `display_preference` is `on` and the payment method's capability is active.
	Available         bool                                                      `json:"available"`
	DisplayPreference *PaymentMethodConfigurationUSBankAccountDisplayPreference `json:"display_preference"`
}
type PaymentMethodConfigurationWeChatPayDisplayPreference struct {
	// For child configs, whether or not the account's preference will be observed. If `false`, the parent configuration's default is used.
	Overridable bool `json:"overridable"`
	// The account's display preference.
	Preference PaymentMethodConfigurationWeChatPayDisplayPreferencePreference `json:"preference"`
	// The effective display preference value.
	Value PaymentMethodConfigurationWeChatPayDisplayPreferenceValue `json:"value"`
}
type PaymentMethodConfigurationWeChatPay struct {
	// Whether this payment method may be offered at checkout. True if `display_preference` is `on` and the payment method's capability is active.
	Available         bool                                                  `json:"available"`
	DisplayPreference *PaymentMethodConfigurationWeChatPayDisplayPreference `json:"display_preference"`
}

// PaymentMethodConfigurations control which payment methods are displayed to your customers when you don't explicitly specify payment method types. You can have multiple configurations with different sets of payment methods for different scenarios.
//
// There are two types of PaymentMethodConfigurations. Which is used depends on the [charge type](https://stripe.com/docs/connect/charges):
//
// **Direct** configurations apply to payments created on your account, including Connect destination charges, Connect separate charges and transfers, and payments not involving Connect.
//
// **Child** configurations apply to payments created on your connected accounts using direct charges, and charges with the on_behalf_of parameter.
//
// Child configurations have a `parent` that sets default values and controls which settings connected accounts may override. You can specify a parent ID at payment time, and Stripe will automatically resolve the connected account's associated child configuration. Parent configurations are [managed in the dashboard](https://dashboard.stripe.com/settings/payment_methods/connected_accounts) and are not available in this API.
//
// Related guides:
// - [Payment Method Configurations API](https://stripe.com/docs/connect/payment-method-configurations)
// - [Multiple payment method configurations on dynamic payment methods](https://stripe.com/docs/payments/multiple-payment-method-configs)
// - [Multiple configurations for your Connect accounts](https://stripe.com/docs/connect/multiple-payment-method-configurations)
type PaymentMethodConfiguration struct {
	APIResource
	ACSSDebit *PaymentMethodConfigurationACSSDebit `json:"acss_debit"`
	// Whether the configuration can be used for new payments.
	Active           bool                                        `json:"active"`
	Affirm           *PaymentMethodConfigurationAffirm           `json:"affirm"`
	AfterpayClearpay *PaymentMethodConfigurationAfterpayClearpay `json:"afterpay_clearpay"`
	Alipay           *PaymentMethodConfigurationAlipay           `json:"alipay"`
	ApplePay         *PaymentMethodConfigurationApplePay         `json:"apple_pay"`
	// For child configs, the Connect application associated with the configuration.
	Application     string                                     `json:"application"`
	AUBECSDebit     *PaymentMethodConfigurationAUBECSDebit     `json:"au_becs_debit"`
	BACSDebit       *PaymentMethodConfigurationBACSDebit       `json:"bacs_debit"`
	Bancontact      *PaymentMethodConfigurationBancontact      `json:"bancontact"`
	BLIK            *PaymentMethodConfigurationBLIK            `json:"blik"`
	Boleto          *PaymentMethodConfigurationBoleto          `json:"boleto"`
	Card            *PaymentMethodConfigurationCard            `json:"card"`
	CartesBancaires *PaymentMethodConfigurationCartesBancaires `json:"cartes_bancaires"`
	CashApp         *PaymentMethodConfigurationCashApp         `json:"cashapp"`
	EPS             *PaymentMethodConfigurationEPS             `json:"eps"`
	FPX             *PaymentMethodConfigurationFPX             `json:"fpx"`
	Giropay         *PaymentMethodConfigurationGiropay         `json:"giropay"`
	GooglePay       *PaymentMethodConfigurationGooglePay       `json:"google_pay"`
	Grabpay         *PaymentMethodConfigurationGrabpay         `json:"grabpay"`
	// Unique identifier for the object.
	ID             string                                    `json:"id"`
	IDBankTransfer *PaymentMethodConfigurationIDBankTransfer `json:"id_bank_transfer"`
	IDEAL          *PaymentMethodConfigurationIDEAL          `json:"ideal"`
	// The default configuration is used whenever a payment method configuration is not specified.
	IsDefault bool                               `json:"is_default"`
	JCB       *PaymentMethodConfigurationJCB     `json:"jcb"`
	Klarna    *PaymentMethodConfigurationKlarna  `json:"klarna"`
	Konbini   *PaymentMethodConfigurationKonbini `json:"konbini"`
	Link      *PaymentMethodConfigurationLink    `json:"link"`
	// Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
	Livemode   bool                                  `json:"livemode"`
	Multibanco *PaymentMethodConfigurationMultibanco `json:"multibanco"`
	// The configuration's name.
	Name       string                                `json:"name"`
	Netbanking *PaymentMethodConfigurationNetbanking `json:"netbanking"`
	// String representing the object's type. Objects of the same type share the same value.
	Object string                          `json:"object"`
	OXXO   *PaymentMethodConfigurationOXXO `json:"oxxo"`
	P24    *PaymentMethodConfigurationP24  `json:"p24"`
	// For child configs, the configuration's parent configuration.
	Parent        string                                   `json:"parent"`
	PayByBank     *PaymentMethodConfigurationPayByBank     `json:"pay_by_bank"`
	PayNow        *PaymentMethodConfigurationPayNow        `json:"paynow"`
	Paypal        *PaymentMethodConfigurationPaypal        `json:"paypal"`
	PromptPay     *PaymentMethodConfigurationPromptPay     `json:"promptpay"`
	SEPADebit     *PaymentMethodConfigurationSEPADebit     `json:"sepa_debit"`
	Sofort        *PaymentMethodConfigurationSofort        `json:"sofort"`
	Upi           *PaymentMethodConfigurationUpi           `json:"upi"`
	USBankAccount *PaymentMethodConfigurationUSBankAccount `json:"us_bank_account"`
	WeChatPay     *PaymentMethodConfigurationWeChatPay     `json:"wechat_pay"`
}

// PaymentMethodConfigurationList is a list of PaymentMethodConfigurations as retrieved from a list endpoint.
type PaymentMethodConfigurationList struct {
	APIResource
	ListMeta
	Data []*PaymentMethodConfiguration `json:"data"`
}
