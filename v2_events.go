package stripe

// V2Events: The beginning of the section generated from our OpenAPI spec
import (
	"context"
	"encoding/json"
	"net/http"
	"time"
)

// Open Enum.
type V1BillingMeterErrorReportTriggeredEventDataReasonErrorTypeCode string

// List of values that V1BillingMeterErrorReportTriggeredEventDataReasonErrorTypeCode can take
const (
	V1BillingMeterErrorReportTriggeredEventDataReasonErrorTypeCodeArchivedMeter                   V1BillingMeterErrorReportTriggeredEventDataReasonErrorTypeCode = "archived_meter"
	V1BillingMeterErrorReportTriggeredEventDataReasonErrorTypeCodeMeterEventCustomerNotFound      V1BillingMeterErrorReportTriggeredEventDataReasonErrorTypeCode = "meter_event_customer_not_found"
	V1BillingMeterErrorReportTriggeredEventDataReasonErrorTypeCodeMeterEventDimensionCountTooHigh V1BillingMeterErrorReportTriggeredEventDataReasonErrorTypeCode = "meter_event_dimension_count_too_high"
	V1BillingMeterErrorReportTriggeredEventDataReasonErrorTypeCodeMeterEventInvalidValue          V1BillingMeterErrorReportTriggeredEventDataReasonErrorTypeCode = "meter_event_invalid_value"
	V1BillingMeterErrorReportTriggeredEventDataReasonErrorTypeCodeMeterEventNoCustomerDefined     V1BillingMeterErrorReportTriggeredEventDataReasonErrorTypeCode = "meter_event_no_customer_defined"
	V1BillingMeterErrorReportTriggeredEventDataReasonErrorTypeCodeMissingDimensionPayloadKeys     V1BillingMeterErrorReportTriggeredEventDataReasonErrorTypeCode = "missing_dimension_payload_keys"
	V1BillingMeterErrorReportTriggeredEventDataReasonErrorTypeCodeNoMeter                         V1BillingMeterErrorReportTriggeredEventDataReasonErrorTypeCode = "no_meter"
	V1BillingMeterErrorReportTriggeredEventDataReasonErrorTypeCodeTimestampInFuture               V1BillingMeterErrorReportTriggeredEventDataReasonErrorTypeCode = "timestamp_in_future"
	V1BillingMeterErrorReportTriggeredEventDataReasonErrorTypeCodeTimestampTooFarInPast           V1BillingMeterErrorReportTriggeredEventDataReasonErrorTypeCode = "timestamp_too_far_in_past"
)

// Open Enum.
type V1BillingMeterNoMeterFoundEventDataReasonErrorTypeCode string

// List of values that V1BillingMeterNoMeterFoundEventDataReasonErrorTypeCode can take
const (
	V1BillingMeterNoMeterFoundEventDataReasonErrorTypeCodeArchivedMeter                   V1BillingMeterNoMeterFoundEventDataReasonErrorTypeCode = "archived_meter"
	V1BillingMeterNoMeterFoundEventDataReasonErrorTypeCodeMeterEventCustomerNotFound      V1BillingMeterNoMeterFoundEventDataReasonErrorTypeCode = "meter_event_customer_not_found"
	V1BillingMeterNoMeterFoundEventDataReasonErrorTypeCodeMeterEventDimensionCountTooHigh V1BillingMeterNoMeterFoundEventDataReasonErrorTypeCode = "meter_event_dimension_count_too_high"
	V1BillingMeterNoMeterFoundEventDataReasonErrorTypeCodeMeterEventInvalidValue          V1BillingMeterNoMeterFoundEventDataReasonErrorTypeCode = "meter_event_invalid_value"
	V1BillingMeterNoMeterFoundEventDataReasonErrorTypeCodeMeterEventNoCustomerDefined     V1BillingMeterNoMeterFoundEventDataReasonErrorTypeCode = "meter_event_no_customer_defined"
	V1BillingMeterNoMeterFoundEventDataReasonErrorTypeCodeMissingDimensionPayloadKeys     V1BillingMeterNoMeterFoundEventDataReasonErrorTypeCode = "missing_dimension_payload_keys"
	V1BillingMeterNoMeterFoundEventDataReasonErrorTypeCodeNoMeter                         V1BillingMeterNoMeterFoundEventDataReasonErrorTypeCode = "no_meter"
	V1BillingMeterNoMeterFoundEventDataReasonErrorTypeCodeTimestampInFuture               V1BillingMeterNoMeterFoundEventDataReasonErrorTypeCode = "timestamp_in_future"
	V1BillingMeterNoMeterFoundEventDataReasonErrorTypeCodeTimestampTooFarInPast           V1BillingMeterNoMeterFoundEventDataReasonErrorTypeCode = "timestamp_too_far_in_past"
)

// Open Enum. The capability which had its status updated.
type V2CoreAccountIncludingConfigurationCustomerCapabilityStatusUpdatedEventDataUpdatedCapability string

// List of values that V2CoreAccountIncludingConfigurationCustomerCapabilityStatusUpdatedEventDataUpdatedCapability can take
const (
	V2CoreAccountIncludingConfigurationCustomerCapabilityStatusUpdatedEventDataUpdatedCapabilityAutomaticIndirectTax V2CoreAccountIncludingConfigurationCustomerCapabilityStatusUpdatedEventDataUpdatedCapability = "automatic_indirect_tax"
)

// Open Enum. The capability which had its status updated.
type V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability string

// List of values that V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability can take
const (
	V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapabilityACHDebitPayments         V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability = "ach_debit_payments"
	V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapabilityACSSDebitPayments        V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability = "acss_debit_payments"
	V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapabilityAffirmPayments           V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability = "affirm_payments"
	V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapabilityAfterpayClearpayPayments V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability = "afterpay_clearpay_payments"
	V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapabilityAlmaPayments             V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability = "alma_payments"
	V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapabilityAmazonPayPayments        V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability = "amazon_pay_payments"
	V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapabilityAUBECSDebitPayments      V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability = "au_becs_debit_payments"
	V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapabilityBACSDebitPayments        V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability = "bacs_debit_payments"
	V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapabilityBancontactPayments       V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability = "bancontact_payments"
	V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapabilityBLIKPayments             V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability = "blik_payments"
	V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapabilityBoletoPayments           V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability = "boleto_payments"
	V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapabilityCardPayments             V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability = "card_payments"
	V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapabilityCartesBancairesPayments  V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability = "cartes_bancaires_payments"
	V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapabilityCashAppPayments          V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability = "cashapp_payments"
	V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapabilityEPSPayments              V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability = "eps_payments"
	V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapabilityFPXPayments              V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability = "fpx_payments"
	V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapabilityGBBankTransferPayments   V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability = "gb_bank_transfer_payments"
	V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapabilityGrabpayPayments          V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability = "grabpay_payments"
	V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapabilityIDEALPayments            V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability = "ideal_payments"
	V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapabilityJCBPayments              V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability = "jcb_payments"
	V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapabilityJPBankTransferPayments   V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability = "jp_bank_transfer_payments"
	V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapabilityKakaoPayPayments         V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability = "kakao_pay_payments"
	V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapabilityKlarnaPayments           V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability = "klarna_payments"
	V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapabilityKonbiniPayments          V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability = "konbini_payments"
	V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapabilityKrCardPayments           V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability = "kr_card_payments"
	V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapabilityLinkPayments             V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability = "link_payments"
	V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapabilityMobilepayPayments        V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability = "mobilepay_payments"
	V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapabilityMultibancoPayments       V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability = "multibanco_payments"
	V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapabilityMXBankTransferPayments   V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability = "mx_bank_transfer_payments"
	V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapabilityNaverPayPayments         V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability = "naver_pay_payments"
	V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapabilityOXXOPayments             V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability = "oxxo_payments"
	V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapabilityP24Payments              V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability = "p24_payments"
	V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapabilityPaycoPayments            V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability = "payco_payments"
	V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapabilityPayNowPayments           V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability = "paynow_payments"
	V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapabilityStripeBalancePayouts     V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability = "stripe_balance.payouts"
	V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapabilityPayByBankPayments        V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability = "pay_by_bank_payments"
	V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapabilityPromptPayPayments        V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability = "promptpay_payments"
	V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapabilityRevolutPayPayments       V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability = "revolut_pay_payments"
	V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapabilitySamsungPayPayments       V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability = "samsung_pay_payments"
	V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapabilitySEPABankTransferPayments V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability = "sepa_bank_transfer_payments"
	V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapabilitySEPADebitPayments        V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability = "sepa_debit_payments"
	V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapabilitySwishPayments            V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability = "swish_payments"
	V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapabilityTWINTPayments            V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability = "twint_payments"
	V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapabilityUSBankTransferPayments   V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability = "us_bank_transfer_payments"
	V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapabilityZipPayments              V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability = "zip_payments"
)

// Open Enum. The capability which had its status updated.
type V2CoreAccountIncludingConfigurationRecipientCapabilityStatusUpdatedEventDataUpdatedCapability string

// List of values that V2CoreAccountIncludingConfigurationRecipientCapabilityStatusUpdatedEventDataUpdatedCapability can take
const (
	V2CoreAccountIncludingConfigurationRecipientCapabilityStatusUpdatedEventDataUpdatedCapabilityBankAccountsLocal            V2CoreAccountIncludingConfigurationRecipientCapabilityStatusUpdatedEventDataUpdatedCapability = "bank_accounts.local"
	V2CoreAccountIncludingConfigurationRecipientCapabilityStatusUpdatedEventDataUpdatedCapabilityBankAccountsWire             V2CoreAccountIncludingConfigurationRecipientCapabilityStatusUpdatedEventDataUpdatedCapability = "bank_accounts.wire"
	V2CoreAccountIncludingConfigurationRecipientCapabilityStatusUpdatedEventDataUpdatedCapabilityCards                        V2CoreAccountIncludingConfigurationRecipientCapabilityStatusUpdatedEventDataUpdatedCapability = "cards"
	V2CoreAccountIncludingConfigurationRecipientCapabilityStatusUpdatedEventDataUpdatedCapabilityCryptoWalletsV2              V2CoreAccountIncludingConfigurationRecipientCapabilityStatusUpdatedEventDataUpdatedCapability = "crypto_wallets_v2"
	V2CoreAccountIncludingConfigurationRecipientCapabilityStatusUpdatedEventDataUpdatedCapabilityStripeBalancePayouts         V2CoreAccountIncludingConfigurationRecipientCapabilityStatusUpdatedEventDataUpdatedCapability = "stripe_balance.payouts"
	V2CoreAccountIncludingConfigurationRecipientCapabilityStatusUpdatedEventDataUpdatedCapabilityStripeBalanceStripeTransfers V2CoreAccountIncludingConfigurationRecipientCapabilityStatusUpdatedEventDataUpdatedCapability = "stripe_balance.stripe_transfers"
	V2CoreAccountIncludingConfigurationRecipientCapabilityStatusUpdatedEventDataUpdatedCapabilityStripeTransfers              V2CoreAccountIncludingConfigurationRecipientCapabilityStatusUpdatedEventDataUpdatedCapability = "stripe.transfers"
)

// Open Enum. The capability which had its status updated.
type V2CoreAccountIncludingConfigurationStorerCapabilityStatusUpdatedEventDataUpdatedCapability string

// List of values that V2CoreAccountIncludingConfigurationStorerCapabilityStatusUpdatedEventDataUpdatedCapability can take
const (
	V2CoreAccountIncludingConfigurationStorerCapabilityStatusUpdatedEventDataUpdatedCapabilityFinancialAddresssesBankAccounts    V2CoreAccountIncludingConfigurationStorerCapabilityStatusUpdatedEventDataUpdatedCapability = "financial_addressses.bank_accounts"
	V2CoreAccountIncludingConfigurationStorerCapabilityStatusUpdatedEventDataUpdatedCapabilityFinancialAddresssesCryptoWallets   V2CoreAccountIncludingConfigurationStorerCapabilityStatusUpdatedEventDataUpdatedCapability = "financial_addressses.crypto_wallets"
	V2CoreAccountIncludingConfigurationStorerCapabilityStatusUpdatedEventDataUpdatedCapabilityHoldsCurrenciesEUR                 V2CoreAccountIncludingConfigurationStorerCapabilityStatusUpdatedEventDataUpdatedCapability = "holds_currencies.eur"
	V2CoreAccountIncludingConfigurationStorerCapabilityStatusUpdatedEventDataUpdatedCapabilityHoldsCurrenciesGBP                 V2CoreAccountIncludingConfigurationStorerCapabilityStatusUpdatedEventDataUpdatedCapability = "holds_currencies.gbp"
	V2CoreAccountIncludingConfigurationStorerCapabilityStatusUpdatedEventDataUpdatedCapabilityHoldsCurrenciesUSD                 V2CoreAccountIncludingConfigurationStorerCapabilityStatusUpdatedEventDataUpdatedCapability = "holds_currencies.usd"
	V2CoreAccountIncludingConfigurationStorerCapabilityStatusUpdatedEventDataUpdatedCapabilityHoldsCurrenciesUsdc                V2CoreAccountIncludingConfigurationStorerCapabilityStatusUpdatedEventDataUpdatedCapability = "holds_currencies.usdc"
	V2CoreAccountIncludingConfigurationStorerCapabilityStatusUpdatedEventDataUpdatedCapabilityInboundTransfersBankAccounts       V2CoreAccountIncludingConfigurationStorerCapabilityStatusUpdatedEventDataUpdatedCapability = "inbound_transfers.bank_accounts"
	V2CoreAccountIncludingConfigurationStorerCapabilityStatusUpdatedEventDataUpdatedCapabilityOutboundPaymentsBankAccounts       V2CoreAccountIncludingConfigurationStorerCapabilityStatusUpdatedEventDataUpdatedCapability = "outbound_payments.bank_accounts"
	V2CoreAccountIncludingConfigurationStorerCapabilityStatusUpdatedEventDataUpdatedCapabilityOutboundPaymentsCards              V2CoreAccountIncludingConfigurationStorerCapabilityStatusUpdatedEventDataUpdatedCapability = "outbound_payments.cards"
	V2CoreAccountIncludingConfigurationStorerCapabilityStatusUpdatedEventDataUpdatedCapabilityOutboundPaymentsCryptoWallets      V2CoreAccountIncludingConfigurationStorerCapabilityStatusUpdatedEventDataUpdatedCapability = "outbound_payments.crypto_wallets"
	V2CoreAccountIncludingConfigurationStorerCapabilityStatusUpdatedEventDataUpdatedCapabilityOutboundPaymentsFinancialAccounts  V2CoreAccountIncludingConfigurationStorerCapabilityStatusUpdatedEventDataUpdatedCapability = "outbound_payments.financial_accounts"
	V2CoreAccountIncludingConfigurationStorerCapabilityStatusUpdatedEventDataUpdatedCapabilityOutboundTransfersBankAccounts      V2CoreAccountIncludingConfigurationStorerCapabilityStatusUpdatedEventDataUpdatedCapability = "outbound_transfers.bank_accounts"
	V2CoreAccountIncludingConfigurationStorerCapabilityStatusUpdatedEventDataUpdatedCapabilityOutboundTransfersCryptoWallets     V2CoreAccountIncludingConfigurationStorerCapabilityStatusUpdatedEventDataUpdatedCapability = "outbound_transfers.crypto_wallets"
	V2CoreAccountIncludingConfigurationStorerCapabilityStatusUpdatedEventDataUpdatedCapabilityOutboundTransfersFinancialAccounts V2CoreAccountIncludingConfigurationStorerCapabilityStatusUpdatedEventDataUpdatedCapability = "outbound_transfers.financial_accounts"
)

// Open Enum. The use case type of the account link that has been completed.
type V2CoreAccountLinkReturnedEventDataUseCase string

// List of values that V2CoreAccountLinkReturnedEventDataUseCase can take
const (
	V2CoreAccountLinkReturnedEventDataUseCaseAccountOnboarding V2CoreAccountLinkReturnedEventDataUseCase = "account_onboarding"
	V2CoreAccountLinkReturnedEventDataUseCaseAccountUpdate     V2CoreAccountLinkReturnedEventDataUseCase = "account_update"
)

// Configurations on the Account that was onboarded via the account link.
type V2CoreAccountLinkReturnedEventDataConfiguration string

// List of values that V2CoreAccountLinkReturnedEventDataConfiguration can take
const (
	V2CoreAccountLinkReturnedEventDataConfigurationCustomer  V2CoreAccountLinkReturnedEventDataConfiguration = "customer"
	V2CoreAccountLinkReturnedEventDataConfigurationMerchant  V2CoreAccountLinkReturnedEventDataConfiguration = "merchant"
	V2CoreAccountLinkReturnedEventDataConfigurationRecipient V2CoreAccountLinkReturnedEventDataConfiguration = "recipient"
	V2CoreAccountLinkReturnedEventDataConfigurationStorer    V2CoreAccountLinkReturnedEventDataConfiguration = "storer"
)

// The HTTP method.
type V2CoreHealthAPIErrorFiringEventDataImpactHTTPMethod string

// List of values that V2CoreHealthAPIErrorFiringEventDataImpactHTTPMethod can take
const (
	V2CoreHealthAPIErrorFiringEventDataImpactHTTPMethodDELETE V2CoreHealthAPIErrorFiringEventDataImpactHTTPMethod = "DELETE"
	V2CoreHealthAPIErrorFiringEventDataImpactHTTPMethodGET    V2CoreHealthAPIErrorFiringEventDataImpactHTTPMethod = "GET"
	V2CoreHealthAPIErrorFiringEventDataImpactHTTPMethodPOST   V2CoreHealthAPIErrorFiringEventDataImpactHTTPMethod = "POST"
	V2CoreHealthAPIErrorFiringEventDataImpactHTTPMethodPUT    V2CoreHealthAPIErrorFiringEventDataImpactHTTPMethod = "PUT"
)

// The HTTP method.
type V2CoreHealthAPIErrorResolvedEventDataImpactHTTPMethod string

// List of values that V2CoreHealthAPIErrorResolvedEventDataImpactHTTPMethod can take
const (
	V2CoreHealthAPIErrorResolvedEventDataImpactHTTPMethodDELETE V2CoreHealthAPIErrorResolvedEventDataImpactHTTPMethod = "DELETE"
	V2CoreHealthAPIErrorResolvedEventDataImpactHTTPMethodGET    V2CoreHealthAPIErrorResolvedEventDataImpactHTTPMethod = "GET"
	V2CoreHealthAPIErrorResolvedEventDataImpactHTTPMethodPOST   V2CoreHealthAPIErrorResolvedEventDataImpactHTTPMethod = "POST"
	V2CoreHealthAPIErrorResolvedEventDataImpactHTTPMethodPUT    V2CoreHealthAPIErrorResolvedEventDataImpactHTTPMethod = "PUT"
)

// The HTTP method.
type V2CoreHealthAPILatencyFiringEventDataImpactHTTPMethod string

// List of values that V2CoreHealthAPILatencyFiringEventDataImpactHTTPMethod can take
const (
	V2CoreHealthAPILatencyFiringEventDataImpactHTTPMethodDELETE V2CoreHealthAPILatencyFiringEventDataImpactHTTPMethod = "DELETE"
	V2CoreHealthAPILatencyFiringEventDataImpactHTTPMethodGET    V2CoreHealthAPILatencyFiringEventDataImpactHTTPMethod = "GET"
	V2CoreHealthAPILatencyFiringEventDataImpactHTTPMethodPOST   V2CoreHealthAPILatencyFiringEventDataImpactHTTPMethod = "POST"
	V2CoreHealthAPILatencyFiringEventDataImpactHTTPMethodPUT    V2CoreHealthAPILatencyFiringEventDataImpactHTTPMethod = "PUT"
)

// The HTTP method.
type V2CoreHealthAPILatencyResolvedEventDataImpactHTTPMethod string

// List of values that V2CoreHealthAPILatencyResolvedEventDataImpactHTTPMethod can take
const (
	V2CoreHealthAPILatencyResolvedEventDataImpactHTTPMethodDELETE V2CoreHealthAPILatencyResolvedEventDataImpactHTTPMethod = "DELETE"
	V2CoreHealthAPILatencyResolvedEventDataImpactHTTPMethodGET    V2CoreHealthAPILatencyResolvedEventDataImpactHTTPMethod = "GET"
	V2CoreHealthAPILatencyResolvedEventDataImpactHTTPMethodPOST   V2CoreHealthAPILatencyResolvedEventDataImpactHTTPMethod = "POST"
	V2CoreHealthAPILatencyResolvedEventDataImpactHTTPMethodPUT    V2CoreHealthAPILatencyResolvedEventDataImpactHTTPMethod = "PUT"
)

// The type of the charge.
type V2CoreHealthAuthorizationRateDropFiringEventDataImpactChargeType string

// List of values that V2CoreHealthAuthorizationRateDropFiringEventDataImpactChargeType can take
const (
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactChargeTypeMoneyMoving V2CoreHealthAuthorizationRateDropFiringEventDataImpactChargeType = "money_moving"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactChargeTypeValidation  V2CoreHealthAuthorizationRateDropFiringEventDataImpactChargeType = "validation"
)

// The type of the dimension.
type V2CoreHealthAuthorizationRateDropFiringEventDataImpactDimensionType string

// List of values that V2CoreHealthAuthorizationRateDropFiringEventDataImpactDimensionType can take
const (
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactDimensionTypeIssuer V2CoreHealthAuthorizationRateDropFiringEventDataImpactDimensionType = "issuer"
)

// The type of the payment method.
type V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType string

// List of values that V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType can take
const (
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypeACSSDebit            V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "acss_debit"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypeAffirm               V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "affirm"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypeAfterpayClearpay     V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "afterpay_clearpay"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypeAlipay               V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "alipay"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypeAlma                 V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "alma"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypeAmazonPay            V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "amazon_pay"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypeApplePay             V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "apple_pay"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypeAUBECSDebit          V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "au_becs_debit"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypeBACSDebit            V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "bacs_debit"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypeBancontact           V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "bancontact"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypeBLIK                 V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "blik"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypeBoleto               V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "boleto"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypeCard                 V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "card"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypeCardPresent          V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "card_present"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypeCartesBancaires      V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "cartes_bancaires"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypeCashApp              V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "cashapp"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypeDummyPassthroughCard V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "dummy_passthrough_card"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypeEPS                  V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "eps"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypeFPX                  V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "fpx"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypeGiropay              V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "giropay"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypeGrabpay              V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "grabpay"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypeIDEAL                V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "ideal"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypeInteracPresent       V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "interac_present"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypeKakaoPay             V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "kakao_pay"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypeKlarna               V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "klarna"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypeKonbini              V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "konbini"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypeLink                 V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "link"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypeMobilepay            V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "mobilepay"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypeMultibanco           V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "multibanco"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypeNaverPay             V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "naver_pay"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypeOXXO                 V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "oxxo"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypeP24                  V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "p24"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypePaperCheck           V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "paper_check"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypePayNow               V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "paynow"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypePaypal               V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "paypal"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypePayto                V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "payto"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypePayByBank            V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "pay_by_bank"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypePix                  V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "pix"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypePromptPay            V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "promptpay"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypeRevolutPay           V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "revolut_pay"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypeSEPADebit            V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "sepa_debit"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypeSofort               V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "sofort"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypeSwish                V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "swish"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypeTWINT                V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "twint"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypeUpi                  V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "upi"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypeWeChatPay            V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "wechat_pay"
	V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodTypeZip                  V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType = "zip"
)

// The type of the charge.
type V2CoreHealthAuthorizationRateDropResolvedEventDataImpactChargeType string

// List of values that V2CoreHealthAuthorizationRateDropResolvedEventDataImpactChargeType can take
const (
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactChargeTypeMoneyMoving V2CoreHealthAuthorizationRateDropResolvedEventDataImpactChargeType = "money_moving"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactChargeTypeValidation  V2CoreHealthAuthorizationRateDropResolvedEventDataImpactChargeType = "validation"
)

// The type of the dimension.
type V2CoreHealthAuthorizationRateDropResolvedEventDataImpactDimensionType string

// List of values that V2CoreHealthAuthorizationRateDropResolvedEventDataImpactDimensionType can take
const (
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactDimensionTypeIssuer V2CoreHealthAuthorizationRateDropResolvedEventDataImpactDimensionType = "issuer"
)

// The type of the payment method.
type V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType string

// List of values that V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType can take
const (
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypeACSSDebit            V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "acss_debit"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypeAffirm               V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "affirm"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypeAfterpayClearpay     V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "afterpay_clearpay"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypeAlipay               V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "alipay"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypeAlma                 V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "alma"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypeAmazonPay            V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "amazon_pay"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypeApplePay             V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "apple_pay"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypeAUBECSDebit          V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "au_becs_debit"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypeBACSDebit            V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "bacs_debit"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypeBancontact           V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "bancontact"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypeBLIK                 V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "blik"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypeBoleto               V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "boleto"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypeCard                 V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "card"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypeCardPresent          V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "card_present"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypeCartesBancaires      V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "cartes_bancaires"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypeCashApp              V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "cashapp"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypeDummyPassthroughCard V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "dummy_passthrough_card"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypeEPS                  V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "eps"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypeFPX                  V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "fpx"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypeGiropay              V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "giropay"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypeGrabpay              V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "grabpay"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypeIDEAL                V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "ideal"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypeInteracPresent       V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "interac_present"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypeKakaoPay             V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "kakao_pay"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypeKlarna               V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "klarna"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypeKonbini              V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "konbini"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypeLink                 V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "link"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypeMobilepay            V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "mobilepay"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypeMultibanco           V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "multibanco"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypeNaverPay             V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "naver_pay"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypeOXXO                 V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "oxxo"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypeP24                  V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "p24"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypePaperCheck           V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "paper_check"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypePayNow               V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "paynow"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypePaypal               V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "paypal"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypePayto                V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "payto"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypePayByBank            V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "pay_by_bank"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypePix                  V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "pix"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypePromptPay            V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "promptpay"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypeRevolutPay           V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "revolut_pay"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypeSEPADebit            V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "sepa_debit"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypeSofort               V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "sofort"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypeSwish                V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "swish"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypeTWINT                V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "twint"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypeUpi                  V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "upi"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypeWeChatPay            V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "wechat_pay"
	V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodTypeZip                  V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType = "zip"
)

// Fraud attack type.
type V2CoreHealthFraudRateIncreasedEventDataImpactAttackType string

// List of values that V2CoreHealthFraudRateIncreasedEventDataImpactAttackType can take
const (
	V2CoreHealthFraudRateIncreasedEventDataImpactAttackTypeSpike           V2CoreHealthFraudRateIncreasedEventDataImpactAttackType = "spike"
	V2CoreHealthFraudRateIncreasedEventDataImpactAttackTypeSustainedAttack V2CoreHealthFraudRateIncreasedEventDataImpactAttackType = "sustained_attack"
)

// The type of the payment method.
type V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType string

// List of values that V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType can take
const (
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypeACSSDebit            V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "acss_debit"
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypeAffirm               V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "affirm"
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypeAfterpayClearpay     V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "afterpay_clearpay"
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypeAlipay               V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "alipay"
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypeAlma                 V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "alma"
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypeAmazonPay            V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "amazon_pay"
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypeApplePay             V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "apple_pay"
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypeAUBECSDebit          V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "au_becs_debit"
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypeBACSDebit            V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "bacs_debit"
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypeBancontact           V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "bancontact"
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypeBLIK                 V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "blik"
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypeBoleto               V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "boleto"
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypeCard                 V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "card"
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypeCardPresent          V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "card_present"
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypeCartesBancaires      V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "cartes_bancaires"
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypeCashApp              V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "cashapp"
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypeDummyPassthroughCard V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "dummy_passthrough_card"
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypeEPS                  V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "eps"
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypeFPX                  V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "fpx"
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypeGiropay              V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "giropay"
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypeGrabpay              V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "grabpay"
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypeIDEAL                V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "ideal"
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypeInteracPresent       V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "interac_present"
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypeKakaoPay             V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "kakao_pay"
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypeKlarna               V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "klarna"
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypeKonbini              V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "konbini"
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypeLink                 V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "link"
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypeMobilepay            V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "mobilepay"
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypeMultibanco           V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "multibanco"
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypeNaverPay             V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "naver_pay"
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypeOXXO                 V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "oxxo"
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypeP24                  V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "p24"
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypePaperCheck           V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "paper_check"
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypePayNow               V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "paynow"
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypePaypal               V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "paypal"
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypePayto                V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "payto"
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypePayByBank            V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "pay_by_bank"
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypePix                  V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "pix"
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypePromptPay            V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "promptpay"
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypeRevolutPay           V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "revolut_pay"
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypeSEPADebit            V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "sepa_debit"
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypeSofort               V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "sofort"
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypeSwish                V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "swish"
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypeTWINT                V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "twint"
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypeUpi                  V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "upi"
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypeWeChatPay            V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "wechat_pay"
	V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodTypeZip                  V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType = "zip"
)

// The type of the payment method.
type V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType string

// List of values that V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType can take
const (
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypeACSSDebit            V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "acss_debit"
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypeAffirm               V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "affirm"
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypeAfterpayClearpay     V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "afterpay_clearpay"
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypeAlipay               V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "alipay"
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypeAlma                 V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "alma"
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypeAmazonPay            V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "amazon_pay"
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypeApplePay             V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "apple_pay"
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypeAUBECSDebit          V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "au_becs_debit"
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypeBACSDebit            V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "bacs_debit"
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypeBancontact           V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "bancontact"
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypeBLIK                 V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "blik"
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypeBoleto               V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "boleto"
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypeCard                 V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "card"
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypeCardPresent          V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "card_present"
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypeCartesBancaires      V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "cartes_bancaires"
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypeCashApp              V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "cashapp"
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypeDummyPassthroughCard V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "dummy_passthrough_card"
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypeEPS                  V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "eps"
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypeFPX                  V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "fpx"
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypeGiropay              V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "giropay"
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypeGrabpay              V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "grabpay"
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypeIDEAL                V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "ideal"
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypeInteracPresent       V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "interac_present"
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypeKakaoPay             V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "kakao_pay"
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypeKlarna               V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "klarna"
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypeKonbini              V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "konbini"
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypeLink                 V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "link"
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypeMobilepay            V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "mobilepay"
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypeMultibanco           V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "multibanco"
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypeNaverPay             V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "naver_pay"
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypeOXXO                 V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "oxxo"
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypeP24                  V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "p24"
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypePaperCheck           V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "paper_check"
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypePayNow               V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "paynow"
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypePaypal               V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "paypal"
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypePayto                V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "payto"
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypePayByBank            V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "pay_by_bank"
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypePix                  V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "pix"
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypePromptPay            V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "promptpay"
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypeRevolutPay           V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "revolut_pay"
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypeSEPADebit            V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "sepa_debit"
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypeSofort               V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "sofort"
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypeSwish                V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "swish"
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypeTWINT                V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "twint"
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypeUpi                  V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "upi"
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypeWeChatPay            V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "wechat_pay"
	V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodTypeZip                  V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType = "zip"
)

// V2Event is the interface implemented by V2 Events. To get the underlying Event,
// use a type switch or type assertion to one of the concrete event types.
type V2Event interface {
	getBaseEvent() *V2BaseEvent
}

// V2RawEvent is the raw event type for V2 events. It is used to unmarshal the
// event data into a generic structure, and can also be used a default event
// type when the event type is not known.
type V2RawEvent struct {
	V2BaseEvent
	Data          *json.RawMessage `json:"data"`
	RelatedObject *RelatedObject   `json:"related_object"`
}

// Used for everything internal to the EventNotifications
type eventNotificationParams struct {
	Params `form:"*"`
}

// V1AccountUpdatedEvent is the Go struct for the "v1.account.updated" event.
// Occurs whenever an account status or property has changed.
type V1AccountUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Account, error)
}

// FetchRelatedObject fetches the Account related to the event.
func (e *V1AccountUpdatedEvent) FetchRelatedObject(ctx context.Context) (*Account, error) {
	return e.fetchRelatedObject()
}

// V1AccountUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v1.account.updated"
// Occurs whenever an account status or property has changed.
type V1AccountUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1AccountUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1AccountUpdatedEvent that created this Notification
func (en *V1AccountUpdatedEventNotification) FetchEvent(ctx context.Context) (*V1AccountUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1AccountUpdatedEvent), nil
}

// FetchRelatedObject fetches the Account related to the event.
func (en *V1AccountUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*Account, error) {
	relatedObj := &Account{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1ApplicationFeeCreatedEvent is the Go struct for the "v1.application_fee.created" event.
// Occurs whenever an application fee is created on a charge.
type V1ApplicationFeeCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*ApplicationFee, error)
}

// FetchRelatedObject fetches the ApplicationFee related to the event.
func (e *V1ApplicationFeeCreatedEvent) FetchRelatedObject(ctx context.Context) (*ApplicationFee, error) {
	return e.fetchRelatedObject()
}

// V1ApplicationFeeCreatedEventNotification is the webhook payload you'll get when handling an event with type "v1.application_fee.created"
// Occurs whenever an application fee is created on a charge.
type V1ApplicationFeeCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1ApplicationFeeCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1ApplicationFeeCreatedEvent that created this Notification
func (en *V1ApplicationFeeCreatedEventNotification) FetchEvent(ctx context.Context) (*V1ApplicationFeeCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1ApplicationFeeCreatedEvent), nil
}

// FetchRelatedObject fetches the ApplicationFee related to the event.
func (en *V1ApplicationFeeCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*ApplicationFee, error) {
	relatedObj := &ApplicationFee{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1ApplicationFeeRefundedEvent is the Go struct for the "v1.application_fee.refunded" event.
// Occurs whenever an application fee is refunded, whether from refunding a charge or from [refunding the application fee directly](#fee_refunds). This includes partial refunds.
type V1ApplicationFeeRefundedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*ApplicationFee, error)
}

// FetchRelatedObject fetches the ApplicationFee related to the event.
func (e *V1ApplicationFeeRefundedEvent) FetchRelatedObject(ctx context.Context) (*ApplicationFee, error) {
	return e.fetchRelatedObject()
}

// V1ApplicationFeeRefundedEventNotification is the webhook payload you'll get when handling an event with type "v1.application_fee.refunded"
// Occurs whenever an application fee is refunded, whether from refunding a charge or from [refunding the application fee directly](#fee_refunds). This includes partial refunds.
type V1ApplicationFeeRefundedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1ApplicationFeeRefundedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1ApplicationFeeRefundedEvent that created this Notification
func (en *V1ApplicationFeeRefundedEventNotification) FetchEvent(ctx context.Context) (*V1ApplicationFeeRefundedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1ApplicationFeeRefundedEvent), nil
}

// FetchRelatedObject fetches the ApplicationFee related to the event.
func (en *V1ApplicationFeeRefundedEventNotification) FetchRelatedObject(ctx context.Context) (*ApplicationFee, error) {
	relatedObj := &ApplicationFee{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1BillingMeterErrorReportTriggeredEvent is the Go struct for the "v1.billing.meter.error_report_triggered" event.
// Occurs when a Meter has invalid async usage events.
type V1BillingMeterErrorReportTriggeredEvent struct {
	V2BaseEvent
	Data               V1BillingMeterErrorReportTriggeredEventData `json:"data"`
	RelatedObject      RelatedObject                               `json:"related_object"`
	fetchRelatedObject func() (*BillingMeter, error)
}

// FetchRelatedObject fetches the BillingMeter related to the event.
func (e *V1BillingMeterErrorReportTriggeredEvent) FetchRelatedObject(ctx context.Context) (*BillingMeter, error) {
	return e.fetchRelatedObject()
}

// V1BillingMeterErrorReportTriggeredEventNotification is the webhook payload you'll get when handling an event with type "v1.billing.meter.error_report_triggered"
// Occurs when a Meter has invalid async usage events.
type V1BillingMeterErrorReportTriggeredEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1BillingMeterErrorReportTriggeredEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1BillingMeterErrorReportTriggeredEvent that created this Notification
func (en *V1BillingMeterErrorReportTriggeredEventNotification) FetchEvent(ctx context.Context) (*V1BillingMeterErrorReportTriggeredEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1BillingMeterErrorReportTriggeredEvent), nil
}

// FetchRelatedObject fetches the BillingMeter related to the event.
func (en *V1BillingMeterErrorReportTriggeredEventNotification) FetchRelatedObject(ctx context.Context) (*BillingMeter, error) {
	relatedObj := &BillingMeter{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1BillingMeterNoMeterFoundEvent is the Go struct for the "v1.billing.meter.no_meter_found" event.
// Occurs when a Meter's id is missing or invalid in async usage events.
type V1BillingMeterNoMeterFoundEvent struct {
	V2BaseEvent
	Data V1BillingMeterNoMeterFoundEventData `json:"data"`
}

// V1BillingMeterNoMeterFoundEventNotification is the webhook payload you'll get when handling an event with type "v1.billing.meter.no_meter_found"
// Occurs when a Meter's id is missing or invalid in async usage events.
type V1BillingMeterNoMeterFoundEventNotification struct{ V2EventNotification }

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1BillingMeterNoMeterFoundEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1BillingMeterNoMeterFoundEvent that created this Notification
func (en *V1BillingMeterNoMeterFoundEventNotification) FetchEvent(ctx context.Context) (*V1BillingMeterNoMeterFoundEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1BillingMeterNoMeterFoundEvent), nil
}

// V1BillingPortalConfigurationCreatedEvent is the Go struct for the "v1.billing_portal.configuration.created" event.
// Occurs whenever a portal configuration is created.
type V1BillingPortalConfigurationCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*BillingPortalConfiguration, error)
}

// FetchRelatedObject fetches the BillingPortalConfiguration related to the event.
func (e *V1BillingPortalConfigurationCreatedEvent) FetchRelatedObject(ctx context.Context) (*BillingPortalConfiguration, error) {
	return e.fetchRelatedObject()
}

// V1BillingPortalConfigurationCreatedEventNotification is the webhook payload you'll get when handling an event with type "v1.billing_portal.configuration.created"
// Occurs whenever a portal configuration is created.
type V1BillingPortalConfigurationCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1BillingPortalConfigurationCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1BillingPortalConfigurationCreatedEvent that created this Notification
func (en *V1BillingPortalConfigurationCreatedEventNotification) FetchEvent(ctx context.Context) (*V1BillingPortalConfigurationCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1BillingPortalConfigurationCreatedEvent), nil
}

// FetchRelatedObject fetches the BillingPortalConfiguration related to the event.
func (en *V1BillingPortalConfigurationCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*BillingPortalConfiguration, error) {
	relatedObj := &BillingPortalConfiguration{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1BillingPortalConfigurationUpdatedEvent is the Go struct for the "v1.billing_portal.configuration.updated" event.
// Occurs whenever a portal configuration is updated.
type V1BillingPortalConfigurationUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*BillingPortalConfiguration, error)
}

// FetchRelatedObject fetches the BillingPortalConfiguration related to the event.
func (e *V1BillingPortalConfigurationUpdatedEvent) FetchRelatedObject(ctx context.Context) (*BillingPortalConfiguration, error) {
	return e.fetchRelatedObject()
}

// V1BillingPortalConfigurationUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v1.billing_portal.configuration.updated"
// Occurs whenever a portal configuration is updated.
type V1BillingPortalConfigurationUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1BillingPortalConfigurationUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1BillingPortalConfigurationUpdatedEvent that created this Notification
func (en *V1BillingPortalConfigurationUpdatedEventNotification) FetchEvent(ctx context.Context) (*V1BillingPortalConfigurationUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1BillingPortalConfigurationUpdatedEvent), nil
}

// FetchRelatedObject fetches the BillingPortalConfiguration related to the event.
func (en *V1BillingPortalConfigurationUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*BillingPortalConfiguration, error) {
	relatedObj := &BillingPortalConfiguration{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1CapabilityUpdatedEvent is the Go struct for the "v1.capability.updated" event.
// Occurs whenever a capability has new requirements or a new status.
type V1CapabilityUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Capability, error)
}

// FetchRelatedObject fetches the Capability related to the event.
func (e *V1CapabilityUpdatedEvent) FetchRelatedObject(ctx context.Context) (*Capability, error) {
	return e.fetchRelatedObject()
}

// V1CapabilityUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v1.capability.updated"
// Occurs whenever a capability has new requirements or a new status.
type V1CapabilityUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1CapabilityUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1CapabilityUpdatedEvent that created this Notification
func (en *V1CapabilityUpdatedEventNotification) FetchEvent(ctx context.Context) (*V1CapabilityUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1CapabilityUpdatedEvent), nil
}

// FetchRelatedObject fetches the Capability related to the event.
func (en *V1CapabilityUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*Capability, error) {
	relatedObj := &Capability{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1ChargeCapturedEvent is the Go struct for the "v1.charge.captured" event.
// Occurs whenever a previously uncaptured charge is captured.
type V1ChargeCapturedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Charge, error)
}

// FetchRelatedObject fetches the Charge related to the event.
func (e *V1ChargeCapturedEvent) FetchRelatedObject(ctx context.Context) (*Charge, error) {
	return e.fetchRelatedObject()
}

// V1ChargeCapturedEventNotification is the webhook payload you'll get when handling an event with type "v1.charge.captured"
// Occurs whenever a previously uncaptured charge is captured.
type V1ChargeCapturedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1ChargeCapturedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1ChargeCapturedEvent that created this Notification
func (en *V1ChargeCapturedEventNotification) FetchEvent(ctx context.Context) (*V1ChargeCapturedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1ChargeCapturedEvent), nil
}

// FetchRelatedObject fetches the Charge related to the event.
func (en *V1ChargeCapturedEventNotification) FetchRelatedObject(ctx context.Context) (*Charge, error) {
	relatedObj := &Charge{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1ChargeDisputeClosedEvent is the Go struct for the "v1.charge.dispute.closed" event.
// Occurs when a dispute is closed and the dispute status changes to `lost`, `warning_closed`, or `won`.
type V1ChargeDisputeClosedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Dispute, error)
}

// FetchRelatedObject fetches the Dispute related to the event.
func (e *V1ChargeDisputeClosedEvent) FetchRelatedObject(ctx context.Context) (*Dispute, error) {
	return e.fetchRelatedObject()
}

// V1ChargeDisputeClosedEventNotification is the webhook payload you'll get when handling an event with type "v1.charge.dispute.closed"
// Occurs when a dispute is closed and the dispute status changes to `lost`, `warning_closed`, or `won`.
type V1ChargeDisputeClosedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1ChargeDisputeClosedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1ChargeDisputeClosedEvent that created this Notification
func (en *V1ChargeDisputeClosedEventNotification) FetchEvent(ctx context.Context) (*V1ChargeDisputeClosedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1ChargeDisputeClosedEvent), nil
}

// FetchRelatedObject fetches the Dispute related to the event.
func (en *V1ChargeDisputeClosedEventNotification) FetchRelatedObject(ctx context.Context) (*Dispute, error) {
	relatedObj := &Dispute{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1ChargeDisputeCreatedEvent is the Go struct for the "v1.charge.dispute.created" event.
// Occurs whenever a customer disputes a charge with their bank.
type V1ChargeDisputeCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Dispute, error)
}

// FetchRelatedObject fetches the Dispute related to the event.
func (e *V1ChargeDisputeCreatedEvent) FetchRelatedObject(ctx context.Context) (*Dispute, error) {
	return e.fetchRelatedObject()
}

// V1ChargeDisputeCreatedEventNotification is the webhook payload you'll get when handling an event with type "v1.charge.dispute.created"
// Occurs whenever a customer disputes a charge with their bank.
type V1ChargeDisputeCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1ChargeDisputeCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1ChargeDisputeCreatedEvent that created this Notification
func (en *V1ChargeDisputeCreatedEventNotification) FetchEvent(ctx context.Context) (*V1ChargeDisputeCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1ChargeDisputeCreatedEvent), nil
}

// FetchRelatedObject fetches the Dispute related to the event.
func (en *V1ChargeDisputeCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*Dispute, error) {
	relatedObj := &Dispute{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1ChargeDisputeFundsReinstatedEvent is the Go struct for the "v1.charge.dispute.funds_reinstated" event.
// Occurs when funds are reinstated to your account after a dispute is closed. This includes [partially refunded payments](https://docs.stripe.com/disputes#disputes-on-partially-refunded-payments).
type V1ChargeDisputeFundsReinstatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Dispute, error)
}

// FetchRelatedObject fetches the Dispute related to the event.
func (e *V1ChargeDisputeFundsReinstatedEvent) FetchRelatedObject(ctx context.Context) (*Dispute, error) {
	return e.fetchRelatedObject()
}

// V1ChargeDisputeFundsReinstatedEventNotification is the webhook payload you'll get when handling an event with type "v1.charge.dispute.funds_reinstated"
// Occurs when funds are reinstated to your account after a dispute is closed. This includes [partially refunded payments](https://docs.stripe.com/disputes#disputes-on-partially-refunded-payments).
type V1ChargeDisputeFundsReinstatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1ChargeDisputeFundsReinstatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1ChargeDisputeFundsReinstatedEvent that created this Notification
func (en *V1ChargeDisputeFundsReinstatedEventNotification) FetchEvent(ctx context.Context) (*V1ChargeDisputeFundsReinstatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1ChargeDisputeFundsReinstatedEvent), nil
}

// FetchRelatedObject fetches the Dispute related to the event.
func (en *V1ChargeDisputeFundsReinstatedEventNotification) FetchRelatedObject(ctx context.Context) (*Dispute, error) {
	relatedObj := &Dispute{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1ChargeDisputeFundsWithdrawnEvent is the Go struct for the "v1.charge.dispute.funds_withdrawn" event.
// Occurs when funds are removed from your account due to a dispute.
type V1ChargeDisputeFundsWithdrawnEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Dispute, error)
}

// FetchRelatedObject fetches the Dispute related to the event.
func (e *V1ChargeDisputeFundsWithdrawnEvent) FetchRelatedObject(ctx context.Context) (*Dispute, error) {
	return e.fetchRelatedObject()
}

// V1ChargeDisputeFundsWithdrawnEventNotification is the webhook payload you'll get when handling an event with type "v1.charge.dispute.funds_withdrawn"
// Occurs when funds are removed from your account due to a dispute.
type V1ChargeDisputeFundsWithdrawnEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1ChargeDisputeFundsWithdrawnEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1ChargeDisputeFundsWithdrawnEvent that created this Notification
func (en *V1ChargeDisputeFundsWithdrawnEventNotification) FetchEvent(ctx context.Context) (*V1ChargeDisputeFundsWithdrawnEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1ChargeDisputeFundsWithdrawnEvent), nil
}

// FetchRelatedObject fetches the Dispute related to the event.
func (en *V1ChargeDisputeFundsWithdrawnEventNotification) FetchRelatedObject(ctx context.Context) (*Dispute, error) {
	relatedObj := &Dispute{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1ChargeDisputeUpdatedEvent is the Go struct for the "v1.charge.dispute.updated" event.
// Occurs when the dispute is updated (usually with evidence).
type V1ChargeDisputeUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Dispute, error)
}

// FetchRelatedObject fetches the Dispute related to the event.
func (e *V1ChargeDisputeUpdatedEvent) FetchRelatedObject(ctx context.Context) (*Dispute, error) {
	return e.fetchRelatedObject()
}

// V1ChargeDisputeUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v1.charge.dispute.updated"
// Occurs when the dispute is updated (usually with evidence).
type V1ChargeDisputeUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1ChargeDisputeUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1ChargeDisputeUpdatedEvent that created this Notification
func (en *V1ChargeDisputeUpdatedEventNotification) FetchEvent(ctx context.Context) (*V1ChargeDisputeUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1ChargeDisputeUpdatedEvent), nil
}

// FetchRelatedObject fetches the Dispute related to the event.
func (en *V1ChargeDisputeUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*Dispute, error) {
	relatedObj := &Dispute{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1ChargeExpiredEvent is the Go struct for the "v1.charge.expired" event.
// Occurs whenever an uncaptured charge expires.
type V1ChargeExpiredEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Charge, error)
}

// FetchRelatedObject fetches the Charge related to the event.
func (e *V1ChargeExpiredEvent) FetchRelatedObject(ctx context.Context) (*Charge, error) {
	return e.fetchRelatedObject()
}

// V1ChargeExpiredEventNotification is the webhook payload you'll get when handling an event with type "v1.charge.expired"
// Occurs whenever an uncaptured charge expires.
type V1ChargeExpiredEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1ChargeExpiredEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1ChargeExpiredEvent that created this Notification
func (en *V1ChargeExpiredEventNotification) FetchEvent(ctx context.Context) (*V1ChargeExpiredEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1ChargeExpiredEvent), nil
}

// FetchRelatedObject fetches the Charge related to the event.
func (en *V1ChargeExpiredEventNotification) FetchRelatedObject(ctx context.Context) (*Charge, error) {
	relatedObj := &Charge{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1ChargeFailedEvent is the Go struct for the "v1.charge.failed" event.
// Occurs whenever a failed charge attempt occurs.
type V1ChargeFailedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Charge, error)
}

// FetchRelatedObject fetches the Charge related to the event.
func (e *V1ChargeFailedEvent) FetchRelatedObject(ctx context.Context) (*Charge, error) {
	return e.fetchRelatedObject()
}

// V1ChargeFailedEventNotification is the webhook payload you'll get when handling an event with type "v1.charge.failed"
// Occurs whenever a failed charge attempt occurs.
type V1ChargeFailedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1ChargeFailedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1ChargeFailedEvent that created this Notification
func (en *V1ChargeFailedEventNotification) FetchEvent(ctx context.Context) (*V1ChargeFailedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1ChargeFailedEvent), nil
}

// FetchRelatedObject fetches the Charge related to the event.
func (en *V1ChargeFailedEventNotification) FetchRelatedObject(ctx context.Context) (*Charge, error) {
	relatedObj := &Charge{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1ChargePendingEvent is the Go struct for the "v1.charge.pending" event.
// Occurs whenever a pending charge is created.
type V1ChargePendingEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Charge, error)
}

// FetchRelatedObject fetches the Charge related to the event.
func (e *V1ChargePendingEvent) FetchRelatedObject(ctx context.Context) (*Charge, error) {
	return e.fetchRelatedObject()
}

// V1ChargePendingEventNotification is the webhook payload you'll get when handling an event with type "v1.charge.pending"
// Occurs whenever a pending charge is created.
type V1ChargePendingEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1ChargePendingEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1ChargePendingEvent that created this Notification
func (en *V1ChargePendingEventNotification) FetchEvent(ctx context.Context) (*V1ChargePendingEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1ChargePendingEvent), nil
}

// FetchRelatedObject fetches the Charge related to the event.
func (en *V1ChargePendingEventNotification) FetchRelatedObject(ctx context.Context) (*Charge, error) {
	relatedObj := &Charge{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1ChargeRefundUpdatedEvent is the Go struct for the "v1.charge.refund.updated" event.
// Occurs whenever a refund is updated on selected payment methods. For updates on all refunds, listen to `refund.updated` instead.
type V1ChargeRefundUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Refund, error)
}

// FetchRelatedObject fetches the Refund related to the event.
func (e *V1ChargeRefundUpdatedEvent) FetchRelatedObject(ctx context.Context) (*Refund, error) {
	return e.fetchRelatedObject()
}

// V1ChargeRefundUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v1.charge.refund.updated"
// Occurs whenever a refund is updated on selected payment methods. For updates on all refunds, listen to `refund.updated` instead.
type V1ChargeRefundUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1ChargeRefundUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1ChargeRefundUpdatedEvent that created this Notification
func (en *V1ChargeRefundUpdatedEventNotification) FetchEvent(ctx context.Context) (*V1ChargeRefundUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1ChargeRefundUpdatedEvent), nil
}

// FetchRelatedObject fetches the Refund related to the event.
func (en *V1ChargeRefundUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*Refund, error) {
	relatedObj := &Refund{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1ChargeRefundedEvent is the Go struct for the "v1.charge.refunded" event.
// Occurs whenever a charge is refunded, including partial refunds. Listen to `refund.created` for information about the refund.
type V1ChargeRefundedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Charge, error)
}

// FetchRelatedObject fetches the Charge related to the event.
func (e *V1ChargeRefundedEvent) FetchRelatedObject(ctx context.Context) (*Charge, error) {
	return e.fetchRelatedObject()
}

// V1ChargeRefundedEventNotification is the webhook payload you'll get when handling an event with type "v1.charge.refunded"
// Occurs whenever a charge is refunded, including partial refunds. Listen to `refund.created` for information about the refund.
type V1ChargeRefundedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1ChargeRefundedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1ChargeRefundedEvent that created this Notification
func (en *V1ChargeRefundedEventNotification) FetchEvent(ctx context.Context) (*V1ChargeRefundedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1ChargeRefundedEvent), nil
}

// FetchRelatedObject fetches the Charge related to the event.
func (en *V1ChargeRefundedEventNotification) FetchRelatedObject(ctx context.Context) (*Charge, error) {
	relatedObj := &Charge{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1ChargeSucceededEvent is the Go struct for the "v1.charge.succeeded" event.
// Occurs whenever a charge is successful.
type V1ChargeSucceededEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Charge, error)
}

// FetchRelatedObject fetches the Charge related to the event.
func (e *V1ChargeSucceededEvent) FetchRelatedObject(ctx context.Context) (*Charge, error) {
	return e.fetchRelatedObject()
}

// V1ChargeSucceededEventNotification is the webhook payload you'll get when handling an event with type "v1.charge.succeeded"
// Occurs whenever a charge is successful.
type V1ChargeSucceededEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1ChargeSucceededEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1ChargeSucceededEvent that created this Notification
func (en *V1ChargeSucceededEventNotification) FetchEvent(ctx context.Context) (*V1ChargeSucceededEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1ChargeSucceededEvent), nil
}

// FetchRelatedObject fetches the Charge related to the event.
func (en *V1ChargeSucceededEventNotification) FetchRelatedObject(ctx context.Context) (*Charge, error) {
	relatedObj := &Charge{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1ChargeUpdatedEvent is the Go struct for the "v1.charge.updated" event.
// Occurs whenever a charge description or metadata is updated, or upon an asynchronous capture.
type V1ChargeUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Charge, error)
}

// FetchRelatedObject fetches the Charge related to the event.
func (e *V1ChargeUpdatedEvent) FetchRelatedObject(ctx context.Context) (*Charge, error) {
	return e.fetchRelatedObject()
}

// V1ChargeUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v1.charge.updated"
// Occurs whenever a charge description or metadata is updated, or upon an asynchronous capture.
type V1ChargeUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1ChargeUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1ChargeUpdatedEvent that created this Notification
func (en *V1ChargeUpdatedEventNotification) FetchEvent(ctx context.Context) (*V1ChargeUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1ChargeUpdatedEvent), nil
}

// FetchRelatedObject fetches the Charge related to the event.
func (en *V1ChargeUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*Charge, error) {
	relatedObj := &Charge{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1CheckoutSessionAsyncPaymentFailedEvent is the Go struct for the "v1.checkout.session.async_payment_failed" event.
// Occurs when a payment intent using a delayed payment method fails.
type V1CheckoutSessionAsyncPaymentFailedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*CheckoutSession, error)
}

// FetchRelatedObject fetches the CheckoutSession related to the event.
func (e *V1CheckoutSessionAsyncPaymentFailedEvent) FetchRelatedObject(ctx context.Context) (*CheckoutSession, error) {
	return e.fetchRelatedObject()
}

// V1CheckoutSessionAsyncPaymentFailedEventNotification is the webhook payload you'll get when handling an event with type "v1.checkout.session.async_payment_failed"
// Occurs when a payment intent using a delayed payment method fails.
type V1CheckoutSessionAsyncPaymentFailedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1CheckoutSessionAsyncPaymentFailedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1CheckoutSessionAsyncPaymentFailedEvent that created this Notification
func (en *V1CheckoutSessionAsyncPaymentFailedEventNotification) FetchEvent(ctx context.Context) (*V1CheckoutSessionAsyncPaymentFailedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1CheckoutSessionAsyncPaymentFailedEvent), nil
}

// FetchRelatedObject fetches the CheckoutSession related to the event.
func (en *V1CheckoutSessionAsyncPaymentFailedEventNotification) FetchRelatedObject(ctx context.Context) (*CheckoutSession, error) {
	relatedObj := &CheckoutSession{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1CheckoutSessionAsyncPaymentSucceededEvent is the Go struct for the "v1.checkout.session.async_payment_succeeded" event.
// Occurs when a payment intent using a delayed payment method finally succeeds.
type V1CheckoutSessionAsyncPaymentSucceededEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*CheckoutSession, error)
}

// FetchRelatedObject fetches the CheckoutSession related to the event.
func (e *V1CheckoutSessionAsyncPaymentSucceededEvent) FetchRelatedObject(ctx context.Context) (*CheckoutSession, error) {
	return e.fetchRelatedObject()
}

// V1CheckoutSessionAsyncPaymentSucceededEventNotification is the webhook payload you'll get when handling an event with type "v1.checkout.session.async_payment_succeeded"
// Occurs when a payment intent using a delayed payment method finally succeeds.
type V1CheckoutSessionAsyncPaymentSucceededEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1CheckoutSessionAsyncPaymentSucceededEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1CheckoutSessionAsyncPaymentSucceededEvent that created this Notification
func (en *V1CheckoutSessionAsyncPaymentSucceededEventNotification) FetchEvent(ctx context.Context) (*V1CheckoutSessionAsyncPaymentSucceededEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1CheckoutSessionAsyncPaymentSucceededEvent), nil
}

// FetchRelatedObject fetches the CheckoutSession related to the event.
func (en *V1CheckoutSessionAsyncPaymentSucceededEventNotification) FetchRelatedObject(ctx context.Context) (*CheckoutSession, error) {
	relatedObj := &CheckoutSession{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1CheckoutSessionCompletedEvent is the Go struct for the "v1.checkout.session.completed" event.
// Occurs when a Checkout Session has been successfully completed.
type V1CheckoutSessionCompletedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*CheckoutSession, error)
}

// FetchRelatedObject fetches the CheckoutSession related to the event.
func (e *V1CheckoutSessionCompletedEvent) FetchRelatedObject(ctx context.Context) (*CheckoutSession, error) {
	return e.fetchRelatedObject()
}

// V1CheckoutSessionCompletedEventNotification is the webhook payload you'll get when handling an event with type "v1.checkout.session.completed"
// Occurs when a Checkout Session has been successfully completed.
type V1CheckoutSessionCompletedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1CheckoutSessionCompletedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1CheckoutSessionCompletedEvent that created this Notification
func (en *V1CheckoutSessionCompletedEventNotification) FetchEvent(ctx context.Context) (*V1CheckoutSessionCompletedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1CheckoutSessionCompletedEvent), nil
}

// FetchRelatedObject fetches the CheckoutSession related to the event.
func (en *V1CheckoutSessionCompletedEventNotification) FetchRelatedObject(ctx context.Context) (*CheckoutSession, error) {
	relatedObj := &CheckoutSession{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1CheckoutSessionExpiredEvent is the Go struct for the "v1.checkout.session.expired" event.
// Occurs when a Checkout Session is expired.
type V1CheckoutSessionExpiredEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*CheckoutSession, error)
}

// FetchRelatedObject fetches the CheckoutSession related to the event.
func (e *V1CheckoutSessionExpiredEvent) FetchRelatedObject(ctx context.Context) (*CheckoutSession, error) {
	return e.fetchRelatedObject()
}

// V1CheckoutSessionExpiredEventNotification is the webhook payload you'll get when handling an event with type "v1.checkout.session.expired"
// Occurs when a Checkout Session is expired.
type V1CheckoutSessionExpiredEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1CheckoutSessionExpiredEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1CheckoutSessionExpiredEvent that created this Notification
func (en *V1CheckoutSessionExpiredEventNotification) FetchEvent(ctx context.Context) (*V1CheckoutSessionExpiredEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1CheckoutSessionExpiredEvent), nil
}

// FetchRelatedObject fetches the CheckoutSession related to the event.
func (en *V1CheckoutSessionExpiredEventNotification) FetchRelatedObject(ctx context.Context) (*CheckoutSession, error) {
	relatedObj := &CheckoutSession{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1ClimateOrderCanceledEvent is the Go struct for the "v1.climate.order.canceled" event.
// Occurs when a Climate order is canceled.
type V1ClimateOrderCanceledEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*ClimateOrder, error)
}

// FetchRelatedObject fetches the ClimateOrder related to the event.
func (e *V1ClimateOrderCanceledEvent) FetchRelatedObject(ctx context.Context) (*ClimateOrder, error) {
	return e.fetchRelatedObject()
}

// V1ClimateOrderCanceledEventNotification is the webhook payload you'll get when handling an event with type "v1.climate.order.canceled"
// Occurs when a Climate order is canceled.
type V1ClimateOrderCanceledEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1ClimateOrderCanceledEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1ClimateOrderCanceledEvent that created this Notification
func (en *V1ClimateOrderCanceledEventNotification) FetchEvent(ctx context.Context) (*V1ClimateOrderCanceledEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1ClimateOrderCanceledEvent), nil
}

// FetchRelatedObject fetches the ClimateOrder related to the event.
func (en *V1ClimateOrderCanceledEventNotification) FetchRelatedObject(ctx context.Context) (*ClimateOrder, error) {
	relatedObj := &ClimateOrder{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1ClimateOrderCreatedEvent is the Go struct for the "v1.climate.order.created" event.
// Occurs when a Climate order is created.
type V1ClimateOrderCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*ClimateOrder, error)
}

// FetchRelatedObject fetches the ClimateOrder related to the event.
func (e *V1ClimateOrderCreatedEvent) FetchRelatedObject(ctx context.Context) (*ClimateOrder, error) {
	return e.fetchRelatedObject()
}

// V1ClimateOrderCreatedEventNotification is the webhook payload you'll get when handling an event with type "v1.climate.order.created"
// Occurs when a Climate order is created.
type V1ClimateOrderCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1ClimateOrderCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1ClimateOrderCreatedEvent that created this Notification
func (en *V1ClimateOrderCreatedEventNotification) FetchEvent(ctx context.Context) (*V1ClimateOrderCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1ClimateOrderCreatedEvent), nil
}

// FetchRelatedObject fetches the ClimateOrder related to the event.
func (en *V1ClimateOrderCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*ClimateOrder, error) {
	relatedObj := &ClimateOrder{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1ClimateOrderDelayedEvent is the Go struct for the "v1.climate.order.delayed" event.
// Occurs when a Climate order is delayed.
type V1ClimateOrderDelayedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*ClimateOrder, error)
}

// FetchRelatedObject fetches the ClimateOrder related to the event.
func (e *V1ClimateOrderDelayedEvent) FetchRelatedObject(ctx context.Context) (*ClimateOrder, error) {
	return e.fetchRelatedObject()
}

// V1ClimateOrderDelayedEventNotification is the webhook payload you'll get when handling an event with type "v1.climate.order.delayed"
// Occurs when a Climate order is delayed.
type V1ClimateOrderDelayedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1ClimateOrderDelayedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1ClimateOrderDelayedEvent that created this Notification
func (en *V1ClimateOrderDelayedEventNotification) FetchEvent(ctx context.Context) (*V1ClimateOrderDelayedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1ClimateOrderDelayedEvent), nil
}

// FetchRelatedObject fetches the ClimateOrder related to the event.
func (en *V1ClimateOrderDelayedEventNotification) FetchRelatedObject(ctx context.Context) (*ClimateOrder, error) {
	relatedObj := &ClimateOrder{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1ClimateOrderDeliveredEvent is the Go struct for the "v1.climate.order.delivered" event.
// Occurs when a Climate order is delivered.
type V1ClimateOrderDeliveredEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*ClimateOrder, error)
}

// FetchRelatedObject fetches the ClimateOrder related to the event.
func (e *V1ClimateOrderDeliveredEvent) FetchRelatedObject(ctx context.Context) (*ClimateOrder, error) {
	return e.fetchRelatedObject()
}

// V1ClimateOrderDeliveredEventNotification is the webhook payload you'll get when handling an event with type "v1.climate.order.delivered"
// Occurs when a Climate order is delivered.
type V1ClimateOrderDeliveredEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1ClimateOrderDeliveredEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1ClimateOrderDeliveredEvent that created this Notification
func (en *V1ClimateOrderDeliveredEventNotification) FetchEvent(ctx context.Context) (*V1ClimateOrderDeliveredEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1ClimateOrderDeliveredEvent), nil
}

// FetchRelatedObject fetches the ClimateOrder related to the event.
func (en *V1ClimateOrderDeliveredEventNotification) FetchRelatedObject(ctx context.Context) (*ClimateOrder, error) {
	relatedObj := &ClimateOrder{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1ClimateOrderProductSubstitutedEvent is the Go struct for the "v1.climate.order.product_substituted" event.
// Occurs when a Climate order's product is substituted for another.
type V1ClimateOrderProductSubstitutedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*ClimateOrder, error)
}

// FetchRelatedObject fetches the ClimateOrder related to the event.
func (e *V1ClimateOrderProductSubstitutedEvent) FetchRelatedObject(ctx context.Context) (*ClimateOrder, error) {
	return e.fetchRelatedObject()
}

// V1ClimateOrderProductSubstitutedEventNotification is the webhook payload you'll get when handling an event with type "v1.climate.order.product_substituted"
// Occurs when a Climate order's product is substituted for another.
type V1ClimateOrderProductSubstitutedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1ClimateOrderProductSubstitutedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1ClimateOrderProductSubstitutedEvent that created this Notification
func (en *V1ClimateOrderProductSubstitutedEventNotification) FetchEvent(ctx context.Context) (*V1ClimateOrderProductSubstitutedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1ClimateOrderProductSubstitutedEvent), nil
}

// FetchRelatedObject fetches the ClimateOrder related to the event.
func (en *V1ClimateOrderProductSubstitutedEventNotification) FetchRelatedObject(ctx context.Context) (*ClimateOrder, error) {
	relatedObj := &ClimateOrder{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1ClimateProductCreatedEvent is the Go struct for the "v1.climate.product.created" event.
// Occurs when a Climate product is created.
type V1ClimateProductCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*ClimateProduct, error)
}

// FetchRelatedObject fetches the ClimateProduct related to the event.
func (e *V1ClimateProductCreatedEvent) FetchRelatedObject(ctx context.Context) (*ClimateProduct, error) {
	return e.fetchRelatedObject()
}

// V1ClimateProductCreatedEventNotification is the webhook payload you'll get when handling an event with type "v1.climate.product.created"
// Occurs when a Climate product is created.
type V1ClimateProductCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1ClimateProductCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1ClimateProductCreatedEvent that created this Notification
func (en *V1ClimateProductCreatedEventNotification) FetchEvent(ctx context.Context) (*V1ClimateProductCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1ClimateProductCreatedEvent), nil
}

// FetchRelatedObject fetches the ClimateProduct related to the event.
func (en *V1ClimateProductCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*ClimateProduct, error) {
	relatedObj := &ClimateProduct{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1ClimateProductPricingUpdatedEvent is the Go struct for the "v1.climate.product.pricing_updated" event.
// Occurs when a Climate product is updated.
type V1ClimateProductPricingUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*ClimateProduct, error)
}

// FetchRelatedObject fetches the ClimateProduct related to the event.
func (e *V1ClimateProductPricingUpdatedEvent) FetchRelatedObject(ctx context.Context) (*ClimateProduct, error) {
	return e.fetchRelatedObject()
}

// V1ClimateProductPricingUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v1.climate.product.pricing_updated"
// Occurs when a Climate product is updated.
type V1ClimateProductPricingUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1ClimateProductPricingUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1ClimateProductPricingUpdatedEvent that created this Notification
func (en *V1ClimateProductPricingUpdatedEventNotification) FetchEvent(ctx context.Context) (*V1ClimateProductPricingUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1ClimateProductPricingUpdatedEvent), nil
}

// FetchRelatedObject fetches the ClimateProduct related to the event.
func (en *V1ClimateProductPricingUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*ClimateProduct, error) {
	relatedObj := &ClimateProduct{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1CouponCreatedEvent is the Go struct for the "v1.coupon.created" event.
// Occurs whenever a coupon is created.
type V1CouponCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Coupon, error)
}

// FetchRelatedObject fetches the Coupon related to the event.
func (e *V1CouponCreatedEvent) FetchRelatedObject(ctx context.Context) (*Coupon, error) {
	return e.fetchRelatedObject()
}

// V1CouponCreatedEventNotification is the webhook payload you'll get when handling an event with type "v1.coupon.created"
// Occurs whenever a coupon is created.
type V1CouponCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1CouponCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1CouponCreatedEvent that created this Notification
func (en *V1CouponCreatedEventNotification) FetchEvent(ctx context.Context) (*V1CouponCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1CouponCreatedEvent), nil
}

// FetchRelatedObject fetches the Coupon related to the event.
func (en *V1CouponCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*Coupon, error) {
	relatedObj := &Coupon{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1CouponDeletedEvent is the Go struct for the "v1.coupon.deleted" event.
// Occurs whenever a coupon is deleted.
type V1CouponDeletedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Coupon, error)
}

// FetchRelatedObject fetches the Coupon related to the event.
func (e *V1CouponDeletedEvent) FetchRelatedObject(ctx context.Context) (*Coupon, error) {
	return e.fetchRelatedObject()
}

// V1CouponDeletedEventNotification is the webhook payload you'll get when handling an event with type "v1.coupon.deleted"
// Occurs whenever a coupon is deleted.
type V1CouponDeletedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1CouponDeletedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1CouponDeletedEvent that created this Notification
func (en *V1CouponDeletedEventNotification) FetchEvent(ctx context.Context) (*V1CouponDeletedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1CouponDeletedEvent), nil
}

// FetchRelatedObject fetches the Coupon related to the event.
func (en *V1CouponDeletedEventNotification) FetchRelatedObject(ctx context.Context) (*Coupon, error) {
	relatedObj := &Coupon{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1CouponUpdatedEvent is the Go struct for the "v1.coupon.updated" event.
// Occurs whenever a coupon is updated.
type V1CouponUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Coupon, error)
}

// FetchRelatedObject fetches the Coupon related to the event.
func (e *V1CouponUpdatedEvent) FetchRelatedObject(ctx context.Context) (*Coupon, error) {
	return e.fetchRelatedObject()
}

// V1CouponUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v1.coupon.updated"
// Occurs whenever a coupon is updated.
type V1CouponUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1CouponUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1CouponUpdatedEvent that created this Notification
func (en *V1CouponUpdatedEventNotification) FetchEvent(ctx context.Context) (*V1CouponUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1CouponUpdatedEvent), nil
}

// FetchRelatedObject fetches the Coupon related to the event.
func (en *V1CouponUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*Coupon, error) {
	relatedObj := &Coupon{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1CreditNoteCreatedEvent is the Go struct for the "v1.credit_note.created" event.
// Occurs whenever a credit note is created.
type V1CreditNoteCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*CreditNote, error)
}

// FetchRelatedObject fetches the CreditNote related to the event.
func (e *V1CreditNoteCreatedEvent) FetchRelatedObject(ctx context.Context) (*CreditNote, error) {
	return e.fetchRelatedObject()
}

// V1CreditNoteCreatedEventNotification is the webhook payload you'll get when handling an event with type "v1.credit_note.created"
// Occurs whenever a credit note is created.
type V1CreditNoteCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1CreditNoteCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1CreditNoteCreatedEvent that created this Notification
func (en *V1CreditNoteCreatedEventNotification) FetchEvent(ctx context.Context) (*V1CreditNoteCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1CreditNoteCreatedEvent), nil
}

// FetchRelatedObject fetches the CreditNote related to the event.
func (en *V1CreditNoteCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*CreditNote, error) {
	relatedObj := &CreditNote{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1CreditNoteUpdatedEvent is the Go struct for the "v1.credit_note.updated" event.
// Occurs whenever a credit note is updated.
type V1CreditNoteUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*CreditNote, error)
}

// FetchRelatedObject fetches the CreditNote related to the event.
func (e *V1CreditNoteUpdatedEvent) FetchRelatedObject(ctx context.Context) (*CreditNote, error) {
	return e.fetchRelatedObject()
}

// V1CreditNoteUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v1.credit_note.updated"
// Occurs whenever a credit note is updated.
type V1CreditNoteUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1CreditNoteUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1CreditNoteUpdatedEvent that created this Notification
func (en *V1CreditNoteUpdatedEventNotification) FetchEvent(ctx context.Context) (*V1CreditNoteUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1CreditNoteUpdatedEvent), nil
}

// FetchRelatedObject fetches the CreditNote related to the event.
func (en *V1CreditNoteUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*CreditNote, error) {
	relatedObj := &CreditNote{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1CreditNoteVoidedEvent is the Go struct for the "v1.credit_note.voided" event.
// Occurs whenever a credit note is voided.
type V1CreditNoteVoidedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*CreditNote, error)
}

// FetchRelatedObject fetches the CreditNote related to the event.
func (e *V1CreditNoteVoidedEvent) FetchRelatedObject(ctx context.Context) (*CreditNote, error) {
	return e.fetchRelatedObject()
}

// V1CreditNoteVoidedEventNotification is the webhook payload you'll get when handling an event with type "v1.credit_note.voided"
// Occurs whenever a credit note is voided.
type V1CreditNoteVoidedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1CreditNoteVoidedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1CreditNoteVoidedEvent that created this Notification
func (en *V1CreditNoteVoidedEventNotification) FetchEvent(ctx context.Context) (*V1CreditNoteVoidedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1CreditNoteVoidedEvent), nil
}

// FetchRelatedObject fetches the CreditNote related to the event.
func (en *V1CreditNoteVoidedEventNotification) FetchRelatedObject(ctx context.Context) (*CreditNote, error) {
	relatedObj := &CreditNote{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1CustomerCreatedEvent is the Go struct for the "v1.customer.created" event.
// Occurs whenever a new customer is created.
type V1CustomerCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Customer, error)
}

// FetchRelatedObject fetches the Customer related to the event.
func (e *V1CustomerCreatedEvent) FetchRelatedObject(ctx context.Context) (*Customer, error) {
	return e.fetchRelatedObject()
}

// V1CustomerCreatedEventNotification is the webhook payload you'll get when handling an event with type "v1.customer.created"
// Occurs whenever a new customer is created.
type V1CustomerCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1CustomerCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1CustomerCreatedEvent that created this Notification
func (en *V1CustomerCreatedEventNotification) FetchEvent(ctx context.Context) (*V1CustomerCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1CustomerCreatedEvent), nil
}

// FetchRelatedObject fetches the Customer related to the event.
func (en *V1CustomerCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*Customer, error) {
	relatedObj := &Customer{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1CustomerDeletedEvent is the Go struct for the "v1.customer.deleted" event.
// Occurs whenever a customer is deleted.
type V1CustomerDeletedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Customer, error)
}

// FetchRelatedObject fetches the Customer related to the event.
func (e *V1CustomerDeletedEvent) FetchRelatedObject(ctx context.Context) (*Customer, error) {
	return e.fetchRelatedObject()
}

// V1CustomerDeletedEventNotification is the webhook payload you'll get when handling an event with type "v1.customer.deleted"
// Occurs whenever a customer is deleted.
type V1CustomerDeletedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1CustomerDeletedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1CustomerDeletedEvent that created this Notification
func (en *V1CustomerDeletedEventNotification) FetchEvent(ctx context.Context) (*V1CustomerDeletedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1CustomerDeletedEvent), nil
}

// FetchRelatedObject fetches the Customer related to the event.
func (en *V1CustomerDeletedEventNotification) FetchRelatedObject(ctx context.Context) (*Customer, error) {
	relatedObj := &Customer{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1CustomerDiscountCreatedEvent is the Go struct for the "v1.customer.discount.created" event.
// Occurs whenever a coupon is attached to a customer.
type V1CustomerDiscountCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Discount, error)
}

// FetchRelatedObject fetches the Discount related to the event.
func (e *V1CustomerDiscountCreatedEvent) FetchRelatedObject(ctx context.Context) (*Discount, error) {
	return e.fetchRelatedObject()
}

// V1CustomerDiscountCreatedEventNotification is the webhook payload you'll get when handling an event with type "v1.customer.discount.created"
// Occurs whenever a coupon is attached to a customer.
type V1CustomerDiscountCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1CustomerDiscountCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1CustomerDiscountCreatedEvent that created this Notification
func (en *V1CustomerDiscountCreatedEventNotification) FetchEvent(ctx context.Context) (*V1CustomerDiscountCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1CustomerDiscountCreatedEvent), nil
}

// FetchRelatedObject fetches the Discount related to the event.
func (en *V1CustomerDiscountCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*Discount, error) {
	relatedObj := &Discount{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1CustomerDiscountDeletedEvent is the Go struct for the "v1.customer.discount.deleted" event.
// Occurs whenever a coupon is removed from a customer.
type V1CustomerDiscountDeletedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Discount, error)
}

// FetchRelatedObject fetches the Discount related to the event.
func (e *V1CustomerDiscountDeletedEvent) FetchRelatedObject(ctx context.Context) (*Discount, error) {
	return e.fetchRelatedObject()
}

// V1CustomerDiscountDeletedEventNotification is the webhook payload you'll get when handling an event with type "v1.customer.discount.deleted"
// Occurs whenever a coupon is removed from a customer.
type V1CustomerDiscountDeletedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1CustomerDiscountDeletedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1CustomerDiscountDeletedEvent that created this Notification
func (en *V1CustomerDiscountDeletedEventNotification) FetchEvent(ctx context.Context) (*V1CustomerDiscountDeletedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1CustomerDiscountDeletedEvent), nil
}

// FetchRelatedObject fetches the Discount related to the event.
func (en *V1CustomerDiscountDeletedEventNotification) FetchRelatedObject(ctx context.Context) (*Discount, error) {
	relatedObj := &Discount{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1CustomerDiscountUpdatedEvent is the Go struct for the "v1.customer.discount.updated" event.
// Occurs whenever a customer is switched from one coupon to another.
type V1CustomerDiscountUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Discount, error)
}

// FetchRelatedObject fetches the Discount related to the event.
func (e *V1CustomerDiscountUpdatedEvent) FetchRelatedObject(ctx context.Context) (*Discount, error) {
	return e.fetchRelatedObject()
}

// V1CustomerDiscountUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v1.customer.discount.updated"
// Occurs whenever a customer is switched from one coupon to another.
type V1CustomerDiscountUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1CustomerDiscountUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1CustomerDiscountUpdatedEvent that created this Notification
func (en *V1CustomerDiscountUpdatedEventNotification) FetchEvent(ctx context.Context) (*V1CustomerDiscountUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1CustomerDiscountUpdatedEvent), nil
}

// FetchRelatedObject fetches the Discount related to the event.
func (en *V1CustomerDiscountUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*Discount, error) {
	relatedObj := &Discount{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1CustomerSubscriptionCreatedEvent is the Go struct for the "v1.customer.subscription.created" event.
// Occurs whenever a customer is signed up for a new plan.
type V1CustomerSubscriptionCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Subscription, error)
}

// FetchRelatedObject fetches the Subscription related to the event.
func (e *V1CustomerSubscriptionCreatedEvent) FetchRelatedObject(ctx context.Context) (*Subscription, error) {
	return e.fetchRelatedObject()
}

// V1CustomerSubscriptionCreatedEventNotification is the webhook payload you'll get when handling an event with type "v1.customer.subscription.created"
// Occurs whenever a customer is signed up for a new plan.
type V1CustomerSubscriptionCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1CustomerSubscriptionCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1CustomerSubscriptionCreatedEvent that created this Notification
func (en *V1CustomerSubscriptionCreatedEventNotification) FetchEvent(ctx context.Context) (*V1CustomerSubscriptionCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1CustomerSubscriptionCreatedEvent), nil
}

// FetchRelatedObject fetches the Subscription related to the event.
func (en *V1CustomerSubscriptionCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*Subscription, error) {
	relatedObj := &Subscription{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1CustomerSubscriptionDeletedEvent is the Go struct for the "v1.customer.subscription.deleted" event.
// Occurs whenever a customer's subscription ends.
type V1CustomerSubscriptionDeletedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Subscription, error)
}

// FetchRelatedObject fetches the Subscription related to the event.
func (e *V1CustomerSubscriptionDeletedEvent) FetchRelatedObject(ctx context.Context) (*Subscription, error) {
	return e.fetchRelatedObject()
}

// V1CustomerSubscriptionDeletedEventNotification is the webhook payload you'll get when handling an event with type "v1.customer.subscription.deleted"
// Occurs whenever a customer's subscription ends.
type V1CustomerSubscriptionDeletedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1CustomerSubscriptionDeletedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1CustomerSubscriptionDeletedEvent that created this Notification
func (en *V1CustomerSubscriptionDeletedEventNotification) FetchEvent(ctx context.Context) (*V1CustomerSubscriptionDeletedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1CustomerSubscriptionDeletedEvent), nil
}

// FetchRelatedObject fetches the Subscription related to the event.
func (en *V1CustomerSubscriptionDeletedEventNotification) FetchRelatedObject(ctx context.Context) (*Subscription, error) {
	relatedObj := &Subscription{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1CustomerSubscriptionPausedEvent is the Go struct for the "v1.customer.subscription.paused" event.
// Occurs whenever a customer's subscription is paused. Only applies when subscriptions enter `status=paused`, not when [payment collection](https://docs.stripe.com/billing/subscriptions/pause) is paused.
type V1CustomerSubscriptionPausedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Subscription, error)
}

// FetchRelatedObject fetches the Subscription related to the event.
func (e *V1CustomerSubscriptionPausedEvent) FetchRelatedObject(ctx context.Context) (*Subscription, error) {
	return e.fetchRelatedObject()
}

// V1CustomerSubscriptionPausedEventNotification is the webhook payload you'll get when handling an event with type "v1.customer.subscription.paused"
// Occurs whenever a customer's subscription is paused. Only applies when subscriptions enter `status=paused`, not when [payment collection](https://docs.stripe.com/billing/subscriptions/pause) is paused.
type V1CustomerSubscriptionPausedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1CustomerSubscriptionPausedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1CustomerSubscriptionPausedEvent that created this Notification
func (en *V1CustomerSubscriptionPausedEventNotification) FetchEvent(ctx context.Context) (*V1CustomerSubscriptionPausedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1CustomerSubscriptionPausedEvent), nil
}

// FetchRelatedObject fetches the Subscription related to the event.
func (en *V1CustomerSubscriptionPausedEventNotification) FetchRelatedObject(ctx context.Context) (*Subscription, error) {
	relatedObj := &Subscription{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1CustomerSubscriptionPendingUpdateAppliedEvent is the Go struct for the "v1.customer.subscription.pending_update_applied" event.
// Occurs whenever a customer's subscription's pending update is applied, and the subscription is updated.
type V1CustomerSubscriptionPendingUpdateAppliedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Subscription, error)
}

// FetchRelatedObject fetches the Subscription related to the event.
func (e *V1CustomerSubscriptionPendingUpdateAppliedEvent) FetchRelatedObject(ctx context.Context) (*Subscription, error) {
	return e.fetchRelatedObject()
}

// V1CustomerSubscriptionPendingUpdateAppliedEventNotification is the webhook payload you'll get when handling an event with type "v1.customer.subscription.pending_update_applied"
// Occurs whenever a customer's subscription's pending update is applied, and the subscription is updated.
type V1CustomerSubscriptionPendingUpdateAppliedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1CustomerSubscriptionPendingUpdateAppliedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1CustomerSubscriptionPendingUpdateAppliedEvent that created this Notification
func (en *V1CustomerSubscriptionPendingUpdateAppliedEventNotification) FetchEvent(ctx context.Context) (*V1CustomerSubscriptionPendingUpdateAppliedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1CustomerSubscriptionPendingUpdateAppliedEvent), nil
}

// FetchRelatedObject fetches the Subscription related to the event.
func (en *V1CustomerSubscriptionPendingUpdateAppliedEventNotification) FetchRelatedObject(ctx context.Context) (*Subscription, error) {
	relatedObj := &Subscription{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1CustomerSubscriptionPendingUpdateExpiredEvent is the Go struct for the "v1.customer.subscription.pending_update_expired" event.
// Occurs whenever a customer's subscription's pending update expires before the related invoice is paid.
type V1CustomerSubscriptionPendingUpdateExpiredEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Subscription, error)
}

// FetchRelatedObject fetches the Subscription related to the event.
func (e *V1CustomerSubscriptionPendingUpdateExpiredEvent) FetchRelatedObject(ctx context.Context) (*Subscription, error) {
	return e.fetchRelatedObject()
}

// V1CustomerSubscriptionPendingUpdateExpiredEventNotification is the webhook payload you'll get when handling an event with type "v1.customer.subscription.pending_update_expired"
// Occurs whenever a customer's subscription's pending update expires before the related invoice is paid.
type V1CustomerSubscriptionPendingUpdateExpiredEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1CustomerSubscriptionPendingUpdateExpiredEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1CustomerSubscriptionPendingUpdateExpiredEvent that created this Notification
func (en *V1CustomerSubscriptionPendingUpdateExpiredEventNotification) FetchEvent(ctx context.Context) (*V1CustomerSubscriptionPendingUpdateExpiredEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1CustomerSubscriptionPendingUpdateExpiredEvent), nil
}

// FetchRelatedObject fetches the Subscription related to the event.
func (en *V1CustomerSubscriptionPendingUpdateExpiredEventNotification) FetchRelatedObject(ctx context.Context) (*Subscription, error) {
	relatedObj := &Subscription{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1CustomerSubscriptionResumedEvent is the Go struct for the "v1.customer.subscription.resumed" event.
// Occurs whenever a customer's subscription is no longer paused. Only applies when a `status=paused` subscription is [resumed](https://docs.stripe.com/api/subscriptions/resume), not when [payment collection](https://docs.stripe.com/billing/subscriptions/pause) is resumed.
type V1CustomerSubscriptionResumedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Subscription, error)
}

// FetchRelatedObject fetches the Subscription related to the event.
func (e *V1CustomerSubscriptionResumedEvent) FetchRelatedObject(ctx context.Context) (*Subscription, error) {
	return e.fetchRelatedObject()
}

// V1CustomerSubscriptionResumedEventNotification is the webhook payload you'll get when handling an event with type "v1.customer.subscription.resumed"
// Occurs whenever a customer's subscription is no longer paused. Only applies when a `status=paused` subscription is [resumed](https://docs.stripe.com/api/subscriptions/resume), not when [payment collection](https://docs.stripe.com/billing/subscriptions/pause) is resumed.
type V1CustomerSubscriptionResumedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1CustomerSubscriptionResumedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1CustomerSubscriptionResumedEvent that created this Notification
func (en *V1CustomerSubscriptionResumedEventNotification) FetchEvent(ctx context.Context) (*V1CustomerSubscriptionResumedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1CustomerSubscriptionResumedEvent), nil
}

// FetchRelatedObject fetches the Subscription related to the event.
func (en *V1CustomerSubscriptionResumedEventNotification) FetchRelatedObject(ctx context.Context) (*Subscription, error) {
	relatedObj := &Subscription{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1CustomerSubscriptionTrialWillEndEvent is the Go struct for the "v1.customer.subscription.trial_will_end" event.
// Occurs three days before a subscription's trial period is scheduled to end, or when a trial is ended immediately (using `trial_end=now`).
type V1CustomerSubscriptionTrialWillEndEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Subscription, error)
}

// FetchRelatedObject fetches the Subscription related to the event.
func (e *V1CustomerSubscriptionTrialWillEndEvent) FetchRelatedObject(ctx context.Context) (*Subscription, error) {
	return e.fetchRelatedObject()
}

// V1CustomerSubscriptionTrialWillEndEventNotification is the webhook payload you'll get when handling an event with type "v1.customer.subscription.trial_will_end"
// Occurs three days before a subscription's trial period is scheduled to end, or when a trial is ended immediately (using `trial_end=now`).
type V1CustomerSubscriptionTrialWillEndEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1CustomerSubscriptionTrialWillEndEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1CustomerSubscriptionTrialWillEndEvent that created this Notification
func (en *V1CustomerSubscriptionTrialWillEndEventNotification) FetchEvent(ctx context.Context) (*V1CustomerSubscriptionTrialWillEndEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1CustomerSubscriptionTrialWillEndEvent), nil
}

// FetchRelatedObject fetches the Subscription related to the event.
func (en *V1CustomerSubscriptionTrialWillEndEventNotification) FetchRelatedObject(ctx context.Context) (*Subscription, error) {
	relatedObj := &Subscription{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1CustomerSubscriptionUpdatedEvent is the Go struct for the "v1.customer.subscription.updated" event.
// Occurs whenever a subscription changes (e.g., switching from one plan to another, or changing the status from trial to active).
type V1CustomerSubscriptionUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Subscription, error)
}

// FetchRelatedObject fetches the Subscription related to the event.
func (e *V1CustomerSubscriptionUpdatedEvent) FetchRelatedObject(ctx context.Context) (*Subscription, error) {
	return e.fetchRelatedObject()
}

// V1CustomerSubscriptionUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v1.customer.subscription.updated"
// Occurs whenever a subscription changes (e.g., switching from one plan to another, or changing the status from trial to active).
type V1CustomerSubscriptionUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1CustomerSubscriptionUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1CustomerSubscriptionUpdatedEvent that created this Notification
func (en *V1CustomerSubscriptionUpdatedEventNotification) FetchEvent(ctx context.Context) (*V1CustomerSubscriptionUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1CustomerSubscriptionUpdatedEvent), nil
}

// FetchRelatedObject fetches the Subscription related to the event.
func (en *V1CustomerSubscriptionUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*Subscription, error) {
	relatedObj := &Subscription{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1CustomerTaxIDCreatedEvent is the Go struct for the "v1.customer.tax_id.created" event.
// Occurs whenever a tax ID is created for a customer.
type V1CustomerTaxIDCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*TaxID, error)
}

// FetchRelatedObject fetches the TaxID related to the event.
func (e *V1CustomerTaxIDCreatedEvent) FetchRelatedObject(ctx context.Context) (*TaxID, error) {
	return e.fetchRelatedObject()
}

// V1CustomerTaxIDCreatedEventNotification is the webhook payload you'll get when handling an event with type "v1.customer.tax_id.created"
// Occurs whenever a tax ID is created for a customer.
type V1CustomerTaxIDCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1CustomerTaxIDCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1CustomerTaxIDCreatedEvent that created this Notification
func (en *V1CustomerTaxIDCreatedEventNotification) FetchEvent(ctx context.Context) (*V1CustomerTaxIDCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1CustomerTaxIDCreatedEvent), nil
}

// FetchRelatedObject fetches the TaxID related to the event.
func (en *V1CustomerTaxIDCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*TaxID, error) {
	relatedObj := &TaxID{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1CustomerTaxIDDeletedEvent is the Go struct for the "v1.customer.tax_id.deleted" event.
// Occurs whenever a tax ID is deleted from a customer.
type V1CustomerTaxIDDeletedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*TaxID, error)
}

// FetchRelatedObject fetches the TaxID related to the event.
func (e *V1CustomerTaxIDDeletedEvent) FetchRelatedObject(ctx context.Context) (*TaxID, error) {
	return e.fetchRelatedObject()
}

// V1CustomerTaxIDDeletedEventNotification is the webhook payload you'll get when handling an event with type "v1.customer.tax_id.deleted"
// Occurs whenever a tax ID is deleted from a customer.
type V1CustomerTaxIDDeletedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1CustomerTaxIDDeletedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1CustomerTaxIDDeletedEvent that created this Notification
func (en *V1CustomerTaxIDDeletedEventNotification) FetchEvent(ctx context.Context) (*V1CustomerTaxIDDeletedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1CustomerTaxIDDeletedEvent), nil
}

// FetchRelatedObject fetches the TaxID related to the event.
func (en *V1CustomerTaxIDDeletedEventNotification) FetchRelatedObject(ctx context.Context) (*TaxID, error) {
	relatedObj := &TaxID{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1CustomerTaxIDUpdatedEvent is the Go struct for the "v1.customer.tax_id.updated" event.
// Occurs whenever a customer's tax ID is updated.
type V1CustomerTaxIDUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*TaxID, error)
}

// FetchRelatedObject fetches the TaxID related to the event.
func (e *V1CustomerTaxIDUpdatedEvent) FetchRelatedObject(ctx context.Context) (*TaxID, error) {
	return e.fetchRelatedObject()
}

// V1CustomerTaxIDUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v1.customer.tax_id.updated"
// Occurs whenever a customer's tax ID is updated.
type V1CustomerTaxIDUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1CustomerTaxIDUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1CustomerTaxIDUpdatedEvent that created this Notification
func (en *V1CustomerTaxIDUpdatedEventNotification) FetchEvent(ctx context.Context) (*V1CustomerTaxIDUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1CustomerTaxIDUpdatedEvent), nil
}

// FetchRelatedObject fetches the TaxID related to the event.
func (en *V1CustomerTaxIDUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*TaxID, error) {
	relatedObj := &TaxID{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1CustomerUpdatedEvent is the Go struct for the "v1.customer.updated" event.
// Occurs whenever any property of a customer changes.
type V1CustomerUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Customer, error)
}

// FetchRelatedObject fetches the Customer related to the event.
func (e *V1CustomerUpdatedEvent) FetchRelatedObject(ctx context.Context) (*Customer, error) {
	return e.fetchRelatedObject()
}

// V1CustomerUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v1.customer.updated"
// Occurs whenever any property of a customer changes.
type V1CustomerUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1CustomerUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1CustomerUpdatedEvent that created this Notification
func (en *V1CustomerUpdatedEventNotification) FetchEvent(ctx context.Context) (*V1CustomerUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1CustomerUpdatedEvent), nil
}

// FetchRelatedObject fetches the Customer related to the event.
func (en *V1CustomerUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*Customer, error) {
	relatedObj := &Customer{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1FileCreatedEvent is the Go struct for the "v1.file.created" event.
// Occurs whenever a new Stripe-generated file is available for your account.
type V1FileCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*File, error)
}

// FetchRelatedObject fetches the File related to the event.
func (e *V1FileCreatedEvent) FetchRelatedObject(ctx context.Context) (*File, error) {
	return e.fetchRelatedObject()
}

// V1FileCreatedEventNotification is the webhook payload you'll get when handling an event with type "v1.file.created"
// Occurs whenever a new Stripe-generated file is available for your account.
type V1FileCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1FileCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1FileCreatedEvent that created this Notification
func (en *V1FileCreatedEventNotification) FetchEvent(ctx context.Context) (*V1FileCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1FileCreatedEvent), nil
}

// FetchRelatedObject fetches the File related to the event.
func (en *V1FileCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*File, error) {
	relatedObj := &File{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1FinancialConnectionsAccountCreatedEvent is the Go struct for the "v1.financial_connections.account.created" event.
// Occurs when a new Financial Connections account is created.
type V1FinancialConnectionsAccountCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*FinancialConnectionsAccount, error)
}

// FetchRelatedObject fetches the FinancialConnectionsAccount related to the event.
func (e *V1FinancialConnectionsAccountCreatedEvent) FetchRelatedObject(ctx context.Context) (*FinancialConnectionsAccount, error) {
	return e.fetchRelatedObject()
}

// V1FinancialConnectionsAccountCreatedEventNotification is the webhook payload you'll get when handling an event with type "v1.financial_connections.account.created"
// Occurs when a new Financial Connections account is created.
type V1FinancialConnectionsAccountCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1FinancialConnectionsAccountCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1FinancialConnectionsAccountCreatedEvent that created this Notification
func (en *V1FinancialConnectionsAccountCreatedEventNotification) FetchEvent(ctx context.Context) (*V1FinancialConnectionsAccountCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1FinancialConnectionsAccountCreatedEvent), nil
}

// FetchRelatedObject fetches the FinancialConnectionsAccount related to the event.
func (en *V1FinancialConnectionsAccountCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*FinancialConnectionsAccount, error) {
	relatedObj := &FinancialConnectionsAccount{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1FinancialConnectionsAccountDeactivatedEvent is the Go struct for the "v1.financial_connections.account.deactivated" event.
// Occurs when a Financial Connections account's status is updated from `active` to `inactive`.
type V1FinancialConnectionsAccountDeactivatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*FinancialConnectionsAccount, error)
}

// FetchRelatedObject fetches the FinancialConnectionsAccount related to the event.
func (e *V1FinancialConnectionsAccountDeactivatedEvent) FetchRelatedObject(ctx context.Context) (*FinancialConnectionsAccount, error) {
	return e.fetchRelatedObject()
}

// V1FinancialConnectionsAccountDeactivatedEventNotification is the webhook payload you'll get when handling an event with type "v1.financial_connections.account.deactivated"
// Occurs when a Financial Connections account's status is updated from `active` to `inactive`.
type V1FinancialConnectionsAccountDeactivatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1FinancialConnectionsAccountDeactivatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1FinancialConnectionsAccountDeactivatedEvent that created this Notification
func (en *V1FinancialConnectionsAccountDeactivatedEventNotification) FetchEvent(ctx context.Context) (*V1FinancialConnectionsAccountDeactivatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1FinancialConnectionsAccountDeactivatedEvent), nil
}

// FetchRelatedObject fetches the FinancialConnectionsAccount related to the event.
func (en *V1FinancialConnectionsAccountDeactivatedEventNotification) FetchRelatedObject(ctx context.Context) (*FinancialConnectionsAccount, error) {
	relatedObj := &FinancialConnectionsAccount{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1FinancialConnectionsAccountDisconnectedEvent is the Go struct for the "v1.financial_connections.account.disconnected" event.
// Occurs when a Financial Connections account is disconnected.
type V1FinancialConnectionsAccountDisconnectedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*FinancialConnectionsAccount, error)
}

// FetchRelatedObject fetches the FinancialConnectionsAccount related to the event.
func (e *V1FinancialConnectionsAccountDisconnectedEvent) FetchRelatedObject(ctx context.Context) (*FinancialConnectionsAccount, error) {
	return e.fetchRelatedObject()
}

// V1FinancialConnectionsAccountDisconnectedEventNotification is the webhook payload you'll get when handling an event with type "v1.financial_connections.account.disconnected"
// Occurs when a Financial Connections account is disconnected.
type V1FinancialConnectionsAccountDisconnectedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1FinancialConnectionsAccountDisconnectedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1FinancialConnectionsAccountDisconnectedEvent that created this Notification
func (en *V1FinancialConnectionsAccountDisconnectedEventNotification) FetchEvent(ctx context.Context) (*V1FinancialConnectionsAccountDisconnectedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1FinancialConnectionsAccountDisconnectedEvent), nil
}

// FetchRelatedObject fetches the FinancialConnectionsAccount related to the event.
func (en *V1FinancialConnectionsAccountDisconnectedEventNotification) FetchRelatedObject(ctx context.Context) (*FinancialConnectionsAccount, error) {
	relatedObj := &FinancialConnectionsAccount{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1FinancialConnectionsAccountReactivatedEvent is the Go struct for the "v1.financial_connections.account.reactivated" event.
// Occurs when a Financial Connections account's status is updated from `inactive` to `active`.
type V1FinancialConnectionsAccountReactivatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*FinancialConnectionsAccount, error)
}

// FetchRelatedObject fetches the FinancialConnectionsAccount related to the event.
func (e *V1FinancialConnectionsAccountReactivatedEvent) FetchRelatedObject(ctx context.Context) (*FinancialConnectionsAccount, error) {
	return e.fetchRelatedObject()
}

// V1FinancialConnectionsAccountReactivatedEventNotification is the webhook payload you'll get when handling an event with type "v1.financial_connections.account.reactivated"
// Occurs when a Financial Connections account's status is updated from `inactive` to `active`.
type V1FinancialConnectionsAccountReactivatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1FinancialConnectionsAccountReactivatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1FinancialConnectionsAccountReactivatedEvent that created this Notification
func (en *V1FinancialConnectionsAccountReactivatedEventNotification) FetchEvent(ctx context.Context) (*V1FinancialConnectionsAccountReactivatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1FinancialConnectionsAccountReactivatedEvent), nil
}

// FetchRelatedObject fetches the FinancialConnectionsAccount related to the event.
func (en *V1FinancialConnectionsAccountReactivatedEventNotification) FetchRelatedObject(ctx context.Context) (*FinancialConnectionsAccount, error) {
	relatedObj := &FinancialConnectionsAccount{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1FinancialConnectionsAccountRefreshedBalanceEvent is the Go struct for the "v1.financial_connections.account.refreshed_balance" event.
// Occurs when an Account’s `balance_refresh` status transitions from `pending` to either `succeeded` or `failed`.
type V1FinancialConnectionsAccountRefreshedBalanceEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*FinancialConnectionsAccount, error)
}

// FetchRelatedObject fetches the FinancialConnectionsAccount related to the event.
func (e *V1FinancialConnectionsAccountRefreshedBalanceEvent) FetchRelatedObject(ctx context.Context) (*FinancialConnectionsAccount, error) {
	return e.fetchRelatedObject()
}

// V1FinancialConnectionsAccountRefreshedBalanceEventNotification is the webhook payload you'll get when handling an event with type "v1.financial_connections.account.refreshed_balance"
// Occurs when an Account’s `balance_refresh` status transitions from `pending` to either `succeeded` or `failed`.
type V1FinancialConnectionsAccountRefreshedBalanceEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1FinancialConnectionsAccountRefreshedBalanceEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1FinancialConnectionsAccountRefreshedBalanceEvent that created this Notification
func (en *V1FinancialConnectionsAccountRefreshedBalanceEventNotification) FetchEvent(ctx context.Context) (*V1FinancialConnectionsAccountRefreshedBalanceEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1FinancialConnectionsAccountRefreshedBalanceEvent), nil
}

// FetchRelatedObject fetches the FinancialConnectionsAccount related to the event.
func (en *V1FinancialConnectionsAccountRefreshedBalanceEventNotification) FetchRelatedObject(ctx context.Context) (*FinancialConnectionsAccount, error) {
	relatedObj := &FinancialConnectionsAccount{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1FinancialConnectionsAccountRefreshedOwnershipEvent is the Go struct for the "v1.financial_connections.account.refreshed_ownership" event.
// Occurs when an Account’s `ownership_refresh` status transitions from `pending` to either `succeeded` or `failed`.
type V1FinancialConnectionsAccountRefreshedOwnershipEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*FinancialConnectionsAccount, error)
}

// FetchRelatedObject fetches the FinancialConnectionsAccount related to the event.
func (e *V1FinancialConnectionsAccountRefreshedOwnershipEvent) FetchRelatedObject(ctx context.Context) (*FinancialConnectionsAccount, error) {
	return e.fetchRelatedObject()
}

// V1FinancialConnectionsAccountRefreshedOwnershipEventNotification is the webhook payload you'll get when handling an event with type "v1.financial_connections.account.refreshed_ownership"
// Occurs when an Account’s `ownership_refresh` status transitions from `pending` to either `succeeded` or `failed`.
type V1FinancialConnectionsAccountRefreshedOwnershipEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1FinancialConnectionsAccountRefreshedOwnershipEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1FinancialConnectionsAccountRefreshedOwnershipEvent that created this Notification
func (en *V1FinancialConnectionsAccountRefreshedOwnershipEventNotification) FetchEvent(ctx context.Context) (*V1FinancialConnectionsAccountRefreshedOwnershipEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1FinancialConnectionsAccountRefreshedOwnershipEvent), nil
}

// FetchRelatedObject fetches the FinancialConnectionsAccount related to the event.
func (en *V1FinancialConnectionsAccountRefreshedOwnershipEventNotification) FetchRelatedObject(ctx context.Context) (*FinancialConnectionsAccount, error) {
	relatedObj := &FinancialConnectionsAccount{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1FinancialConnectionsAccountRefreshedTransactionsEvent is the Go struct for the "v1.financial_connections.account.refreshed_transactions" event.
// Occurs when an Account’s `transaction_refresh` status transitions from `pending` to either `succeeded` or `failed`.
type V1FinancialConnectionsAccountRefreshedTransactionsEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*FinancialConnectionsAccount, error)
}

// FetchRelatedObject fetches the FinancialConnectionsAccount related to the event.
func (e *V1FinancialConnectionsAccountRefreshedTransactionsEvent) FetchRelatedObject(ctx context.Context) (*FinancialConnectionsAccount, error) {
	return e.fetchRelatedObject()
}

// V1FinancialConnectionsAccountRefreshedTransactionsEventNotification is the webhook payload you'll get when handling an event with type "v1.financial_connections.account.refreshed_transactions"
// Occurs when an Account’s `transaction_refresh` status transitions from `pending` to either `succeeded` or `failed`.
type V1FinancialConnectionsAccountRefreshedTransactionsEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1FinancialConnectionsAccountRefreshedTransactionsEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1FinancialConnectionsAccountRefreshedTransactionsEvent that created this Notification
func (en *V1FinancialConnectionsAccountRefreshedTransactionsEventNotification) FetchEvent(ctx context.Context) (*V1FinancialConnectionsAccountRefreshedTransactionsEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1FinancialConnectionsAccountRefreshedTransactionsEvent), nil
}

// FetchRelatedObject fetches the FinancialConnectionsAccount related to the event.
func (en *V1FinancialConnectionsAccountRefreshedTransactionsEventNotification) FetchRelatedObject(ctx context.Context) (*FinancialConnectionsAccount, error) {
	relatedObj := &FinancialConnectionsAccount{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1IdentityVerificationSessionCanceledEvent is the Go struct for the "v1.identity.verification_session.canceled" event.
// Occurs whenever a VerificationSession is canceled.
type V1IdentityVerificationSessionCanceledEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*IdentityVerificationSession, error)
}

// FetchRelatedObject fetches the IdentityVerificationSession related to the event.
func (e *V1IdentityVerificationSessionCanceledEvent) FetchRelatedObject(ctx context.Context) (*IdentityVerificationSession, error) {
	return e.fetchRelatedObject()
}

// V1IdentityVerificationSessionCanceledEventNotification is the webhook payload you'll get when handling an event with type "v1.identity.verification_session.canceled"
// Occurs whenever a VerificationSession is canceled.
type V1IdentityVerificationSessionCanceledEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1IdentityVerificationSessionCanceledEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1IdentityVerificationSessionCanceledEvent that created this Notification
func (en *V1IdentityVerificationSessionCanceledEventNotification) FetchEvent(ctx context.Context) (*V1IdentityVerificationSessionCanceledEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1IdentityVerificationSessionCanceledEvent), nil
}

// FetchRelatedObject fetches the IdentityVerificationSession related to the event.
func (en *V1IdentityVerificationSessionCanceledEventNotification) FetchRelatedObject(ctx context.Context) (*IdentityVerificationSession, error) {
	relatedObj := &IdentityVerificationSession{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1IdentityVerificationSessionCreatedEvent is the Go struct for the "v1.identity.verification_session.created" event.
// Occurs whenever a VerificationSession is created.
type V1IdentityVerificationSessionCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*IdentityVerificationSession, error)
}

// FetchRelatedObject fetches the IdentityVerificationSession related to the event.
func (e *V1IdentityVerificationSessionCreatedEvent) FetchRelatedObject(ctx context.Context) (*IdentityVerificationSession, error) {
	return e.fetchRelatedObject()
}

// V1IdentityVerificationSessionCreatedEventNotification is the webhook payload you'll get when handling an event with type "v1.identity.verification_session.created"
// Occurs whenever a VerificationSession is created.
type V1IdentityVerificationSessionCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1IdentityVerificationSessionCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1IdentityVerificationSessionCreatedEvent that created this Notification
func (en *V1IdentityVerificationSessionCreatedEventNotification) FetchEvent(ctx context.Context) (*V1IdentityVerificationSessionCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1IdentityVerificationSessionCreatedEvent), nil
}

// FetchRelatedObject fetches the IdentityVerificationSession related to the event.
func (en *V1IdentityVerificationSessionCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*IdentityVerificationSession, error) {
	relatedObj := &IdentityVerificationSession{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1IdentityVerificationSessionProcessingEvent is the Go struct for the "v1.identity.verification_session.processing" event.
// Occurs whenever a VerificationSession transitions to processing.
type V1IdentityVerificationSessionProcessingEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*IdentityVerificationSession, error)
}

// FetchRelatedObject fetches the IdentityVerificationSession related to the event.
func (e *V1IdentityVerificationSessionProcessingEvent) FetchRelatedObject(ctx context.Context) (*IdentityVerificationSession, error) {
	return e.fetchRelatedObject()
}

// V1IdentityVerificationSessionProcessingEventNotification is the webhook payload you'll get when handling an event with type "v1.identity.verification_session.processing"
// Occurs whenever a VerificationSession transitions to processing.
type V1IdentityVerificationSessionProcessingEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1IdentityVerificationSessionProcessingEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1IdentityVerificationSessionProcessingEvent that created this Notification
func (en *V1IdentityVerificationSessionProcessingEventNotification) FetchEvent(ctx context.Context) (*V1IdentityVerificationSessionProcessingEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1IdentityVerificationSessionProcessingEvent), nil
}

// FetchRelatedObject fetches the IdentityVerificationSession related to the event.
func (en *V1IdentityVerificationSessionProcessingEventNotification) FetchRelatedObject(ctx context.Context) (*IdentityVerificationSession, error) {
	relatedObj := &IdentityVerificationSession{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1IdentityVerificationSessionRedactedEvent is the Go struct for the "v1.identity.verification_session.redacted" event.
// Occurs whenever a VerificationSession is redacted.
type V1IdentityVerificationSessionRedactedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*IdentityVerificationSession, error)
}

// FetchRelatedObject fetches the IdentityVerificationSession related to the event.
func (e *V1IdentityVerificationSessionRedactedEvent) FetchRelatedObject(ctx context.Context) (*IdentityVerificationSession, error) {
	return e.fetchRelatedObject()
}

// V1IdentityVerificationSessionRedactedEventNotification is the webhook payload you'll get when handling an event with type "v1.identity.verification_session.redacted"
// Occurs whenever a VerificationSession is redacted.
type V1IdentityVerificationSessionRedactedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1IdentityVerificationSessionRedactedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1IdentityVerificationSessionRedactedEvent that created this Notification
func (en *V1IdentityVerificationSessionRedactedEventNotification) FetchEvent(ctx context.Context) (*V1IdentityVerificationSessionRedactedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1IdentityVerificationSessionRedactedEvent), nil
}

// FetchRelatedObject fetches the IdentityVerificationSession related to the event.
func (en *V1IdentityVerificationSessionRedactedEventNotification) FetchRelatedObject(ctx context.Context) (*IdentityVerificationSession, error) {
	relatedObj := &IdentityVerificationSession{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1IdentityVerificationSessionRequiresInputEvent is the Go struct for the "v1.identity.verification_session.requires_input" event.
// Occurs whenever a VerificationSession transitions to require user input.
type V1IdentityVerificationSessionRequiresInputEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*IdentityVerificationSession, error)
}

// FetchRelatedObject fetches the IdentityVerificationSession related to the event.
func (e *V1IdentityVerificationSessionRequiresInputEvent) FetchRelatedObject(ctx context.Context) (*IdentityVerificationSession, error) {
	return e.fetchRelatedObject()
}

// V1IdentityVerificationSessionRequiresInputEventNotification is the webhook payload you'll get when handling an event with type "v1.identity.verification_session.requires_input"
// Occurs whenever a VerificationSession transitions to require user input.
type V1IdentityVerificationSessionRequiresInputEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1IdentityVerificationSessionRequiresInputEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1IdentityVerificationSessionRequiresInputEvent that created this Notification
func (en *V1IdentityVerificationSessionRequiresInputEventNotification) FetchEvent(ctx context.Context) (*V1IdentityVerificationSessionRequiresInputEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1IdentityVerificationSessionRequiresInputEvent), nil
}

// FetchRelatedObject fetches the IdentityVerificationSession related to the event.
func (en *V1IdentityVerificationSessionRequiresInputEventNotification) FetchRelatedObject(ctx context.Context) (*IdentityVerificationSession, error) {
	relatedObj := &IdentityVerificationSession{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1IdentityVerificationSessionVerifiedEvent is the Go struct for the "v1.identity.verification_session.verified" event.
// Occurs whenever a VerificationSession transitions to verified.
type V1IdentityVerificationSessionVerifiedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*IdentityVerificationSession, error)
}

// FetchRelatedObject fetches the IdentityVerificationSession related to the event.
func (e *V1IdentityVerificationSessionVerifiedEvent) FetchRelatedObject(ctx context.Context) (*IdentityVerificationSession, error) {
	return e.fetchRelatedObject()
}

// V1IdentityVerificationSessionVerifiedEventNotification is the webhook payload you'll get when handling an event with type "v1.identity.verification_session.verified"
// Occurs whenever a VerificationSession transitions to verified.
type V1IdentityVerificationSessionVerifiedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1IdentityVerificationSessionVerifiedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1IdentityVerificationSessionVerifiedEvent that created this Notification
func (en *V1IdentityVerificationSessionVerifiedEventNotification) FetchEvent(ctx context.Context) (*V1IdentityVerificationSessionVerifiedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1IdentityVerificationSessionVerifiedEvent), nil
}

// FetchRelatedObject fetches the IdentityVerificationSession related to the event.
func (en *V1IdentityVerificationSessionVerifiedEventNotification) FetchRelatedObject(ctx context.Context) (*IdentityVerificationSession, error) {
	relatedObj := &IdentityVerificationSession{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1InvoiceCreatedEvent is the Go struct for the "v1.invoice.created" event.
// Occurs whenever a new invoice is created. To learn how webhooks can be used with this event, and how they can affect it, see [Using Webhooks with Subscriptions](https://docs.stripe.com/subscriptions/webhooks).
type V1InvoiceCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Invoice, error)
}

// FetchRelatedObject fetches the Invoice related to the event.
func (e *V1InvoiceCreatedEvent) FetchRelatedObject(ctx context.Context) (*Invoice, error) {
	return e.fetchRelatedObject()
}

// V1InvoiceCreatedEventNotification is the webhook payload you'll get when handling an event with type "v1.invoice.created"
// Occurs whenever a new invoice is created. To learn how webhooks can be used with this event, and how they can affect it, see [Using Webhooks with Subscriptions](https://docs.stripe.com/subscriptions/webhooks).
type V1InvoiceCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1InvoiceCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1InvoiceCreatedEvent that created this Notification
func (en *V1InvoiceCreatedEventNotification) FetchEvent(ctx context.Context) (*V1InvoiceCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1InvoiceCreatedEvent), nil
}

// FetchRelatedObject fetches the Invoice related to the event.
func (en *V1InvoiceCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*Invoice, error) {
	relatedObj := &Invoice{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1InvoiceDeletedEvent is the Go struct for the "v1.invoice.deleted" event.
// Occurs whenever a draft invoice is deleted. Note: This event is not sent for [invoice previews](https://docs.stripe.com/api/invoices/create_preview).
type V1InvoiceDeletedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Invoice, error)
}

// FetchRelatedObject fetches the Invoice related to the event.
func (e *V1InvoiceDeletedEvent) FetchRelatedObject(ctx context.Context) (*Invoice, error) {
	return e.fetchRelatedObject()
}

// V1InvoiceDeletedEventNotification is the webhook payload you'll get when handling an event with type "v1.invoice.deleted"
// Occurs whenever a draft invoice is deleted. Note: This event is not sent for [invoice previews](https://docs.stripe.com/api/invoices/create_preview).
type V1InvoiceDeletedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1InvoiceDeletedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1InvoiceDeletedEvent that created this Notification
func (en *V1InvoiceDeletedEventNotification) FetchEvent(ctx context.Context) (*V1InvoiceDeletedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1InvoiceDeletedEvent), nil
}

// FetchRelatedObject fetches the Invoice related to the event.
func (en *V1InvoiceDeletedEventNotification) FetchRelatedObject(ctx context.Context) (*Invoice, error) {
	relatedObj := &Invoice{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1InvoiceFinalizationFailedEvent is the Go struct for the "v1.invoice.finalization_failed" event.
// Occurs whenever a draft invoice cannot be finalized. See the invoice’s [last finalization error](https://docs.stripe.com/api/invoices/object#invoice_object-last_finalization_error) for details.
type V1InvoiceFinalizationFailedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Invoice, error)
}

// FetchRelatedObject fetches the Invoice related to the event.
func (e *V1InvoiceFinalizationFailedEvent) FetchRelatedObject(ctx context.Context) (*Invoice, error) {
	return e.fetchRelatedObject()
}

// V1InvoiceFinalizationFailedEventNotification is the webhook payload you'll get when handling an event with type "v1.invoice.finalization_failed"
// Occurs whenever a draft invoice cannot be finalized. See the invoice’s [last finalization error](https://docs.stripe.com/api/invoices/object#invoice_object-last_finalization_error) for details.
type V1InvoiceFinalizationFailedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1InvoiceFinalizationFailedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1InvoiceFinalizationFailedEvent that created this Notification
func (en *V1InvoiceFinalizationFailedEventNotification) FetchEvent(ctx context.Context) (*V1InvoiceFinalizationFailedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1InvoiceFinalizationFailedEvent), nil
}

// FetchRelatedObject fetches the Invoice related to the event.
func (en *V1InvoiceFinalizationFailedEventNotification) FetchRelatedObject(ctx context.Context) (*Invoice, error) {
	relatedObj := &Invoice{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1InvoiceFinalizedEvent is the Go struct for the "v1.invoice.finalized" event.
// Occurs whenever a draft invoice is finalized and updated to be an open invoice.
type V1InvoiceFinalizedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Invoice, error)
}

// FetchRelatedObject fetches the Invoice related to the event.
func (e *V1InvoiceFinalizedEvent) FetchRelatedObject(ctx context.Context) (*Invoice, error) {
	return e.fetchRelatedObject()
}

// V1InvoiceFinalizedEventNotification is the webhook payload you'll get when handling an event with type "v1.invoice.finalized"
// Occurs whenever a draft invoice is finalized and updated to be an open invoice.
type V1InvoiceFinalizedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1InvoiceFinalizedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1InvoiceFinalizedEvent that created this Notification
func (en *V1InvoiceFinalizedEventNotification) FetchEvent(ctx context.Context) (*V1InvoiceFinalizedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1InvoiceFinalizedEvent), nil
}

// FetchRelatedObject fetches the Invoice related to the event.
func (en *V1InvoiceFinalizedEventNotification) FetchRelatedObject(ctx context.Context) (*Invoice, error) {
	relatedObj := &Invoice{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1InvoiceMarkedUncollectibleEvent is the Go struct for the "v1.invoice.marked_uncollectible" event.
// Occurs whenever an invoice is marked uncollectible.
type V1InvoiceMarkedUncollectibleEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Invoice, error)
}

// FetchRelatedObject fetches the Invoice related to the event.
func (e *V1InvoiceMarkedUncollectibleEvent) FetchRelatedObject(ctx context.Context) (*Invoice, error) {
	return e.fetchRelatedObject()
}

// V1InvoiceMarkedUncollectibleEventNotification is the webhook payload you'll get when handling an event with type "v1.invoice.marked_uncollectible"
// Occurs whenever an invoice is marked uncollectible.
type V1InvoiceMarkedUncollectibleEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1InvoiceMarkedUncollectibleEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1InvoiceMarkedUncollectibleEvent that created this Notification
func (en *V1InvoiceMarkedUncollectibleEventNotification) FetchEvent(ctx context.Context) (*V1InvoiceMarkedUncollectibleEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1InvoiceMarkedUncollectibleEvent), nil
}

// FetchRelatedObject fetches the Invoice related to the event.
func (en *V1InvoiceMarkedUncollectibleEventNotification) FetchRelatedObject(ctx context.Context) (*Invoice, error) {
	relatedObj := &Invoice{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1InvoiceOverdueEvent is the Go struct for the "v1.invoice.overdue" event.
// Occurs X number of days after an invoice becomes due&mdash;where X is determined by Automations.
type V1InvoiceOverdueEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Invoice, error)
}

// FetchRelatedObject fetches the Invoice related to the event.
func (e *V1InvoiceOverdueEvent) FetchRelatedObject(ctx context.Context) (*Invoice, error) {
	return e.fetchRelatedObject()
}

// V1InvoiceOverdueEventNotification is the webhook payload you'll get when handling an event with type "v1.invoice.overdue"
// Occurs X number of days after an invoice becomes due&mdash;where X is determined by Automations.
type V1InvoiceOverdueEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1InvoiceOverdueEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1InvoiceOverdueEvent that created this Notification
func (en *V1InvoiceOverdueEventNotification) FetchEvent(ctx context.Context) (*V1InvoiceOverdueEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1InvoiceOverdueEvent), nil
}

// FetchRelatedObject fetches the Invoice related to the event.
func (en *V1InvoiceOverdueEventNotification) FetchRelatedObject(ctx context.Context) (*Invoice, error) {
	relatedObj := &Invoice{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1InvoiceOverpaidEvent is the Go struct for the "v1.invoice.overpaid" event.
// Occurs when an invoice transitions to paid with a non-zero amount_overpaid.
type V1InvoiceOverpaidEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Invoice, error)
}

// FetchRelatedObject fetches the Invoice related to the event.
func (e *V1InvoiceOverpaidEvent) FetchRelatedObject(ctx context.Context) (*Invoice, error) {
	return e.fetchRelatedObject()
}

// V1InvoiceOverpaidEventNotification is the webhook payload you'll get when handling an event with type "v1.invoice.overpaid"
// Occurs when an invoice transitions to paid with a non-zero amount_overpaid.
type V1InvoiceOverpaidEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1InvoiceOverpaidEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1InvoiceOverpaidEvent that created this Notification
func (en *V1InvoiceOverpaidEventNotification) FetchEvent(ctx context.Context) (*V1InvoiceOverpaidEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1InvoiceOverpaidEvent), nil
}

// FetchRelatedObject fetches the Invoice related to the event.
func (en *V1InvoiceOverpaidEventNotification) FetchRelatedObject(ctx context.Context) (*Invoice, error) {
	relatedObj := &Invoice{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1InvoicePaidEvent is the Go struct for the "v1.invoice.paid" event.
// Occurs whenever an invoice payment attempt succeeds or an invoice is marked as paid out-of-band.
type V1InvoicePaidEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Invoice, error)
}

// FetchRelatedObject fetches the Invoice related to the event.
func (e *V1InvoicePaidEvent) FetchRelatedObject(ctx context.Context) (*Invoice, error) {
	return e.fetchRelatedObject()
}

// V1InvoicePaidEventNotification is the webhook payload you'll get when handling an event with type "v1.invoice.paid"
// Occurs whenever an invoice payment attempt succeeds or an invoice is marked as paid out-of-band.
type V1InvoicePaidEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1InvoicePaidEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1InvoicePaidEvent that created this Notification
func (en *V1InvoicePaidEventNotification) FetchEvent(ctx context.Context) (*V1InvoicePaidEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1InvoicePaidEvent), nil
}

// FetchRelatedObject fetches the Invoice related to the event.
func (en *V1InvoicePaidEventNotification) FetchRelatedObject(ctx context.Context) (*Invoice, error) {
	relatedObj := &Invoice{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1InvoicePaymentActionRequiredEvent is the Go struct for the "v1.invoice.payment_action_required" event.
// Occurs whenever an invoice payment attempt requires further user action to complete.
type V1InvoicePaymentActionRequiredEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Invoice, error)
}

// FetchRelatedObject fetches the Invoice related to the event.
func (e *V1InvoicePaymentActionRequiredEvent) FetchRelatedObject(ctx context.Context) (*Invoice, error) {
	return e.fetchRelatedObject()
}

// V1InvoicePaymentActionRequiredEventNotification is the webhook payload you'll get when handling an event with type "v1.invoice.payment_action_required"
// Occurs whenever an invoice payment attempt requires further user action to complete.
type V1InvoicePaymentActionRequiredEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1InvoicePaymentActionRequiredEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1InvoicePaymentActionRequiredEvent that created this Notification
func (en *V1InvoicePaymentActionRequiredEventNotification) FetchEvent(ctx context.Context) (*V1InvoicePaymentActionRequiredEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1InvoicePaymentActionRequiredEvent), nil
}

// FetchRelatedObject fetches the Invoice related to the event.
func (en *V1InvoicePaymentActionRequiredEventNotification) FetchRelatedObject(ctx context.Context) (*Invoice, error) {
	relatedObj := &Invoice{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1InvoicePaymentFailedEvent is the Go struct for the "v1.invoice.payment_failed" event.
// Occurs whenever an invoice payment attempt fails, due to either a declined payment, including soft decline, or to the lack of a stored payment method.
type V1InvoicePaymentFailedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Invoice, error)
}

// FetchRelatedObject fetches the Invoice related to the event.
func (e *V1InvoicePaymentFailedEvent) FetchRelatedObject(ctx context.Context) (*Invoice, error) {
	return e.fetchRelatedObject()
}

// V1InvoicePaymentFailedEventNotification is the webhook payload you'll get when handling an event with type "v1.invoice.payment_failed"
// Occurs whenever an invoice payment attempt fails, due to either a declined payment, including soft decline, or to the lack of a stored payment method.
type V1InvoicePaymentFailedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1InvoicePaymentFailedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1InvoicePaymentFailedEvent that created this Notification
func (en *V1InvoicePaymentFailedEventNotification) FetchEvent(ctx context.Context) (*V1InvoicePaymentFailedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1InvoicePaymentFailedEvent), nil
}

// FetchRelatedObject fetches the Invoice related to the event.
func (en *V1InvoicePaymentFailedEventNotification) FetchRelatedObject(ctx context.Context) (*Invoice, error) {
	relatedObj := &Invoice{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1InvoicePaymentSucceededEvent is the Go struct for the "v1.invoice.payment_succeeded" event.
// Occurs whenever an invoice payment attempt succeeds.
type V1InvoicePaymentSucceededEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Invoice, error)
}

// FetchRelatedObject fetches the Invoice related to the event.
func (e *V1InvoicePaymentSucceededEvent) FetchRelatedObject(ctx context.Context) (*Invoice, error) {
	return e.fetchRelatedObject()
}

// V1InvoicePaymentSucceededEventNotification is the webhook payload you'll get when handling an event with type "v1.invoice.payment_succeeded"
// Occurs whenever an invoice payment attempt succeeds.
type V1InvoicePaymentSucceededEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1InvoicePaymentSucceededEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1InvoicePaymentSucceededEvent that created this Notification
func (en *V1InvoicePaymentSucceededEventNotification) FetchEvent(ctx context.Context) (*V1InvoicePaymentSucceededEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1InvoicePaymentSucceededEvent), nil
}

// FetchRelatedObject fetches the Invoice related to the event.
func (en *V1InvoicePaymentSucceededEventNotification) FetchRelatedObject(ctx context.Context) (*Invoice, error) {
	relatedObj := &Invoice{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1InvoiceSentEvent is the Go struct for the "v1.invoice.sent" event.
// Occurs whenever an invoice email is sent out.
type V1InvoiceSentEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Invoice, error)
}

// FetchRelatedObject fetches the Invoice related to the event.
func (e *V1InvoiceSentEvent) FetchRelatedObject(ctx context.Context) (*Invoice, error) {
	return e.fetchRelatedObject()
}

// V1InvoiceSentEventNotification is the webhook payload you'll get when handling an event with type "v1.invoice.sent"
// Occurs whenever an invoice email is sent out.
type V1InvoiceSentEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1InvoiceSentEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1InvoiceSentEvent that created this Notification
func (en *V1InvoiceSentEventNotification) FetchEvent(ctx context.Context) (*V1InvoiceSentEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1InvoiceSentEvent), nil
}

// FetchRelatedObject fetches the Invoice related to the event.
func (en *V1InvoiceSentEventNotification) FetchRelatedObject(ctx context.Context) (*Invoice, error) {
	relatedObj := &Invoice{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1InvoiceUpcomingEvent is the Go struct for the "v1.invoice.upcoming" event.
// Occurs X number of days before a subscription is scheduled to create an invoice that is automatically charged&mdash;where X is determined by your [subscriptions settings](https://dashboard.stripe.com/account/billing/automatic). Note: The received `Invoice` object will not have an invoice ID.
type V1InvoiceUpcomingEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Invoice, error)
}

// FetchRelatedObject fetches the Invoice related to the event.
func (e *V1InvoiceUpcomingEvent) FetchRelatedObject(ctx context.Context) (*Invoice, error) {
	return e.fetchRelatedObject()
}

// V1InvoiceUpcomingEventNotification is the webhook payload you'll get when handling an event with type "v1.invoice.upcoming"
// Occurs X number of days before a subscription is scheduled to create an invoice that is automatically charged&mdash;where X is determined by your [subscriptions settings](https://dashboard.stripe.com/account/billing/automatic). Note: The received `Invoice` object will not have an invoice ID.
type V1InvoiceUpcomingEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1InvoiceUpcomingEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1InvoiceUpcomingEvent that created this Notification
func (en *V1InvoiceUpcomingEventNotification) FetchEvent(ctx context.Context) (*V1InvoiceUpcomingEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1InvoiceUpcomingEvent), nil
}

// FetchRelatedObject fetches the Invoice related to the event.
func (en *V1InvoiceUpcomingEventNotification) FetchRelatedObject(ctx context.Context) (*Invoice, error) {
	relatedObj := &Invoice{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1InvoiceUpdatedEvent is the Go struct for the "v1.invoice.updated" event.
// Occurs whenever an invoice changes (e.g., the invoice amount).
type V1InvoiceUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Invoice, error)
}

// FetchRelatedObject fetches the Invoice related to the event.
func (e *V1InvoiceUpdatedEvent) FetchRelatedObject(ctx context.Context) (*Invoice, error) {
	return e.fetchRelatedObject()
}

// V1InvoiceUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v1.invoice.updated"
// Occurs whenever an invoice changes (e.g., the invoice amount).
type V1InvoiceUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1InvoiceUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1InvoiceUpdatedEvent that created this Notification
func (en *V1InvoiceUpdatedEventNotification) FetchEvent(ctx context.Context) (*V1InvoiceUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1InvoiceUpdatedEvent), nil
}

// FetchRelatedObject fetches the Invoice related to the event.
func (en *V1InvoiceUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*Invoice, error) {
	relatedObj := &Invoice{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1InvoiceVoidedEvent is the Go struct for the "v1.invoice.voided" event.
// Occurs whenever an invoice is voided.
type V1InvoiceVoidedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Invoice, error)
}

// FetchRelatedObject fetches the Invoice related to the event.
func (e *V1InvoiceVoidedEvent) FetchRelatedObject(ctx context.Context) (*Invoice, error) {
	return e.fetchRelatedObject()
}

// V1InvoiceVoidedEventNotification is the webhook payload you'll get when handling an event with type "v1.invoice.voided"
// Occurs whenever an invoice is voided.
type V1InvoiceVoidedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1InvoiceVoidedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1InvoiceVoidedEvent that created this Notification
func (en *V1InvoiceVoidedEventNotification) FetchEvent(ctx context.Context) (*V1InvoiceVoidedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1InvoiceVoidedEvent), nil
}

// FetchRelatedObject fetches the Invoice related to the event.
func (en *V1InvoiceVoidedEventNotification) FetchRelatedObject(ctx context.Context) (*Invoice, error) {
	relatedObj := &Invoice{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1InvoiceWillBeDueEvent is the Go struct for the "v1.invoice.will_be_due" event.
// Occurs X number of days before an invoice becomes due&mdash;where X is determined by Automations.
type V1InvoiceWillBeDueEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Invoice, error)
}

// FetchRelatedObject fetches the Invoice related to the event.
func (e *V1InvoiceWillBeDueEvent) FetchRelatedObject(ctx context.Context) (*Invoice, error) {
	return e.fetchRelatedObject()
}

// V1InvoiceWillBeDueEventNotification is the webhook payload you'll get when handling an event with type "v1.invoice.will_be_due"
// Occurs X number of days before an invoice becomes due&mdash;where X is determined by Automations.
type V1InvoiceWillBeDueEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1InvoiceWillBeDueEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1InvoiceWillBeDueEvent that created this Notification
func (en *V1InvoiceWillBeDueEventNotification) FetchEvent(ctx context.Context) (*V1InvoiceWillBeDueEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1InvoiceWillBeDueEvent), nil
}

// FetchRelatedObject fetches the Invoice related to the event.
func (en *V1InvoiceWillBeDueEventNotification) FetchRelatedObject(ctx context.Context) (*Invoice, error) {
	relatedObj := &Invoice{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1InvoicePaymentPaidEvent is the Go struct for the "v1.invoice_payment.paid" event.
// Occurs when an InvoicePayment is successfully paid.
type V1InvoicePaymentPaidEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*InvoicePayment, error)
}

// FetchRelatedObject fetches the InvoicePayment related to the event.
func (e *V1InvoicePaymentPaidEvent) FetchRelatedObject(ctx context.Context) (*InvoicePayment, error) {
	return e.fetchRelatedObject()
}

// V1InvoicePaymentPaidEventNotification is the webhook payload you'll get when handling an event with type "v1.invoice_payment.paid"
// Occurs when an InvoicePayment is successfully paid.
type V1InvoicePaymentPaidEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1InvoicePaymentPaidEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1InvoicePaymentPaidEvent that created this Notification
func (en *V1InvoicePaymentPaidEventNotification) FetchEvent(ctx context.Context) (*V1InvoicePaymentPaidEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1InvoicePaymentPaidEvent), nil
}

// FetchRelatedObject fetches the InvoicePayment related to the event.
func (en *V1InvoicePaymentPaidEventNotification) FetchRelatedObject(ctx context.Context) (*InvoicePayment, error) {
	relatedObj := &InvoicePayment{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1InvoiceitemCreatedEvent is the Go struct for the "v1.invoiceitem.created" event.
// Occurs whenever an invoice item is created.
type V1InvoiceitemCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*InvoiceItem, error)
}

// FetchRelatedObject fetches the InvoiceItem related to the event.
func (e *V1InvoiceitemCreatedEvent) FetchRelatedObject(ctx context.Context) (*InvoiceItem, error) {
	return e.fetchRelatedObject()
}

// V1InvoiceitemCreatedEventNotification is the webhook payload you'll get when handling an event with type "v1.invoiceitem.created"
// Occurs whenever an invoice item is created.
type V1InvoiceitemCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1InvoiceitemCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1InvoiceitemCreatedEvent that created this Notification
func (en *V1InvoiceitemCreatedEventNotification) FetchEvent(ctx context.Context) (*V1InvoiceitemCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1InvoiceitemCreatedEvent), nil
}

// FetchRelatedObject fetches the InvoiceItem related to the event.
func (en *V1InvoiceitemCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*InvoiceItem, error) {
	relatedObj := &InvoiceItem{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1InvoiceitemDeletedEvent is the Go struct for the "v1.invoiceitem.deleted" event.
// Occurs whenever an invoice item is deleted.
type V1InvoiceitemDeletedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*InvoiceItem, error)
}

// FetchRelatedObject fetches the InvoiceItem related to the event.
func (e *V1InvoiceitemDeletedEvent) FetchRelatedObject(ctx context.Context) (*InvoiceItem, error) {
	return e.fetchRelatedObject()
}

// V1InvoiceitemDeletedEventNotification is the webhook payload you'll get when handling an event with type "v1.invoiceitem.deleted"
// Occurs whenever an invoice item is deleted.
type V1InvoiceitemDeletedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1InvoiceitemDeletedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1InvoiceitemDeletedEvent that created this Notification
func (en *V1InvoiceitemDeletedEventNotification) FetchEvent(ctx context.Context) (*V1InvoiceitemDeletedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1InvoiceitemDeletedEvent), nil
}

// FetchRelatedObject fetches the InvoiceItem related to the event.
func (en *V1InvoiceitemDeletedEventNotification) FetchRelatedObject(ctx context.Context) (*InvoiceItem, error) {
	relatedObj := &InvoiceItem{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1IssuingAuthorizationCreatedEvent is the Go struct for the "v1.issuing_authorization.created" event.
// Occurs whenever an authorization is created.
type V1IssuingAuthorizationCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*IssuingAuthorization, error)
}

// FetchRelatedObject fetches the IssuingAuthorization related to the event.
func (e *V1IssuingAuthorizationCreatedEvent) FetchRelatedObject(ctx context.Context) (*IssuingAuthorization, error) {
	return e.fetchRelatedObject()
}

// V1IssuingAuthorizationCreatedEventNotification is the webhook payload you'll get when handling an event with type "v1.issuing_authorization.created"
// Occurs whenever an authorization is created.
type V1IssuingAuthorizationCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1IssuingAuthorizationCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1IssuingAuthorizationCreatedEvent that created this Notification
func (en *V1IssuingAuthorizationCreatedEventNotification) FetchEvent(ctx context.Context) (*V1IssuingAuthorizationCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1IssuingAuthorizationCreatedEvent), nil
}

// FetchRelatedObject fetches the IssuingAuthorization related to the event.
func (en *V1IssuingAuthorizationCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*IssuingAuthorization, error) {
	relatedObj := &IssuingAuthorization{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1IssuingAuthorizationRequestEvent is the Go struct for the "v1.issuing_authorization.request" event.
// Represents a synchronous request for authorization, see [Using your integration to handle authorization requests](https://docs.stripe.com/issuing/purchases/authorizations#authorization-handling).
type V1IssuingAuthorizationRequestEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*IssuingAuthorization, error)
}

// FetchRelatedObject fetches the IssuingAuthorization related to the event.
func (e *V1IssuingAuthorizationRequestEvent) FetchRelatedObject(ctx context.Context) (*IssuingAuthorization, error) {
	return e.fetchRelatedObject()
}

// V1IssuingAuthorizationRequestEventNotification is the webhook payload you'll get when handling an event with type "v1.issuing_authorization.request"
// Represents a synchronous request for authorization, see [Using your integration to handle authorization requests](https://docs.stripe.com/issuing/purchases/authorizations#authorization-handling).
type V1IssuingAuthorizationRequestEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1IssuingAuthorizationRequestEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1IssuingAuthorizationRequestEvent that created this Notification
func (en *V1IssuingAuthorizationRequestEventNotification) FetchEvent(ctx context.Context) (*V1IssuingAuthorizationRequestEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1IssuingAuthorizationRequestEvent), nil
}

// FetchRelatedObject fetches the IssuingAuthorization related to the event.
func (en *V1IssuingAuthorizationRequestEventNotification) FetchRelatedObject(ctx context.Context) (*IssuingAuthorization, error) {
	relatedObj := &IssuingAuthorization{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1IssuingAuthorizationUpdatedEvent is the Go struct for the "v1.issuing_authorization.updated" event.
// Occurs whenever an authorization is updated.
type V1IssuingAuthorizationUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*IssuingAuthorization, error)
}

// FetchRelatedObject fetches the IssuingAuthorization related to the event.
func (e *V1IssuingAuthorizationUpdatedEvent) FetchRelatedObject(ctx context.Context) (*IssuingAuthorization, error) {
	return e.fetchRelatedObject()
}

// V1IssuingAuthorizationUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v1.issuing_authorization.updated"
// Occurs whenever an authorization is updated.
type V1IssuingAuthorizationUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1IssuingAuthorizationUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1IssuingAuthorizationUpdatedEvent that created this Notification
func (en *V1IssuingAuthorizationUpdatedEventNotification) FetchEvent(ctx context.Context) (*V1IssuingAuthorizationUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1IssuingAuthorizationUpdatedEvent), nil
}

// FetchRelatedObject fetches the IssuingAuthorization related to the event.
func (en *V1IssuingAuthorizationUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*IssuingAuthorization, error) {
	relatedObj := &IssuingAuthorization{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1IssuingCardCreatedEvent is the Go struct for the "v1.issuing_card.created" event.
// Occurs whenever a card is created.
type V1IssuingCardCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*IssuingCard, error)
}

// FetchRelatedObject fetches the IssuingCard related to the event.
func (e *V1IssuingCardCreatedEvent) FetchRelatedObject(ctx context.Context) (*IssuingCard, error) {
	return e.fetchRelatedObject()
}

// V1IssuingCardCreatedEventNotification is the webhook payload you'll get when handling an event with type "v1.issuing_card.created"
// Occurs whenever a card is created.
type V1IssuingCardCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1IssuingCardCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1IssuingCardCreatedEvent that created this Notification
func (en *V1IssuingCardCreatedEventNotification) FetchEvent(ctx context.Context) (*V1IssuingCardCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1IssuingCardCreatedEvent), nil
}

// FetchRelatedObject fetches the IssuingCard related to the event.
func (en *V1IssuingCardCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*IssuingCard, error) {
	relatedObj := &IssuingCard{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1IssuingCardUpdatedEvent is the Go struct for the "v1.issuing_card.updated" event.
// Occurs whenever a card is updated.
type V1IssuingCardUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*IssuingCard, error)
}

// FetchRelatedObject fetches the IssuingCard related to the event.
func (e *V1IssuingCardUpdatedEvent) FetchRelatedObject(ctx context.Context) (*IssuingCard, error) {
	return e.fetchRelatedObject()
}

// V1IssuingCardUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v1.issuing_card.updated"
// Occurs whenever a card is updated.
type V1IssuingCardUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1IssuingCardUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1IssuingCardUpdatedEvent that created this Notification
func (en *V1IssuingCardUpdatedEventNotification) FetchEvent(ctx context.Context) (*V1IssuingCardUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1IssuingCardUpdatedEvent), nil
}

// FetchRelatedObject fetches the IssuingCard related to the event.
func (en *V1IssuingCardUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*IssuingCard, error) {
	relatedObj := &IssuingCard{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1IssuingCardholderCreatedEvent is the Go struct for the "v1.issuing_cardholder.created" event.
// Occurs whenever a cardholder is created.
type V1IssuingCardholderCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*IssuingCardholder, error)
}

// FetchRelatedObject fetches the IssuingCardholder related to the event.
func (e *V1IssuingCardholderCreatedEvent) FetchRelatedObject(ctx context.Context) (*IssuingCardholder, error) {
	return e.fetchRelatedObject()
}

// V1IssuingCardholderCreatedEventNotification is the webhook payload you'll get when handling an event with type "v1.issuing_cardholder.created"
// Occurs whenever a cardholder is created.
type V1IssuingCardholderCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1IssuingCardholderCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1IssuingCardholderCreatedEvent that created this Notification
func (en *V1IssuingCardholderCreatedEventNotification) FetchEvent(ctx context.Context) (*V1IssuingCardholderCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1IssuingCardholderCreatedEvent), nil
}

// FetchRelatedObject fetches the IssuingCardholder related to the event.
func (en *V1IssuingCardholderCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*IssuingCardholder, error) {
	relatedObj := &IssuingCardholder{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1IssuingCardholderUpdatedEvent is the Go struct for the "v1.issuing_cardholder.updated" event.
// Occurs whenever a cardholder is updated.
type V1IssuingCardholderUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*IssuingCardholder, error)
}

// FetchRelatedObject fetches the IssuingCardholder related to the event.
func (e *V1IssuingCardholderUpdatedEvent) FetchRelatedObject(ctx context.Context) (*IssuingCardholder, error) {
	return e.fetchRelatedObject()
}

// V1IssuingCardholderUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v1.issuing_cardholder.updated"
// Occurs whenever a cardholder is updated.
type V1IssuingCardholderUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1IssuingCardholderUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1IssuingCardholderUpdatedEvent that created this Notification
func (en *V1IssuingCardholderUpdatedEventNotification) FetchEvent(ctx context.Context) (*V1IssuingCardholderUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1IssuingCardholderUpdatedEvent), nil
}

// FetchRelatedObject fetches the IssuingCardholder related to the event.
func (en *V1IssuingCardholderUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*IssuingCardholder, error) {
	relatedObj := &IssuingCardholder{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1IssuingDisputeClosedEvent is the Go struct for the "v1.issuing_dispute.closed" event.
// Occurs whenever a dispute is won, lost or expired.
type V1IssuingDisputeClosedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*IssuingDispute, error)
}

// FetchRelatedObject fetches the IssuingDispute related to the event.
func (e *V1IssuingDisputeClosedEvent) FetchRelatedObject(ctx context.Context) (*IssuingDispute, error) {
	return e.fetchRelatedObject()
}

// V1IssuingDisputeClosedEventNotification is the webhook payload you'll get when handling an event with type "v1.issuing_dispute.closed"
// Occurs whenever a dispute is won, lost or expired.
type V1IssuingDisputeClosedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1IssuingDisputeClosedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1IssuingDisputeClosedEvent that created this Notification
func (en *V1IssuingDisputeClosedEventNotification) FetchEvent(ctx context.Context) (*V1IssuingDisputeClosedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1IssuingDisputeClosedEvent), nil
}

// FetchRelatedObject fetches the IssuingDispute related to the event.
func (en *V1IssuingDisputeClosedEventNotification) FetchRelatedObject(ctx context.Context) (*IssuingDispute, error) {
	relatedObj := &IssuingDispute{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1IssuingDisputeCreatedEvent is the Go struct for the "v1.issuing_dispute.created" event.
// Occurs whenever a dispute is created.
type V1IssuingDisputeCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*IssuingDispute, error)
}

// FetchRelatedObject fetches the IssuingDispute related to the event.
func (e *V1IssuingDisputeCreatedEvent) FetchRelatedObject(ctx context.Context) (*IssuingDispute, error) {
	return e.fetchRelatedObject()
}

// V1IssuingDisputeCreatedEventNotification is the webhook payload you'll get when handling an event with type "v1.issuing_dispute.created"
// Occurs whenever a dispute is created.
type V1IssuingDisputeCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1IssuingDisputeCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1IssuingDisputeCreatedEvent that created this Notification
func (en *V1IssuingDisputeCreatedEventNotification) FetchEvent(ctx context.Context) (*V1IssuingDisputeCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1IssuingDisputeCreatedEvent), nil
}

// FetchRelatedObject fetches the IssuingDispute related to the event.
func (en *V1IssuingDisputeCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*IssuingDispute, error) {
	relatedObj := &IssuingDispute{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1IssuingDisputeFundsReinstatedEvent is the Go struct for the "v1.issuing_dispute.funds_reinstated" event.
// Occurs whenever funds are reinstated to your account for an Issuing dispute.
type V1IssuingDisputeFundsReinstatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*IssuingDispute, error)
}

// FetchRelatedObject fetches the IssuingDispute related to the event.
func (e *V1IssuingDisputeFundsReinstatedEvent) FetchRelatedObject(ctx context.Context) (*IssuingDispute, error) {
	return e.fetchRelatedObject()
}

// V1IssuingDisputeFundsReinstatedEventNotification is the webhook payload you'll get when handling an event with type "v1.issuing_dispute.funds_reinstated"
// Occurs whenever funds are reinstated to your account for an Issuing dispute.
type V1IssuingDisputeFundsReinstatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1IssuingDisputeFundsReinstatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1IssuingDisputeFundsReinstatedEvent that created this Notification
func (en *V1IssuingDisputeFundsReinstatedEventNotification) FetchEvent(ctx context.Context) (*V1IssuingDisputeFundsReinstatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1IssuingDisputeFundsReinstatedEvent), nil
}

// FetchRelatedObject fetches the IssuingDispute related to the event.
func (en *V1IssuingDisputeFundsReinstatedEventNotification) FetchRelatedObject(ctx context.Context) (*IssuingDispute, error) {
	relatedObj := &IssuingDispute{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1IssuingDisputeFundsRescindedEvent is the Go struct for the "v1.issuing_dispute.funds_rescinded" event.
// Occurs whenever funds are deducted from your account for an Issuing dispute.
type V1IssuingDisputeFundsRescindedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*IssuingDispute, error)
}

// FetchRelatedObject fetches the IssuingDispute related to the event.
func (e *V1IssuingDisputeFundsRescindedEvent) FetchRelatedObject(ctx context.Context) (*IssuingDispute, error) {
	return e.fetchRelatedObject()
}

// V1IssuingDisputeFundsRescindedEventNotification is the webhook payload you'll get when handling an event with type "v1.issuing_dispute.funds_rescinded"
// Occurs whenever funds are deducted from your account for an Issuing dispute.
type V1IssuingDisputeFundsRescindedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1IssuingDisputeFundsRescindedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1IssuingDisputeFundsRescindedEvent that created this Notification
func (en *V1IssuingDisputeFundsRescindedEventNotification) FetchEvent(ctx context.Context) (*V1IssuingDisputeFundsRescindedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1IssuingDisputeFundsRescindedEvent), nil
}

// FetchRelatedObject fetches the IssuingDispute related to the event.
func (en *V1IssuingDisputeFundsRescindedEventNotification) FetchRelatedObject(ctx context.Context) (*IssuingDispute, error) {
	relatedObj := &IssuingDispute{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1IssuingDisputeSubmittedEvent is the Go struct for the "v1.issuing_dispute.submitted" event.
// Occurs whenever a dispute is submitted.
type V1IssuingDisputeSubmittedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*IssuingDispute, error)
}

// FetchRelatedObject fetches the IssuingDispute related to the event.
func (e *V1IssuingDisputeSubmittedEvent) FetchRelatedObject(ctx context.Context) (*IssuingDispute, error) {
	return e.fetchRelatedObject()
}

// V1IssuingDisputeSubmittedEventNotification is the webhook payload you'll get when handling an event with type "v1.issuing_dispute.submitted"
// Occurs whenever a dispute is submitted.
type V1IssuingDisputeSubmittedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1IssuingDisputeSubmittedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1IssuingDisputeSubmittedEvent that created this Notification
func (en *V1IssuingDisputeSubmittedEventNotification) FetchEvent(ctx context.Context) (*V1IssuingDisputeSubmittedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1IssuingDisputeSubmittedEvent), nil
}

// FetchRelatedObject fetches the IssuingDispute related to the event.
func (en *V1IssuingDisputeSubmittedEventNotification) FetchRelatedObject(ctx context.Context) (*IssuingDispute, error) {
	relatedObj := &IssuingDispute{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1IssuingDisputeUpdatedEvent is the Go struct for the "v1.issuing_dispute.updated" event.
// Occurs whenever a dispute is updated.
type V1IssuingDisputeUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*IssuingDispute, error)
}

// FetchRelatedObject fetches the IssuingDispute related to the event.
func (e *V1IssuingDisputeUpdatedEvent) FetchRelatedObject(ctx context.Context) (*IssuingDispute, error) {
	return e.fetchRelatedObject()
}

// V1IssuingDisputeUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v1.issuing_dispute.updated"
// Occurs whenever a dispute is updated.
type V1IssuingDisputeUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1IssuingDisputeUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1IssuingDisputeUpdatedEvent that created this Notification
func (en *V1IssuingDisputeUpdatedEventNotification) FetchEvent(ctx context.Context) (*V1IssuingDisputeUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1IssuingDisputeUpdatedEvent), nil
}

// FetchRelatedObject fetches the IssuingDispute related to the event.
func (en *V1IssuingDisputeUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*IssuingDispute, error) {
	relatedObj := &IssuingDispute{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1IssuingPersonalizationDesignActivatedEvent is the Go struct for the "v1.issuing_personalization_design.activated" event.
// Occurs whenever a personalization design is activated following the activation of the physical bundle that belongs to it.
type V1IssuingPersonalizationDesignActivatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*IssuingPersonalizationDesign, error)
}

// FetchRelatedObject fetches the IssuingPersonalizationDesign related to the event.
func (e *V1IssuingPersonalizationDesignActivatedEvent) FetchRelatedObject(ctx context.Context) (*IssuingPersonalizationDesign, error) {
	return e.fetchRelatedObject()
}

// V1IssuingPersonalizationDesignActivatedEventNotification is the webhook payload you'll get when handling an event with type "v1.issuing_personalization_design.activated"
// Occurs whenever a personalization design is activated following the activation of the physical bundle that belongs to it.
type V1IssuingPersonalizationDesignActivatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1IssuingPersonalizationDesignActivatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1IssuingPersonalizationDesignActivatedEvent that created this Notification
func (en *V1IssuingPersonalizationDesignActivatedEventNotification) FetchEvent(ctx context.Context) (*V1IssuingPersonalizationDesignActivatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1IssuingPersonalizationDesignActivatedEvent), nil
}

// FetchRelatedObject fetches the IssuingPersonalizationDesign related to the event.
func (en *V1IssuingPersonalizationDesignActivatedEventNotification) FetchRelatedObject(ctx context.Context) (*IssuingPersonalizationDesign, error) {
	relatedObj := &IssuingPersonalizationDesign{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1IssuingPersonalizationDesignDeactivatedEvent is the Go struct for the "v1.issuing_personalization_design.deactivated" event.
// Occurs whenever a personalization design is deactivated following the deactivation of the physical bundle that belongs to it.
type V1IssuingPersonalizationDesignDeactivatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*IssuingPersonalizationDesign, error)
}

// FetchRelatedObject fetches the IssuingPersonalizationDesign related to the event.
func (e *V1IssuingPersonalizationDesignDeactivatedEvent) FetchRelatedObject(ctx context.Context) (*IssuingPersonalizationDesign, error) {
	return e.fetchRelatedObject()
}

// V1IssuingPersonalizationDesignDeactivatedEventNotification is the webhook payload you'll get when handling an event with type "v1.issuing_personalization_design.deactivated"
// Occurs whenever a personalization design is deactivated following the deactivation of the physical bundle that belongs to it.
type V1IssuingPersonalizationDesignDeactivatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1IssuingPersonalizationDesignDeactivatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1IssuingPersonalizationDesignDeactivatedEvent that created this Notification
func (en *V1IssuingPersonalizationDesignDeactivatedEventNotification) FetchEvent(ctx context.Context) (*V1IssuingPersonalizationDesignDeactivatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1IssuingPersonalizationDesignDeactivatedEvent), nil
}

// FetchRelatedObject fetches the IssuingPersonalizationDesign related to the event.
func (en *V1IssuingPersonalizationDesignDeactivatedEventNotification) FetchRelatedObject(ctx context.Context) (*IssuingPersonalizationDesign, error) {
	relatedObj := &IssuingPersonalizationDesign{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1IssuingPersonalizationDesignRejectedEvent is the Go struct for the "v1.issuing_personalization_design.rejected" event.
// Occurs whenever a personalization design is rejected by design review.
type V1IssuingPersonalizationDesignRejectedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*IssuingPersonalizationDesign, error)
}

// FetchRelatedObject fetches the IssuingPersonalizationDesign related to the event.
func (e *V1IssuingPersonalizationDesignRejectedEvent) FetchRelatedObject(ctx context.Context) (*IssuingPersonalizationDesign, error) {
	return e.fetchRelatedObject()
}

// V1IssuingPersonalizationDesignRejectedEventNotification is the webhook payload you'll get when handling an event with type "v1.issuing_personalization_design.rejected"
// Occurs whenever a personalization design is rejected by design review.
type V1IssuingPersonalizationDesignRejectedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1IssuingPersonalizationDesignRejectedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1IssuingPersonalizationDesignRejectedEvent that created this Notification
func (en *V1IssuingPersonalizationDesignRejectedEventNotification) FetchEvent(ctx context.Context) (*V1IssuingPersonalizationDesignRejectedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1IssuingPersonalizationDesignRejectedEvent), nil
}

// FetchRelatedObject fetches the IssuingPersonalizationDesign related to the event.
func (en *V1IssuingPersonalizationDesignRejectedEventNotification) FetchRelatedObject(ctx context.Context) (*IssuingPersonalizationDesign, error) {
	relatedObj := &IssuingPersonalizationDesign{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1IssuingPersonalizationDesignUpdatedEvent is the Go struct for the "v1.issuing_personalization_design.updated" event.
// Occurs whenever a personalization design is updated.
type V1IssuingPersonalizationDesignUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*IssuingPersonalizationDesign, error)
}

// FetchRelatedObject fetches the IssuingPersonalizationDesign related to the event.
func (e *V1IssuingPersonalizationDesignUpdatedEvent) FetchRelatedObject(ctx context.Context) (*IssuingPersonalizationDesign, error) {
	return e.fetchRelatedObject()
}

// V1IssuingPersonalizationDesignUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v1.issuing_personalization_design.updated"
// Occurs whenever a personalization design is updated.
type V1IssuingPersonalizationDesignUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1IssuingPersonalizationDesignUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1IssuingPersonalizationDesignUpdatedEvent that created this Notification
func (en *V1IssuingPersonalizationDesignUpdatedEventNotification) FetchEvent(ctx context.Context) (*V1IssuingPersonalizationDesignUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1IssuingPersonalizationDesignUpdatedEvent), nil
}

// FetchRelatedObject fetches the IssuingPersonalizationDesign related to the event.
func (en *V1IssuingPersonalizationDesignUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*IssuingPersonalizationDesign, error) {
	relatedObj := &IssuingPersonalizationDesign{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1IssuingTokenCreatedEvent is the Go struct for the "v1.issuing_token.created" event.
// Occurs whenever an issuing digital wallet token is created.
type V1IssuingTokenCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*IssuingToken, error)
}

// FetchRelatedObject fetches the IssuingToken related to the event.
func (e *V1IssuingTokenCreatedEvent) FetchRelatedObject(ctx context.Context) (*IssuingToken, error) {
	return e.fetchRelatedObject()
}

// V1IssuingTokenCreatedEventNotification is the webhook payload you'll get when handling an event with type "v1.issuing_token.created"
// Occurs whenever an issuing digital wallet token is created.
type V1IssuingTokenCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1IssuingTokenCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1IssuingTokenCreatedEvent that created this Notification
func (en *V1IssuingTokenCreatedEventNotification) FetchEvent(ctx context.Context) (*V1IssuingTokenCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1IssuingTokenCreatedEvent), nil
}

// FetchRelatedObject fetches the IssuingToken related to the event.
func (en *V1IssuingTokenCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*IssuingToken, error) {
	relatedObj := &IssuingToken{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1IssuingTokenUpdatedEvent is the Go struct for the "v1.issuing_token.updated" event.
// Occurs whenever an issuing digital wallet token is updated.
type V1IssuingTokenUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*IssuingToken, error)
}

// FetchRelatedObject fetches the IssuingToken related to the event.
func (e *V1IssuingTokenUpdatedEvent) FetchRelatedObject(ctx context.Context) (*IssuingToken, error) {
	return e.fetchRelatedObject()
}

// V1IssuingTokenUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v1.issuing_token.updated"
// Occurs whenever an issuing digital wallet token is updated.
type V1IssuingTokenUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1IssuingTokenUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1IssuingTokenUpdatedEvent that created this Notification
func (en *V1IssuingTokenUpdatedEventNotification) FetchEvent(ctx context.Context) (*V1IssuingTokenUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1IssuingTokenUpdatedEvent), nil
}

// FetchRelatedObject fetches the IssuingToken related to the event.
func (en *V1IssuingTokenUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*IssuingToken, error) {
	relatedObj := &IssuingToken{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1IssuingTransactionCreatedEvent is the Go struct for the "v1.issuing_transaction.created" event.
// Occurs whenever an issuing transaction is created.
type V1IssuingTransactionCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*IssuingTransaction, error)
}

// FetchRelatedObject fetches the IssuingTransaction related to the event.
func (e *V1IssuingTransactionCreatedEvent) FetchRelatedObject(ctx context.Context) (*IssuingTransaction, error) {
	return e.fetchRelatedObject()
}

// V1IssuingTransactionCreatedEventNotification is the webhook payload you'll get when handling an event with type "v1.issuing_transaction.created"
// Occurs whenever an issuing transaction is created.
type V1IssuingTransactionCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1IssuingTransactionCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1IssuingTransactionCreatedEvent that created this Notification
func (en *V1IssuingTransactionCreatedEventNotification) FetchEvent(ctx context.Context) (*V1IssuingTransactionCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1IssuingTransactionCreatedEvent), nil
}

// FetchRelatedObject fetches the IssuingTransaction related to the event.
func (en *V1IssuingTransactionCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*IssuingTransaction, error) {
	relatedObj := &IssuingTransaction{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1IssuingTransactionPurchaseDetailsReceiptUpdatedEvent is the Go struct for the "v1.issuing_transaction.purchase_details_receipt_updated" event.
// Occurs whenever an issuing transaction is updated with receipt data.
type V1IssuingTransactionPurchaseDetailsReceiptUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*IssuingTransaction, error)
}

// FetchRelatedObject fetches the IssuingTransaction related to the event.
func (e *V1IssuingTransactionPurchaseDetailsReceiptUpdatedEvent) FetchRelatedObject(ctx context.Context) (*IssuingTransaction, error) {
	return e.fetchRelatedObject()
}

// V1IssuingTransactionPurchaseDetailsReceiptUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v1.issuing_transaction.purchase_details_receipt_updated"
// Occurs whenever an issuing transaction is updated with receipt data.
type V1IssuingTransactionPurchaseDetailsReceiptUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1IssuingTransactionPurchaseDetailsReceiptUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1IssuingTransactionPurchaseDetailsReceiptUpdatedEvent that created this Notification
func (en *V1IssuingTransactionPurchaseDetailsReceiptUpdatedEventNotification) FetchEvent(ctx context.Context) (*V1IssuingTransactionPurchaseDetailsReceiptUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1IssuingTransactionPurchaseDetailsReceiptUpdatedEvent), nil
}

// FetchRelatedObject fetches the IssuingTransaction related to the event.
func (en *V1IssuingTransactionPurchaseDetailsReceiptUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*IssuingTransaction, error) {
	relatedObj := &IssuingTransaction{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1IssuingTransactionUpdatedEvent is the Go struct for the "v1.issuing_transaction.updated" event.
// Occurs whenever an issuing transaction is updated.
type V1IssuingTransactionUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*IssuingTransaction, error)
}

// FetchRelatedObject fetches the IssuingTransaction related to the event.
func (e *V1IssuingTransactionUpdatedEvent) FetchRelatedObject(ctx context.Context) (*IssuingTransaction, error) {
	return e.fetchRelatedObject()
}

// V1IssuingTransactionUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v1.issuing_transaction.updated"
// Occurs whenever an issuing transaction is updated.
type V1IssuingTransactionUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1IssuingTransactionUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1IssuingTransactionUpdatedEvent that created this Notification
func (en *V1IssuingTransactionUpdatedEventNotification) FetchEvent(ctx context.Context) (*V1IssuingTransactionUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1IssuingTransactionUpdatedEvent), nil
}

// FetchRelatedObject fetches the IssuingTransaction related to the event.
func (en *V1IssuingTransactionUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*IssuingTransaction, error) {
	relatedObj := &IssuingTransaction{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1MandateUpdatedEvent is the Go struct for the "v1.mandate.updated" event.
// Occurs whenever a Mandate is updated.
type V1MandateUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Mandate, error)
}

// FetchRelatedObject fetches the Mandate related to the event.
func (e *V1MandateUpdatedEvent) FetchRelatedObject(ctx context.Context) (*Mandate, error) {
	return e.fetchRelatedObject()
}

// V1MandateUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v1.mandate.updated"
// Occurs whenever a Mandate is updated.
type V1MandateUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1MandateUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1MandateUpdatedEvent that created this Notification
func (en *V1MandateUpdatedEventNotification) FetchEvent(ctx context.Context) (*V1MandateUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1MandateUpdatedEvent), nil
}

// FetchRelatedObject fetches the Mandate related to the event.
func (en *V1MandateUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*Mandate, error) {
	relatedObj := &Mandate{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1PaymentIntentAmountCapturableUpdatedEvent is the Go struct for the "v1.payment_intent.amount_capturable_updated" event.
// Occurs when a PaymentIntent has funds to be captured. Check the `amount_capturable` property on the PaymentIntent to determine the amount that can be captured. You may capture the PaymentIntent with an `amount_to_capture` value up to the specified amount. [Learn more about capturing PaymentIntents.](https://docs.stripe.com/api/payment_intents/capture).
type V1PaymentIntentAmountCapturableUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*PaymentIntent, error)
}

// FetchRelatedObject fetches the PaymentIntent related to the event.
func (e *V1PaymentIntentAmountCapturableUpdatedEvent) FetchRelatedObject(ctx context.Context) (*PaymentIntent, error) {
	return e.fetchRelatedObject()
}

// V1PaymentIntentAmountCapturableUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v1.payment_intent.amount_capturable_updated"
// Occurs when a PaymentIntent has funds to be captured. Check the `amount_capturable` property on the PaymentIntent to determine the amount that can be captured. You may capture the PaymentIntent with an `amount_to_capture` value up to the specified amount. [Learn more about capturing PaymentIntents.](https://docs.stripe.com/api/payment_intents/capture).
type V1PaymentIntentAmountCapturableUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1PaymentIntentAmountCapturableUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1PaymentIntentAmountCapturableUpdatedEvent that created this Notification
func (en *V1PaymentIntentAmountCapturableUpdatedEventNotification) FetchEvent(ctx context.Context) (*V1PaymentIntentAmountCapturableUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1PaymentIntentAmountCapturableUpdatedEvent), nil
}

// FetchRelatedObject fetches the PaymentIntent related to the event.
func (en *V1PaymentIntentAmountCapturableUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*PaymentIntent, error) {
	relatedObj := &PaymentIntent{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1PaymentIntentCanceledEvent is the Go struct for the "v1.payment_intent.canceled" event.
// Occurs when a PaymentIntent is canceled.
type V1PaymentIntentCanceledEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*PaymentIntent, error)
}

// FetchRelatedObject fetches the PaymentIntent related to the event.
func (e *V1PaymentIntentCanceledEvent) FetchRelatedObject(ctx context.Context) (*PaymentIntent, error) {
	return e.fetchRelatedObject()
}

// V1PaymentIntentCanceledEventNotification is the webhook payload you'll get when handling an event with type "v1.payment_intent.canceled"
// Occurs when a PaymentIntent is canceled.
type V1PaymentIntentCanceledEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1PaymentIntentCanceledEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1PaymentIntentCanceledEvent that created this Notification
func (en *V1PaymentIntentCanceledEventNotification) FetchEvent(ctx context.Context) (*V1PaymentIntentCanceledEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1PaymentIntentCanceledEvent), nil
}

// FetchRelatedObject fetches the PaymentIntent related to the event.
func (en *V1PaymentIntentCanceledEventNotification) FetchRelatedObject(ctx context.Context) (*PaymentIntent, error) {
	relatedObj := &PaymentIntent{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1PaymentIntentCreatedEvent is the Go struct for the "v1.payment_intent.created" event.
// Occurs when a new PaymentIntent is created.
type V1PaymentIntentCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*PaymentIntent, error)
}

// FetchRelatedObject fetches the PaymentIntent related to the event.
func (e *V1PaymentIntentCreatedEvent) FetchRelatedObject(ctx context.Context) (*PaymentIntent, error) {
	return e.fetchRelatedObject()
}

// V1PaymentIntentCreatedEventNotification is the webhook payload you'll get when handling an event with type "v1.payment_intent.created"
// Occurs when a new PaymentIntent is created.
type V1PaymentIntentCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1PaymentIntentCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1PaymentIntentCreatedEvent that created this Notification
func (en *V1PaymentIntentCreatedEventNotification) FetchEvent(ctx context.Context) (*V1PaymentIntentCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1PaymentIntentCreatedEvent), nil
}

// FetchRelatedObject fetches the PaymentIntent related to the event.
func (en *V1PaymentIntentCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*PaymentIntent, error) {
	relatedObj := &PaymentIntent{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1PaymentIntentPartiallyFundedEvent is the Go struct for the "v1.payment_intent.partially_funded" event.
// Occurs when funds are applied to a customer_balance PaymentIntent and the 'amount_remaining' changes.
type V1PaymentIntentPartiallyFundedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*PaymentIntent, error)
}

// FetchRelatedObject fetches the PaymentIntent related to the event.
func (e *V1PaymentIntentPartiallyFundedEvent) FetchRelatedObject(ctx context.Context) (*PaymentIntent, error) {
	return e.fetchRelatedObject()
}

// V1PaymentIntentPartiallyFundedEventNotification is the webhook payload you'll get when handling an event with type "v1.payment_intent.partially_funded"
// Occurs when funds are applied to a customer_balance PaymentIntent and the 'amount_remaining' changes.
type V1PaymentIntentPartiallyFundedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1PaymentIntentPartiallyFundedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1PaymentIntentPartiallyFundedEvent that created this Notification
func (en *V1PaymentIntentPartiallyFundedEventNotification) FetchEvent(ctx context.Context) (*V1PaymentIntentPartiallyFundedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1PaymentIntentPartiallyFundedEvent), nil
}

// FetchRelatedObject fetches the PaymentIntent related to the event.
func (en *V1PaymentIntentPartiallyFundedEventNotification) FetchRelatedObject(ctx context.Context) (*PaymentIntent, error) {
	relatedObj := &PaymentIntent{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1PaymentIntentPaymentFailedEvent is the Go struct for the "v1.payment_intent.payment_failed" event.
// Occurs when a PaymentIntent has failed the attempt to create a payment method or a payment.
type V1PaymentIntentPaymentFailedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*PaymentIntent, error)
}

// FetchRelatedObject fetches the PaymentIntent related to the event.
func (e *V1PaymentIntentPaymentFailedEvent) FetchRelatedObject(ctx context.Context) (*PaymentIntent, error) {
	return e.fetchRelatedObject()
}

// V1PaymentIntentPaymentFailedEventNotification is the webhook payload you'll get when handling an event with type "v1.payment_intent.payment_failed"
// Occurs when a PaymentIntent has failed the attempt to create a payment method or a payment.
type V1PaymentIntentPaymentFailedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1PaymentIntentPaymentFailedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1PaymentIntentPaymentFailedEvent that created this Notification
func (en *V1PaymentIntentPaymentFailedEventNotification) FetchEvent(ctx context.Context) (*V1PaymentIntentPaymentFailedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1PaymentIntentPaymentFailedEvent), nil
}

// FetchRelatedObject fetches the PaymentIntent related to the event.
func (en *V1PaymentIntentPaymentFailedEventNotification) FetchRelatedObject(ctx context.Context) (*PaymentIntent, error) {
	relatedObj := &PaymentIntent{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1PaymentIntentProcessingEvent is the Go struct for the "v1.payment_intent.processing" event.
// Occurs when a PaymentIntent has started processing.
type V1PaymentIntentProcessingEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*PaymentIntent, error)
}

// FetchRelatedObject fetches the PaymentIntent related to the event.
func (e *V1PaymentIntentProcessingEvent) FetchRelatedObject(ctx context.Context) (*PaymentIntent, error) {
	return e.fetchRelatedObject()
}

// V1PaymentIntentProcessingEventNotification is the webhook payload you'll get when handling an event with type "v1.payment_intent.processing"
// Occurs when a PaymentIntent has started processing.
type V1PaymentIntentProcessingEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1PaymentIntentProcessingEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1PaymentIntentProcessingEvent that created this Notification
func (en *V1PaymentIntentProcessingEventNotification) FetchEvent(ctx context.Context) (*V1PaymentIntentProcessingEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1PaymentIntentProcessingEvent), nil
}

// FetchRelatedObject fetches the PaymentIntent related to the event.
func (en *V1PaymentIntentProcessingEventNotification) FetchRelatedObject(ctx context.Context) (*PaymentIntent, error) {
	relatedObj := &PaymentIntent{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1PaymentIntentRequiresActionEvent is the Go struct for the "v1.payment_intent.requires_action" event.
// Occurs when a PaymentIntent transitions to requires_action state.
type V1PaymentIntentRequiresActionEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*PaymentIntent, error)
}

// FetchRelatedObject fetches the PaymentIntent related to the event.
func (e *V1PaymentIntentRequiresActionEvent) FetchRelatedObject(ctx context.Context) (*PaymentIntent, error) {
	return e.fetchRelatedObject()
}

// V1PaymentIntentRequiresActionEventNotification is the webhook payload you'll get when handling an event with type "v1.payment_intent.requires_action"
// Occurs when a PaymentIntent transitions to requires_action state.
type V1PaymentIntentRequiresActionEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1PaymentIntentRequiresActionEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1PaymentIntentRequiresActionEvent that created this Notification
func (en *V1PaymentIntentRequiresActionEventNotification) FetchEvent(ctx context.Context) (*V1PaymentIntentRequiresActionEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1PaymentIntentRequiresActionEvent), nil
}

// FetchRelatedObject fetches the PaymentIntent related to the event.
func (en *V1PaymentIntentRequiresActionEventNotification) FetchRelatedObject(ctx context.Context) (*PaymentIntent, error) {
	relatedObj := &PaymentIntent{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1PaymentIntentSucceededEvent is the Go struct for the "v1.payment_intent.succeeded" event.
// Occurs when a PaymentIntent has successfully completed payment.
type V1PaymentIntentSucceededEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*PaymentIntent, error)
}

// FetchRelatedObject fetches the PaymentIntent related to the event.
func (e *V1PaymentIntentSucceededEvent) FetchRelatedObject(ctx context.Context) (*PaymentIntent, error) {
	return e.fetchRelatedObject()
}

// V1PaymentIntentSucceededEventNotification is the webhook payload you'll get when handling an event with type "v1.payment_intent.succeeded"
// Occurs when a PaymentIntent has successfully completed payment.
type V1PaymentIntentSucceededEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1PaymentIntentSucceededEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1PaymentIntentSucceededEvent that created this Notification
func (en *V1PaymentIntentSucceededEventNotification) FetchEvent(ctx context.Context) (*V1PaymentIntentSucceededEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1PaymentIntentSucceededEvent), nil
}

// FetchRelatedObject fetches the PaymentIntent related to the event.
func (en *V1PaymentIntentSucceededEventNotification) FetchRelatedObject(ctx context.Context) (*PaymentIntent, error) {
	relatedObj := &PaymentIntent{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1PaymentLinkCreatedEvent is the Go struct for the "v1.payment_link.created" event.
// Occurs when a payment link is created.
type V1PaymentLinkCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*PaymentLink, error)
}

// FetchRelatedObject fetches the PaymentLink related to the event.
func (e *V1PaymentLinkCreatedEvent) FetchRelatedObject(ctx context.Context) (*PaymentLink, error) {
	return e.fetchRelatedObject()
}

// V1PaymentLinkCreatedEventNotification is the webhook payload you'll get when handling an event with type "v1.payment_link.created"
// Occurs when a payment link is created.
type V1PaymentLinkCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1PaymentLinkCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1PaymentLinkCreatedEvent that created this Notification
func (en *V1PaymentLinkCreatedEventNotification) FetchEvent(ctx context.Context) (*V1PaymentLinkCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1PaymentLinkCreatedEvent), nil
}

// FetchRelatedObject fetches the PaymentLink related to the event.
func (en *V1PaymentLinkCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*PaymentLink, error) {
	relatedObj := &PaymentLink{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1PaymentLinkUpdatedEvent is the Go struct for the "v1.payment_link.updated" event.
// Occurs when a payment link is updated.
type V1PaymentLinkUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*PaymentLink, error)
}

// FetchRelatedObject fetches the PaymentLink related to the event.
func (e *V1PaymentLinkUpdatedEvent) FetchRelatedObject(ctx context.Context) (*PaymentLink, error) {
	return e.fetchRelatedObject()
}

// V1PaymentLinkUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v1.payment_link.updated"
// Occurs when a payment link is updated.
type V1PaymentLinkUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1PaymentLinkUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1PaymentLinkUpdatedEvent that created this Notification
func (en *V1PaymentLinkUpdatedEventNotification) FetchEvent(ctx context.Context) (*V1PaymentLinkUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1PaymentLinkUpdatedEvent), nil
}

// FetchRelatedObject fetches the PaymentLink related to the event.
func (en *V1PaymentLinkUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*PaymentLink, error) {
	relatedObj := &PaymentLink{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1PaymentMethodAttachedEvent is the Go struct for the "v1.payment_method.attached" event.
// Occurs whenever a new payment method is attached to a customer.
type V1PaymentMethodAttachedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*PaymentMethod, error)
}

// FetchRelatedObject fetches the PaymentMethod related to the event.
func (e *V1PaymentMethodAttachedEvent) FetchRelatedObject(ctx context.Context) (*PaymentMethod, error) {
	return e.fetchRelatedObject()
}

// V1PaymentMethodAttachedEventNotification is the webhook payload you'll get when handling an event with type "v1.payment_method.attached"
// Occurs whenever a new payment method is attached to a customer.
type V1PaymentMethodAttachedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1PaymentMethodAttachedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1PaymentMethodAttachedEvent that created this Notification
func (en *V1PaymentMethodAttachedEventNotification) FetchEvent(ctx context.Context) (*V1PaymentMethodAttachedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1PaymentMethodAttachedEvent), nil
}

// FetchRelatedObject fetches the PaymentMethod related to the event.
func (en *V1PaymentMethodAttachedEventNotification) FetchRelatedObject(ctx context.Context) (*PaymentMethod, error) {
	relatedObj := &PaymentMethod{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1PaymentMethodAutomaticallyUpdatedEvent is the Go struct for the "v1.payment_method.automatically_updated" event.
// Occurs whenever a payment method's details are automatically updated by the network.
type V1PaymentMethodAutomaticallyUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*PaymentMethod, error)
}

// FetchRelatedObject fetches the PaymentMethod related to the event.
func (e *V1PaymentMethodAutomaticallyUpdatedEvent) FetchRelatedObject(ctx context.Context) (*PaymentMethod, error) {
	return e.fetchRelatedObject()
}

// V1PaymentMethodAutomaticallyUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v1.payment_method.automatically_updated"
// Occurs whenever a payment method's details are automatically updated by the network.
type V1PaymentMethodAutomaticallyUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1PaymentMethodAutomaticallyUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1PaymentMethodAutomaticallyUpdatedEvent that created this Notification
func (en *V1PaymentMethodAutomaticallyUpdatedEventNotification) FetchEvent(ctx context.Context) (*V1PaymentMethodAutomaticallyUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1PaymentMethodAutomaticallyUpdatedEvent), nil
}

// FetchRelatedObject fetches the PaymentMethod related to the event.
func (en *V1PaymentMethodAutomaticallyUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*PaymentMethod, error) {
	relatedObj := &PaymentMethod{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1PaymentMethodDetachedEvent is the Go struct for the "v1.payment_method.detached" event.
// Occurs whenever a payment method is detached from a customer.
type V1PaymentMethodDetachedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*PaymentMethod, error)
}

// FetchRelatedObject fetches the PaymentMethod related to the event.
func (e *V1PaymentMethodDetachedEvent) FetchRelatedObject(ctx context.Context) (*PaymentMethod, error) {
	return e.fetchRelatedObject()
}

// V1PaymentMethodDetachedEventNotification is the webhook payload you'll get when handling an event with type "v1.payment_method.detached"
// Occurs whenever a payment method is detached from a customer.
type V1PaymentMethodDetachedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1PaymentMethodDetachedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1PaymentMethodDetachedEvent that created this Notification
func (en *V1PaymentMethodDetachedEventNotification) FetchEvent(ctx context.Context) (*V1PaymentMethodDetachedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1PaymentMethodDetachedEvent), nil
}

// FetchRelatedObject fetches the PaymentMethod related to the event.
func (en *V1PaymentMethodDetachedEventNotification) FetchRelatedObject(ctx context.Context) (*PaymentMethod, error) {
	relatedObj := &PaymentMethod{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1PaymentMethodUpdatedEvent is the Go struct for the "v1.payment_method.updated" event.
// Occurs whenever a payment method is updated via the [PaymentMethod update API](https://docs.stripe.com/api/payment_methods/update).
type V1PaymentMethodUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*PaymentMethod, error)
}

// FetchRelatedObject fetches the PaymentMethod related to the event.
func (e *V1PaymentMethodUpdatedEvent) FetchRelatedObject(ctx context.Context) (*PaymentMethod, error) {
	return e.fetchRelatedObject()
}

// V1PaymentMethodUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v1.payment_method.updated"
// Occurs whenever a payment method is updated via the [PaymentMethod update API](https://docs.stripe.com/api/payment_methods/update).
type V1PaymentMethodUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1PaymentMethodUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1PaymentMethodUpdatedEvent that created this Notification
func (en *V1PaymentMethodUpdatedEventNotification) FetchEvent(ctx context.Context) (*V1PaymentMethodUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1PaymentMethodUpdatedEvent), nil
}

// FetchRelatedObject fetches the PaymentMethod related to the event.
func (en *V1PaymentMethodUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*PaymentMethod, error) {
	relatedObj := &PaymentMethod{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1PayoutCanceledEvent is the Go struct for the "v1.payout.canceled" event.
// Occurs whenever a payout is canceled.
type V1PayoutCanceledEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Payout, error)
}

// FetchRelatedObject fetches the Payout related to the event.
func (e *V1PayoutCanceledEvent) FetchRelatedObject(ctx context.Context) (*Payout, error) {
	return e.fetchRelatedObject()
}

// V1PayoutCanceledEventNotification is the webhook payload you'll get when handling an event with type "v1.payout.canceled"
// Occurs whenever a payout is canceled.
type V1PayoutCanceledEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1PayoutCanceledEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1PayoutCanceledEvent that created this Notification
func (en *V1PayoutCanceledEventNotification) FetchEvent(ctx context.Context) (*V1PayoutCanceledEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1PayoutCanceledEvent), nil
}

// FetchRelatedObject fetches the Payout related to the event.
func (en *V1PayoutCanceledEventNotification) FetchRelatedObject(ctx context.Context) (*Payout, error) {
	relatedObj := &Payout{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1PayoutCreatedEvent is the Go struct for the "v1.payout.created" event.
// Occurs whenever a payout is created.
type V1PayoutCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Payout, error)
}

// FetchRelatedObject fetches the Payout related to the event.
func (e *V1PayoutCreatedEvent) FetchRelatedObject(ctx context.Context) (*Payout, error) {
	return e.fetchRelatedObject()
}

// V1PayoutCreatedEventNotification is the webhook payload you'll get when handling an event with type "v1.payout.created"
// Occurs whenever a payout is created.
type V1PayoutCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1PayoutCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1PayoutCreatedEvent that created this Notification
func (en *V1PayoutCreatedEventNotification) FetchEvent(ctx context.Context) (*V1PayoutCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1PayoutCreatedEvent), nil
}

// FetchRelatedObject fetches the Payout related to the event.
func (en *V1PayoutCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*Payout, error) {
	relatedObj := &Payout{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1PayoutFailedEvent is the Go struct for the "v1.payout.failed" event.
// Occurs whenever a payout attempt fails.
type V1PayoutFailedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Payout, error)
}

// FetchRelatedObject fetches the Payout related to the event.
func (e *V1PayoutFailedEvent) FetchRelatedObject(ctx context.Context) (*Payout, error) {
	return e.fetchRelatedObject()
}

// V1PayoutFailedEventNotification is the webhook payload you'll get when handling an event with type "v1.payout.failed"
// Occurs whenever a payout attempt fails.
type V1PayoutFailedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1PayoutFailedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1PayoutFailedEvent that created this Notification
func (en *V1PayoutFailedEventNotification) FetchEvent(ctx context.Context) (*V1PayoutFailedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1PayoutFailedEvent), nil
}

// FetchRelatedObject fetches the Payout related to the event.
func (en *V1PayoutFailedEventNotification) FetchRelatedObject(ctx context.Context) (*Payout, error) {
	relatedObj := &Payout{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1PayoutPaidEvent is the Go struct for the "v1.payout.paid" event.
// Occurs whenever a payout is *expected* to be available in the destination account. If the payout fails, a `payout.failed` notification is also sent, at a later time.
type V1PayoutPaidEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Payout, error)
}

// FetchRelatedObject fetches the Payout related to the event.
func (e *V1PayoutPaidEvent) FetchRelatedObject(ctx context.Context) (*Payout, error) {
	return e.fetchRelatedObject()
}

// V1PayoutPaidEventNotification is the webhook payload you'll get when handling an event with type "v1.payout.paid"
// Occurs whenever a payout is *expected* to be available in the destination account. If the payout fails, a `payout.failed` notification is also sent, at a later time.
type V1PayoutPaidEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1PayoutPaidEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1PayoutPaidEvent that created this Notification
func (en *V1PayoutPaidEventNotification) FetchEvent(ctx context.Context) (*V1PayoutPaidEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1PayoutPaidEvent), nil
}

// FetchRelatedObject fetches the Payout related to the event.
func (en *V1PayoutPaidEventNotification) FetchRelatedObject(ctx context.Context) (*Payout, error) {
	relatedObj := &Payout{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1PayoutReconciliationCompletedEvent is the Go struct for the "v1.payout.reconciliation_completed" event.
// Occurs whenever balance transactions paid out in an automatic payout can be queried.
type V1PayoutReconciliationCompletedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Payout, error)
}

// FetchRelatedObject fetches the Payout related to the event.
func (e *V1PayoutReconciliationCompletedEvent) FetchRelatedObject(ctx context.Context) (*Payout, error) {
	return e.fetchRelatedObject()
}

// V1PayoutReconciliationCompletedEventNotification is the webhook payload you'll get when handling an event with type "v1.payout.reconciliation_completed"
// Occurs whenever balance transactions paid out in an automatic payout can be queried.
type V1PayoutReconciliationCompletedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1PayoutReconciliationCompletedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1PayoutReconciliationCompletedEvent that created this Notification
func (en *V1PayoutReconciliationCompletedEventNotification) FetchEvent(ctx context.Context) (*V1PayoutReconciliationCompletedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1PayoutReconciliationCompletedEvent), nil
}

// FetchRelatedObject fetches the Payout related to the event.
func (en *V1PayoutReconciliationCompletedEventNotification) FetchRelatedObject(ctx context.Context) (*Payout, error) {
	relatedObj := &Payout{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1PayoutUpdatedEvent is the Go struct for the "v1.payout.updated" event.
// Occurs whenever a payout is updated.
type V1PayoutUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Payout, error)
}

// FetchRelatedObject fetches the Payout related to the event.
func (e *V1PayoutUpdatedEvent) FetchRelatedObject(ctx context.Context) (*Payout, error) {
	return e.fetchRelatedObject()
}

// V1PayoutUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v1.payout.updated"
// Occurs whenever a payout is updated.
type V1PayoutUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1PayoutUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1PayoutUpdatedEvent that created this Notification
func (en *V1PayoutUpdatedEventNotification) FetchEvent(ctx context.Context) (*V1PayoutUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1PayoutUpdatedEvent), nil
}

// FetchRelatedObject fetches the Payout related to the event.
func (en *V1PayoutUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*Payout, error) {
	relatedObj := &Payout{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1PersonCreatedEvent is the Go struct for the "v1.person.created" event.
// Occurs whenever a person associated with an account is created.
type V1PersonCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Person, error)
}

// FetchRelatedObject fetches the Person related to the event.
func (e *V1PersonCreatedEvent) FetchRelatedObject(ctx context.Context) (*Person, error) {
	return e.fetchRelatedObject()
}

// V1PersonCreatedEventNotification is the webhook payload you'll get when handling an event with type "v1.person.created"
// Occurs whenever a person associated with an account is created.
type V1PersonCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1PersonCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1PersonCreatedEvent that created this Notification
func (en *V1PersonCreatedEventNotification) FetchEvent(ctx context.Context) (*V1PersonCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1PersonCreatedEvent), nil
}

// FetchRelatedObject fetches the Person related to the event.
func (en *V1PersonCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*Person, error) {
	relatedObj := &Person{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1PersonDeletedEvent is the Go struct for the "v1.person.deleted" event.
// Occurs whenever a person associated with an account is deleted.
type V1PersonDeletedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Person, error)
}

// FetchRelatedObject fetches the Person related to the event.
func (e *V1PersonDeletedEvent) FetchRelatedObject(ctx context.Context) (*Person, error) {
	return e.fetchRelatedObject()
}

// V1PersonDeletedEventNotification is the webhook payload you'll get when handling an event with type "v1.person.deleted"
// Occurs whenever a person associated with an account is deleted.
type V1PersonDeletedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1PersonDeletedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1PersonDeletedEvent that created this Notification
func (en *V1PersonDeletedEventNotification) FetchEvent(ctx context.Context) (*V1PersonDeletedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1PersonDeletedEvent), nil
}

// FetchRelatedObject fetches the Person related to the event.
func (en *V1PersonDeletedEventNotification) FetchRelatedObject(ctx context.Context) (*Person, error) {
	relatedObj := &Person{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1PersonUpdatedEvent is the Go struct for the "v1.person.updated" event.
// Occurs whenever a person associated with an account is updated.
type V1PersonUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Person, error)
}

// FetchRelatedObject fetches the Person related to the event.
func (e *V1PersonUpdatedEvent) FetchRelatedObject(ctx context.Context) (*Person, error) {
	return e.fetchRelatedObject()
}

// V1PersonUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v1.person.updated"
// Occurs whenever a person associated with an account is updated.
type V1PersonUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1PersonUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1PersonUpdatedEvent that created this Notification
func (en *V1PersonUpdatedEventNotification) FetchEvent(ctx context.Context) (*V1PersonUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1PersonUpdatedEvent), nil
}

// FetchRelatedObject fetches the Person related to the event.
func (en *V1PersonUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*Person, error) {
	relatedObj := &Person{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1PlanCreatedEvent is the Go struct for the "v1.plan.created" event.
// Occurs whenever a plan is created.
type V1PlanCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Plan, error)
}

// FetchRelatedObject fetches the Plan related to the event.
func (e *V1PlanCreatedEvent) FetchRelatedObject(ctx context.Context) (*Plan, error) {
	return e.fetchRelatedObject()
}

// V1PlanCreatedEventNotification is the webhook payload you'll get when handling an event with type "v1.plan.created"
// Occurs whenever a plan is created.
type V1PlanCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1PlanCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1PlanCreatedEvent that created this Notification
func (en *V1PlanCreatedEventNotification) FetchEvent(ctx context.Context) (*V1PlanCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1PlanCreatedEvent), nil
}

// FetchRelatedObject fetches the Plan related to the event.
func (en *V1PlanCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*Plan, error) {
	relatedObj := &Plan{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1PlanDeletedEvent is the Go struct for the "v1.plan.deleted" event.
// Occurs whenever a plan is deleted.
type V1PlanDeletedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Plan, error)
}

// FetchRelatedObject fetches the Plan related to the event.
func (e *V1PlanDeletedEvent) FetchRelatedObject(ctx context.Context) (*Plan, error) {
	return e.fetchRelatedObject()
}

// V1PlanDeletedEventNotification is the webhook payload you'll get when handling an event with type "v1.plan.deleted"
// Occurs whenever a plan is deleted.
type V1PlanDeletedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1PlanDeletedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1PlanDeletedEvent that created this Notification
func (en *V1PlanDeletedEventNotification) FetchEvent(ctx context.Context) (*V1PlanDeletedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1PlanDeletedEvent), nil
}

// FetchRelatedObject fetches the Plan related to the event.
func (en *V1PlanDeletedEventNotification) FetchRelatedObject(ctx context.Context) (*Plan, error) {
	relatedObj := &Plan{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1PlanUpdatedEvent is the Go struct for the "v1.plan.updated" event.
// Occurs whenever a plan is updated.
type V1PlanUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Plan, error)
}

// FetchRelatedObject fetches the Plan related to the event.
func (e *V1PlanUpdatedEvent) FetchRelatedObject(ctx context.Context) (*Plan, error) {
	return e.fetchRelatedObject()
}

// V1PlanUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v1.plan.updated"
// Occurs whenever a plan is updated.
type V1PlanUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1PlanUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1PlanUpdatedEvent that created this Notification
func (en *V1PlanUpdatedEventNotification) FetchEvent(ctx context.Context) (*V1PlanUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1PlanUpdatedEvent), nil
}

// FetchRelatedObject fetches the Plan related to the event.
func (en *V1PlanUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*Plan, error) {
	relatedObj := &Plan{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1PriceCreatedEvent is the Go struct for the "v1.price.created" event.
// Occurs whenever a price is created.
type V1PriceCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Price, error)
}

// FetchRelatedObject fetches the Price related to the event.
func (e *V1PriceCreatedEvent) FetchRelatedObject(ctx context.Context) (*Price, error) {
	return e.fetchRelatedObject()
}

// V1PriceCreatedEventNotification is the webhook payload you'll get when handling an event with type "v1.price.created"
// Occurs whenever a price is created.
type V1PriceCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1PriceCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1PriceCreatedEvent that created this Notification
func (en *V1PriceCreatedEventNotification) FetchEvent(ctx context.Context) (*V1PriceCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1PriceCreatedEvent), nil
}

// FetchRelatedObject fetches the Price related to the event.
func (en *V1PriceCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*Price, error) {
	relatedObj := &Price{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1PriceDeletedEvent is the Go struct for the "v1.price.deleted" event.
// Occurs whenever a price is deleted.
type V1PriceDeletedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Price, error)
}

// FetchRelatedObject fetches the Price related to the event.
func (e *V1PriceDeletedEvent) FetchRelatedObject(ctx context.Context) (*Price, error) {
	return e.fetchRelatedObject()
}

// V1PriceDeletedEventNotification is the webhook payload you'll get when handling an event with type "v1.price.deleted"
// Occurs whenever a price is deleted.
type V1PriceDeletedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1PriceDeletedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1PriceDeletedEvent that created this Notification
func (en *V1PriceDeletedEventNotification) FetchEvent(ctx context.Context) (*V1PriceDeletedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1PriceDeletedEvent), nil
}

// FetchRelatedObject fetches the Price related to the event.
func (en *V1PriceDeletedEventNotification) FetchRelatedObject(ctx context.Context) (*Price, error) {
	relatedObj := &Price{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1PriceUpdatedEvent is the Go struct for the "v1.price.updated" event.
// Occurs whenever a price is updated.
type V1PriceUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Price, error)
}

// FetchRelatedObject fetches the Price related to the event.
func (e *V1PriceUpdatedEvent) FetchRelatedObject(ctx context.Context) (*Price, error) {
	return e.fetchRelatedObject()
}

// V1PriceUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v1.price.updated"
// Occurs whenever a price is updated.
type V1PriceUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1PriceUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1PriceUpdatedEvent that created this Notification
func (en *V1PriceUpdatedEventNotification) FetchEvent(ctx context.Context) (*V1PriceUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1PriceUpdatedEvent), nil
}

// FetchRelatedObject fetches the Price related to the event.
func (en *V1PriceUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*Price, error) {
	relatedObj := &Price{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1ProductCreatedEvent is the Go struct for the "v1.product.created" event.
// Occurs whenever a product is created.
type V1ProductCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Product, error)
}

// FetchRelatedObject fetches the Product related to the event.
func (e *V1ProductCreatedEvent) FetchRelatedObject(ctx context.Context) (*Product, error) {
	return e.fetchRelatedObject()
}

// V1ProductCreatedEventNotification is the webhook payload you'll get when handling an event with type "v1.product.created"
// Occurs whenever a product is created.
type V1ProductCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1ProductCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1ProductCreatedEvent that created this Notification
func (en *V1ProductCreatedEventNotification) FetchEvent(ctx context.Context) (*V1ProductCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1ProductCreatedEvent), nil
}

// FetchRelatedObject fetches the Product related to the event.
func (en *V1ProductCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*Product, error) {
	relatedObj := &Product{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1ProductDeletedEvent is the Go struct for the "v1.product.deleted" event.
// Occurs whenever a product is deleted.
type V1ProductDeletedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Product, error)
}

// FetchRelatedObject fetches the Product related to the event.
func (e *V1ProductDeletedEvent) FetchRelatedObject(ctx context.Context) (*Product, error) {
	return e.fetchRelatedObject()
}

// V1ProductDeletedEventNotification is the webhook payload you'll get when handling an event with type "v1.product.deleted"
// Occurs whenever a product is deleted.
type V1ProductDeletedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1ProductDeletedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1ProductDeletedEvent that created this Notification
func (en *V1ProductDeletedEventNotification) FetchEvent(ctx context.Context) (*V1ProductDeletedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1ProductDeletedEvent), nil
}

// FetchRelatedObject fetches the Product related to the event.
func (en *V1ProductDeletedEventNotification) FetchRelatedObject(ctx context.Context) (*Product, error) {
	relatedObj := &Product{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1ProductUpdatedEvent is the Go struct for the "v1.product.updated" event.
// Occurs whenever a product is updated.
type V1ProductUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Product, error)
}

// FetchRelatedObject fetches the Product related to the event.
func (e *V1ProductUpdatedEvent) FetchRelatedObject(ctx context.Context) (*Product, error) {
	return e.fetchRelatedObject()
}

// V1ProductUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v1.product.updated"
// Occurs whenever a product is updated.
type V1ProductUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1ProductUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1ProductUpdatedEvent that created this Notification
func (en *V1ProductUpdatedEventNotification) FetchEvent(ctx context.Context) (*V1ProductUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1ProductUpdatedEvent), nil
}

// FetchRelatedObject fetches the Product related to the event.
func (en *V1ProductUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*Product, error) {
	relatedObj := &Product{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1PromotionCodeCreatedEvent is the Go struct for the "v1.promotion_code.created" event.
// Occurs whenever a promotion code is created.
type V1PromotionCodeCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*PromotionCode, error)
}

// FetchRelatedObject fetches the PromotionCode related to the event.
func (e *V1PromotionCodeCreatedEvent) FetchRelatedObject(ctx context.Context) (*PromotionCode, error) {
	return e.fetchRelatedObject()
}

// V1PromotionCodeCreatedEventNotification is the webhook payload you'll get when handling an event with type "v1.promotion_code.created"
// Occurs whenever a promotion code is created.
type V1PromotionCodeCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1PromotionCodeCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1PromotionCodeCreatedEvent that created this Notification
func (en *V1PromotionCodeCreatedEventNotification) FetchEvent(ctx context.Context) (*V1PromotionCodeCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1PromotionCodeCreatedEvent), nil
}

// FetchRelatedObject fetches the PromotionCode related to the event.
func (en *V1PromotionCodeCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*PromotionCode, error) {
	relatedObj := &PromotionCode{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1PromotionCodeUpdatedEvent is the Go struct for the "v1.promotion_code.updated" event.
// Occurs whenever a promotion code is updated.
type V1PromotionCodeUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*PromotionCode, error)
}

// FetchRelatedObject fetches the PromotionCode related to the event.
func (e *V1PromotionCodeUpdatedEvent) FetchRelatedObject(ctx context.Context) (*PromotionCode, error) {
	return e.fetchRelatedObject()
}

// V1PromotionCodeUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v1.promotion_code.updated"
// Occurs whenever a promotion code is updated.
type V1PromotionCodeUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1PromotionCodeUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1PromotionCodeUpdatedEvent that created this Notification
func (en *V1PromotionCodeUpdatedEventNotification) FetchEvent(ctx context.Context) (*V1PromotionCodeUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1PromotionCodeUpdatedEvent), nil
}

// FetchRelatedObject fetches the PromotionCode related to the event.
func (en *V1PromotionCodeUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*PromotionCode, error) {
	relatedObj := &PromotionCode{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1QuoteAcceptedEvent is the Go struct for the "v1.quote.accepted" event.
// Occurs whenever a quote is accepted.
type V1QuoteAcceptedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Quote, error)
}

// FetchRelatedObject fetches the Quote related to the event.
func (e *V1QuoteAcceptedEvent) FetchRelatedObject(ctx context.Context) (*Quote, error) {
	return e.fetchRelatedObject()
}

// V1QuoteAcceptedEventNotification is the webhook payload you'll get when handling an event with type "v1.quote.accepted"
// Occurs whenever a quote is accepted.
type V1QuoteAcceptedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1QuoteAcceptedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1QuoteAcceptedEvent that created this Notification
func (en *V1QuoteAcceptedEventNotification) FetchEvent(ctx context.Context) (*V1QuoteAcceptedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1QuoteAcceptedEvent), nil
}

// FetchRelatedObject fetches the Quote related to the event.
func (en *V1QuoteAcceptedEventNotification) FetchRelatedObject(ctx context.Context) (*Quote, error) {
	relatedObj := &Quote{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1QuoteCanceledEvent is the Go struct for the "v1.quote.canceled" event.
// Occurs whenever a quote is canceled.
type V1QuoteCanceledEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Quote, error)
}

// FetchRelatedObject fetches the Quote related to the event.
func (e *V1QuoteCanceledEvent) FetchRelatedObject(ctx context.Context) (*Quote, error) {
	return e.fetchRelatedObject()
}

// V1QuoteCanceledEventNotification is the webhook payload you'll get when handling an event with type "v1.quote.canceled"
// Occurs whenever a quote is canceled.
type V1QuoteCanceledEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1QuoteCanceledEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1QuoteCanceledEvent that created this Notification
func (en *V1QuoteCanceledEventNotification) FetchEvent(ctx context.Context) (*V1QuoteCanceledEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1QuoteCanceledEvent), nil
}

// FetchRelatedObject fetches the Quote related to the event.
func (en *V1QuoteCanceledEventNotification) FetchRelatedObject(ctx context.Context) (*Quote, error) {
	relatedObj := &Quote{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1QuoteCreatedEvent is the Go struct for the "v1.quote.created" event.
// Occurs whenever a quote is created.
type V1QuoteCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Quote, error)
}

// FetchRelatedObject fetches the Quote related to the event.
func (e *V1QuoteCreatedEvent) FetchRelatedObject(ctx context.Context) (*Quote, error) {
	return e.fetchRelatedObject()
}

// V1QuoteCreatedEventNotification is the webhook payload you'll get when handling an event with type "v1.quote.created"
// Occurs whenever a quote is created.
type V1QuoteCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1QuoteCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1QuoteCreatedEvent that created this Notification
func (en *V1QuoteCreatedEventNotification) FetchEvent(ctx context.Context) (*V1QuoteCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1QuoteCreatedEvent), nil
}

// FetchRelatedObject fetches the Quote related to the event.
func (en *V1QuoteCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*Quote, error) {
	relatedObj := &Quote{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1QuoteFinalizedEvent is the Go struct for the "v1.quote.finalized" event.
// Occurs whenever a quote is finalized.
type V1QuoteFinalizedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Quote, error)
}

// FetchRelatedObject fetches the Quote related to the event.
func (e *V1QuoteFinalizedEvent) FetchRelatedObject(ctx context.Context) (*Quote, error) {
	return e.fetchRelatedObject()
}

// V1QuoteFinalizedEventNotification is the webhook payload you'll get when handling an event with type "v1.quote.finalized"
// Occurs whenever a quote is finalized.
type V1QuoteFinalizedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1QuoteFinalizedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1QuoteFinalizedEvent that created this Notification
func (en *V1QuoteFinalizedEventNotification) FetchEvent(ctx context.Context) (*V1QuoteFinalizedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1QuoteFinalizedEvent), nil
}

// FetchRelatedObject fetches the Quote related to the event.
func (en *V1QuoteFinalizedEventNotification) FetchRelatedObject(ctx context.Context) (*Quote, error) {
	relatedObj := &Quote{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1RadarEarlyFraudWarningCreatedEvent is the Go struct for the "v1.radar.early_fraud_warning.created" event.
// Occurs whenever an early fraud warning is created.
type V1RadarEarlyFraudWarningCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*RadarEarlyFraudWarning, error)
}

// FetchRelatedObject fetches the RadarEarlyFraudWarning related to the event.
func (e *V1RadarEarlyFraudWarningCreatedEvent) FetchRelatedObject(ctx context.Context) (*RadarEarlyFraudWarning, error) {
	return e.fetchRelatedObject()
}

// V1RadarEarlyFraudWarningCreatedEventNotification is the webhook payload you'll get when handling an event with type "v1.radar.early_fraud_warning.created"
// Occurs whenever an early fraud warning is created.
type V1RadarEarlyFraudWarningCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1RadarEarlyFraudWarningCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1RadarEarlyFraudWarningCreatedEvent that created this Notification
func (en *V1RadarEarlyFraudWarningCreatedEventNotification) FetchEvent(ctx context.Context) (*V1RadarEarlyFraudWarningCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1RadarEarlyFraudWarningCreatedEvent), nil
}

// FetchRelatedObject fetches the RadarEarlyFraudWarning related to the event.
func (en *V1RadarEarlyFraudWarningCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*RadarEarlyFraudWarning, error) {
	relatedObj := &RadarEarlyFraudWarning{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1RadarEarlyFraudWarningUpdatedEvent is the Go struct for the "v1.radar.early_fraud_warning.updated" event.
// Occurs whenever an early fraud warning is updated.
type V1RadarEarlyFraudWarningUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*RadarEarlyFraudWarning, error)
}

// FetchRelatedObject fetches the RadarEarlyFraudWarning related to the event.
func (e *V1RadarEarlyFraudWarningUpdatedEvent) FetchRelatedObject(ctx context.Context) (*RadarEarlyFraudWarning, error) {
	return e.fetchRelatedObject()
}

// V1RadarEarlyFraudWarningUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v1.radar.early_fraud_warning.updated"
// Occurs whenever an early fraud warning is updated.
type V1RadarEarlyFraudWarningUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1RadarEarlyFraudWarningUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1RadarEarlyFraudWarningUpdatedEvent that created this Notification
func (en *V1RadarEarlyFraudWarningUpdatedEventNotification) FetchEvent(ctx context.Context) (*V1RadarEarlyFraudWarningUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1RadarEarlyFraudWarningUpdatedEvent), nil
}

// FetchRelatedObject fetches the RadarEarlyFraudWarning related to the event.
func (en *V1RadarEarlyFraudWarningUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*RadarEarlyFraudWarning, error) {
	relatedObj := &RadarEarlyFraudWarning{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1RefundCreatedEvent is the Go struct for the "v1.refund.created" event.
// Occurs whenever a refund is created.
type V1RefundCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Refund, error)
}

// FetchRelatedObject fetches the Refund related to the event.
func (e *V1RefundCreatedEvent) FetchRelatedObject(ctx context.Context) (*Refund, error) {
	return e.fetchRelatedObject()
}

// V1RefundCreatedEventNotification is the webhook payload you'll get when handling an event with type "v1.refund.created"
// Occurs whenever a refund is created.
type V1RefundCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1RefundCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1RefundCreatedEvent that created this Notification
func (en *V1RefundCreatedEventNotification) FetchEvent(ctx context.Context) (*V1RefundCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1RefundCreatedEvent), nil
}

// FetchRelatedObject fetches the Refund related to the event.
func (en *V1RefundCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*Refund, error) {
	relatedObj := &Refund{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1RefundFailedEvent is the Go struct for the "v1.refund.failed" event.
// Occurs whenever a refund has failed.
type V1RefundFailedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Refund, error)
}

// FetchRelatedObject fetches the Refund related to the event.
func (e *V1RefundFailedEvent) FetchRelatedObject(ctx context.Context) (*Refund, error) {
	return e.fetchRelatedObject()
}

// V1RefundFailedEventNotification is the webhook payload you'll get when handling an event with type "v1.refund.failed"
// Occurs whenever a refund has failed.
type V1RefundFailedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1RefundFailedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1RefundFailedEvent that created this Notification
func (en *V1RefundFailedEventNotification) FetchEvent(ctx context.Context) (*V1RefundFailedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1RefundFailedEvent), nil
}

// FetchRelatedObject fetches the Refund related to the event.
func (en *V1RefundFailedEventNotification) FetchRelatedObject(ctx context.Context) (*Refund, error) {
	relatedObj := &Refund{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1RefundUpdatedEvent is the Go struct for the "v1.refund.updated" event.
// Occurs whenever a refund is updated.
type V1RefundUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Refund, error)
}

// FetchRelatedObject fetches the Refund related to the event.
func (e *V1RefundUpdatedEvent) FetchRelatedObject(ctx context.Context) (*Refund, error) {
	return e.fetchRelatedObject()
}

// V1RefundUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v1.refund.updated"
// Occurs whenever a refund is updated.
type V1RefundUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1RefundUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1RefundUpdatedEvent that created this Notification
func (en *V1RefundUpdatedEventNotification) FetchEvent(ctx context.Context) (*V1RefundUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1RefundUpdatedEvent), nil
}

// FetchRelatedObject fetches the Refund related to the event.
func (en *V1RefundUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*Refund, error) {
	relatedObj := &Refund{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1ReviewClosedEvent is the Go struct for the "v1.review.closed" event.
// Occurs whenever a review is closed. The review's `reason` field indicates why: `approved`, `disputed`, `refunded`, `refunded_as_fraud`, or `canceled`.
type V1ReviewClosedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Review, error)
}

// FetchRelatedObject fetches the Review related to the event.
func (e *V1ReviewClosedEvent) FetchRelatedObject(ctx context.Context) (*Review, error) {
	return e.fetchRelatedObject()
}

// V1ReviewClosedEventNotification is the webhook payload you'll get when handling an event with type "v1.review.closed"
// Occurs whenever a review is closed. The review's `reason` field indicates why: `approved`, `disputed`, `refunded`, `refunded_as_fraud`, or `canceled`.
type V1ReviewClosedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1ReviewClosedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1ReviewClosedEvent that created this Notification
func (en *V1ReviewClosedEventNotification) FetchEvent(ctx context.Context) (*V1ReviewClosedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1ReviewClosedEvent), nil
}

// FetchRelatedObject fetches the Review related to the event.
func (en *V1ReviewClosedEventNotification) FetchRelatedObject(ctx context.Context) (*Review, error) {
	relatedObj := &Review{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1ReviewOpenedEvent is the Go struct for the "v1.review.opened" event.
// Occurs whenever a review is opened.
type V1ReviewOpenedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Review, error)
}

// FetchRelatedObject fetches the Review related to the event.
func (e *V1ReviewOpenedEvent) FetchRelatedObject(ctx context.Context) (*Review, error) {
	return e.fetchRelatedObject()
}

// V1ReviewOpenedEventNotification is the webhook payload you'll get when handling an event with type "v1.review.opened"
// Occurs whenever a review is opened.
type V1ReviewOpenedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1ReviewOpenedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1ReviewOpenedEvent that created this Notification
func (en *V1ReviewOpenedEventNotification) FetchEvent(ctx context.Context) (*V1ReviewOpenedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1ReviewOpenedEvent), nil
}

// FetchRelatedObject fetches the Review related to the event.
func (en *V1ReviewOpenedEventNotification) FetchRelatedObject(ctx context.Context) (*Review, error) {
	relatedObj := &Review{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1SetupIntentCanceledEvent is the Go struct for the "v1.setup_intent.canceled" event.
// Occurs when a SetupIntent is canceled.
type V1SetupIntentCanceledEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*SetupIntent, error)
}

// FetchRelatedObject fetches the SetupIntent related to the event.
func (e *V1SetupIntentCanceledEvent) FetchRelatedObject(ctx context.Context) (*SetupIntent, error) {
	return e.fetchRelatedObject()
}

// V1SetupIntentCanceledEventNotification is the webhook payload you'll get when handling an event with type "v1.setup_intent.canceled"
// Occurs when a SetupIntent is canceled.
type V1SetupIntentCanceledEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1SetupIntentCanceledEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1SetupIntentCanceledEvent that created this Notification
func (en *V1SetupIntentCanceledEventNotification) FetchEvent(ctx context.Context) (*V1SetupIntentCanceledEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1SetupIntentCanceledEvent), nil
}

// FetchRelatedObject fetches the SetupIntent related to the event.
func (en *V1SetupIntentCanceledEventNotification) FetchRelatedObject(ctx context.Context) (*SetupIntent, error) {
	relatedObj := &SetupIntent{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1SetupIntentCreatedEvent is the Go struct for the "v1.setup_intent.created" event.
// Occurs when a new SetupIntent is created.
type V1SetupIntentCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*SetupIntent, error)
}

// FetchRelatedObject fetches the SetupIntent related to the event.
func (e *V1SetupIntentCreatedEvent) FetchRelatedObject(ctx context.Context) (*SetupIntent, error) {
	return e.fetchRelatedObject()
}

// V1SetupIntentCreatedEventNotification is the webhook payload you'll get when handling an event with type "v1.setup_intent.created"
// Occurs when a new SetupIntent is created.
type V1SetupIntentCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1SetupIntentCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1SetupIntentCreatedEvent that created this Notification
func (en *V1SetupIntentCreatedEventNotification) FetchEvent(ctx context.Context) (*V1SetupIntentCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1SetupIntentCreatedEvent), nil
}

// FetchRelatedObject fetches the SetupIntent related to the event.
func (en *V1SetupIntentCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*SetupIntent, error) {
	relatedObj := &SetupIntent{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1SetupIntentRequiresActionEvent is the Go struct for the "v1.setup_intent.requires_action" event.
// Occurs when a SetupIntent is in requires_action state.
type V1SetupIntentRequiresActionEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*SetupIntent, error)
}

// FetchRelatedObject fetches the SetupIntent related to the event.
func (e *V1SetupIntentRequiresActionEvent) FetchRelatedObject(ctx context.Context) (*SetupIntent, error) {
	return e.fetchRelatedObject()
}

// V1SetupIntentRequiresActionEventNotification is the webhook payload you'll get when handling an event with type "v1.setup_intent.requires_action"
// Occurs when a SetupIntent is in requires_action state.
type V1SetupIntentRequiresActionEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1SetupIntentRequiresActionEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1SetupIntentRequiresActionEvent that created this Notification
func (en *V1SetupIntentRequiresActionEventNotification) FetchEvent(ctx context.Context) (*V1SetupIntentRequiresActionEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1SetupIntentRequiresActionEvent), nil
}

// FetchRelatedObject fetches the SetupIntent related to the event.
func (en *V1SetupIntentRequiresActionEventNotification) FetchRelatedObject(ctx context.Context) (*SetupIntent, error) {
	relatedObj := &SetupIntent{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1SetupIntentSetupFailedEvent is the Go struct for the "v1.setup_intent.setup_failed" event.
// Occurs when a SetupIntent has failed the attempt to setup a payment method.
type V1SetupIntentSetupFailedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*SetupIntent, error)
}

// FetchRelatedObject fetches the SetupIntent related to the event.
func (e *V1SetupIntentSetupFailedEvent) FetchRelatedObject(ctx context.Context) (*SetupIntent, error) {
	return e.fetchRelatedObject()
}

// V1SetupIntentSetupFailedEventNotification is the webhook payload you'll get when handling an event with type "v1.setup_intent.setup_failed"
// Occurs when a SetupIntent has failed the attempt to setup a payment method.
type V1SetupIntentSetupFailedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1SetupIntentSetupFailedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1SetupIntentSetupFailedEvent that created this Notification
func (en *V1SetupIntentSetupFailedEventNotification) FetchEvent(ctx context.Context) (*V1SetupIntentSetupFailedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1SetupIntentSetupFailedEvent), nil
}

// FetchRelatedObject fetches the SetupIntent related to the event.
func (en *V1SetupIntentSetupFailedEventNotification) FetchRelatedObject(ctx context.Context) (*SetupIntent, error) {
	relatedObj := &SetupIntent{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1SetupIntentSucceededEvent is the Go struct for the "v1.setup_intent.succeeded" event.
// Occurs when an SetupIntent has successfully setup a payment method.
type V1SetupIntentSucceededEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*SetupIntent, error)
}

// FetchRelatedObject fetches the SetupIntent related to the event.
func (e *V1SetupIntentSucceededEvent) FetchRelatedObject(ctx context.Context) (*SetupIntent, error) {
	return e.fetchRelatedObject()
}

// V1SetupIntentSucceededEventNotification is the webhook payload you'll get when handling an event with type "v1.setup_intent.succeeded"
// Occurs when an SetupIntent has successfully setup a payment method.
type V1SetupIntentSucceededEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1SetupIntentSucceededEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1SetupIntentSucceededEvent that created this Notification
func (en *V1SetupIntentSucceededEventNotification) FetchEvent(ctx context.Context) (*V1SetupIntentSucceededEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1SetupIntentSucceededEvent), nil
}

// FetchRelatedObject fetches the SetupIntent related to the event.
func (en *V1SetupIntentSucceededEventNotification) FetchRelatedObject(ctx context.Context) (*SetupIntent, error) {
	relatedObj := &SetupIntent{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1SigmaScheduledQueryRunCreatedEvent is the Go struct for the "v1.sigma.scheduled_query_run.created" event.
// Occurs whenever a Sigma scheduled query run finishes.
type V1SigmaScheduledQueryRunCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*SigmaScheduledQueryRun, error)
}

// FetchRelatedObject fetches the SigmaScheduledQueryRun related to the event.
func (e *V1SigmaScheduledQueryRunCreatedEvent) FetchRelatedObject(ctx context.Context) (*SigmaScheduledQueryRun, error) {
	return e.fetchRelatedObject()
}

// V1SigmaScheduledQueryRunCreatedEventNotification is the webhook payload you'll get when handling an event with type "v1.sigma.scheduled_query_run.created"
// Occurs whenever a Sigma scheduled query run finishes.
type V1SigmaScheduledQueryRunCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1SigmaScheduledQueryRunCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1SigmaScheduledQueryRunCreatedEvent that created this Notification
func (en *V1SigmaScheduledQueryRunCreatedEventNotification) FetchEvent(ctx context.Context) (*V1SigmaScheduledQueryRunCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1SigmaScheduledQueryRunCreatedEvent), nil
}

// FetchRelatedObject fetches the SigmaScheduledQueryRun related to the event.
func (en *V1SigmaScheduledQueryRunCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*SigmaScheduledQueryRun, error) {
	relatedObj := &SigmaScheduledQueryRun{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1SourceCanceledEvent is the Go struct for the "v1.source.canceled" event.
// Occurs whenever a source is canceled.
type V1SourceCanceledEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Source, error)
}

// FetchRelatedObject fetches the Source related to the event.
func (e *V1SourceCanceledEvent) FetchRelatedObject(ctx context.Context) (*Source, error) {
	return e.fetchRelatedObject()
}

// V1SourceCanceledEventNotification is the webhook payload you'll get when handling an event with type "v1.source.canceled"
// Occurs whenever a source is canceled.
type V1SourceCanceledEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1SourceCanceledEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1SourceCanceledEvent that created this Notification
func (en *V1SourceCanceledEventNotification) FetchEvent(ctx context.Context) (*V1SourceCanceledEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1SourceCanceledEvent), nil
}

// FetchRelatedObject fetches the Source related to the event.
func (en *V1SourceCanceledEventNotification) FetchRelatedObject(ctx context.Context) (*Source, error) {
	relatedObj := &Source{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1SourceChargeableEvent is the Go struct for the "v1.source.chargeable" event.
// Occurs whenever a source transitions to chargeable.
type V1SourceChargeableEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Source, error)
}

// FetchRelatedObject fetches the Source related to the event.
func (e *V1SourceChargeableEvent) FetchRelatedObject(ctx context.Context) (*Source, error) {
	return e.fetchRelatedObject()
}

// V1SourceChargeableEventNotification is the webhook payload you'll get when handling an event with type "v1.source.chargeable"
// Occurs whenever a source transitions to chargeable.
type V1SourceChargeableEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1SourceChargeableEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1SourceChargeableEvent that created this Notification
func (en *V1SourceChargeableEventNotification) FetchEvent(ctx context.Context) (*V1SourceChargeableEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1SourceChargeableEvent), nil
}

// FetchRelatedObject fetches the Source related to the event.
func (en *V1SourceChargeableEventNotification) FetchRelatedObject(ctx context.Context) (*Source, error) {
	relatedObj := &Source{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1SourceFailedEvent is the Go struct for the "v1.source.failed" event.
// Occurs whenever a source fails.
type V1SourceFailedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Source, error)
}

// FetchRelatedObject fetches the Source related to the event.
func (e *V1SourceFailedEvent) FetchRelatedObject(ctx context.Context) (*Source, error) {
	return e.fetchRelatedObject()
}

// V1SourceFailedEventNotification is the webhook payload you'll get when handling an event with type "v1.source.failed"
// Occurs whenever a source fails.
type V1SourceFailedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1SourceFailedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1SourceFailedEvent that created this Notification
func (en *V1SourceFailedEventNotification) FetchEvent(ctx context.Context) (*V1SourceFailedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1SourceFailedEvent), nil
}

// FetchRelatedObject fetches the Source related to the event.
func (en *V1SourceFailedEventNotification) FetchRelatedObject(ctx context.Context) (*Source, error) {
	relatedObj := &Source{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1SourceRefundAttributesRequiredEvent is the Go struct for the "v1.source.refund_attributes_required" event.
// Occurs whenever the refund attributes are required on a receiver source to process a refund or a mispayment.
type V1SourceRefundAttributesRequiredEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Source, error)
}

// FetchRelatedObject fetches the Source related to the event.
func (e *V1SourceRefundAttributesRequiredEvent) FetchRelatedObject(ctx context.Context) (*Source, error) {
	return e.fetchRelatedObject()
}

// V1SourceRefundAttributesRequiredEventNotification is the webhook payload you'll get when handling an event with type "v1.source.refund_attributes_required"
// Occurs whenever the refund attributes are required on a receiver source to process a refund or a mispayment.
type V1SourceRefundAttributesRequiredEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1SourceRefundAttributesRequiredEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1SourceRefundAttributesRequiredEvent that created this Notification
func (en *V1SourceRefundAttributesRequiredEventNotification) FetchEvent(ctx context.Context) (*V1SourceRefundAttributesRequiredEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1SourceRefundAttributesRequiredEvent), nil
}

// FetchRelatedObject fetches the Source related to the event.
func (en *V1SourceRefundAttributesRequiredEventNotification) FetchRelatedObject(ctx context.Context) (*Source, error) {
	relatedObj := &Source{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1SubscriptionScheduleAbortedEvent is the Go struct for the "v1.subscription_schedule.aborted" event.
// Occurs whenever a subscription schedule is canceled due to the underlying subscription being canceled because of delinquency.
type V1SubscriptionScheduleAbortedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*SubscriptionSchedule, error)
}

// FetchRelatedObject fetches the SubscriptionSchedule related to the event.
func (e *V1SubscriptionScheduleAbortedEvent) FetchRelatedObject(ctx context.Context) (*SubscriptionSchedule, error) {
	return e.fetchRelatedObject()
}

// V1SubscriptionScheduleAbortedEventNotification is the webhook payload you'll get when handling an event with type "v1.subscription_schedule.aborted"
// Occurs whenever a subscription schedule is canceled due to the underlying subscription being canceled because of delinquency.
type V1SubscriptionScheduleAbortedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1SubscriptionScheduleAbortedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1SubscriptionScheduleAbortedEvent that created this Notification
func (en *V1SubscriptionScheduleAbortedEventNotification) FetchEvent(ctx context.Context) (*V1SubscriptionScheduleAbortedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1SubscriptionScheduleAbortedEvent), nil
}

// FetchRelatedObject fetches the SubscriptionSchedule related to the event.
func (en *V1SubscriptionScheduleAbortedEventNotification) FetchRelatedObject(ctx context.Context) (*SubscriptionSchedule, error) {
	relatedObj := &SubscriptionSchedule{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1SubscriptionScheduleCanceledEvent is the Go struct for the "v1.subscription_schedule.canceled" event.
// Occurs whenever a subscription schedule is canceled.
type V1SubscriptionScheduleCanceledEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*SubscriptionSchedule, error)
}

// FetchRelatedObject fetches the SubscriptionSchedule related to the event.
func (e *V1SubscriptionScheduleCanceledEvent) FetchRelatedObject(ctx context.Context) (*SubscriptionSchedule, error) {
	return e.fetchRelatedObject()
}

// V1SubscriptionScheduleCanceledEventNotification is the webhook payload you'll get when handling an event with type "v1.subscription_schedule.canceled"
// Occurs whenever a subscription schedule is canceled.
type V1SubscriptionScheduleCanceledEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1SubscriptionScheduleCanceledEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1SubscriptionScheduleCanceledEvent that created this Notification
func (en *V1SubscriptionScheduleCanceledEventNotification) FetchEvent(ctx context.Context) (*V1SubscriptionScheduleCanceledEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1SubscriptionScheduleCanceledEvent), nil
}

// FetchRelatedObject fetches the SubscriptionSchedule related to the event.
func (en *V1SubscriptionScheduleCanceledEventNotification) FetchRelatedObject(ctx context.Context) (*SubscriptionSchedule, error) {
	relatedObj := &SubscriptionSchedule{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1SubscriptionScheduleCompletedEvent is the Go struct for the "v1.subscription_schedule.completed" event.
// Occurs whenever a new subscription schedule is completed.
type V1SubscriptionScheduleCompletedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*SubscriptionSchedule, error)
}

// FetchRelatedObject fetches the SubscriptionSchedule related to the event.
func (e *V1SubscriptionScheduleCompletedEvent) FetchRelatedObject(ctx context.Context) (*SubscriptionSchedule, error) {
	return e.fetchRelatedObject()
}

// V1SubscriptionScheduleCompletedEventNotification is the webhook payload you'll get when handling an event with type "v1.subscription_schedule.completed"
// Occurs whenever a new subscription schedule is completed.
type V1SubscriptionScheduleCompletedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1SubscriptionScheduleCompletedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1SubscriptionScheduleCompletedEvent that created this Notification
func (en *V1SubscriptionScheduleCompletedEventNotification) FetchEvent(ctx context.Context) (*V1SubscriptionScheduleCompletedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1SubscriptionScheduleCompletedEvent), nil
}

// FetchRelatedObject fetches the SubscriptionSchedule related to the event.
func (en *V1SubscriptionScheduleCompletedEventNotification) FetchRelatedObject(ctx context.Context) (*SubscriptionSchedule, error) {
	relatedObj := &SubscriptionSchedule{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1SubscriptionScheduleCreatedEvent is the Go struct for the "v1.subscription_schedule.created" event.
// Occurs whenever a new subscription schedule is created.
type V1SubscriptionScheduleCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*SubscriptionSchedule, error)
}

// FetchRelatedObject fetches the SubscriptionSchedule related to the event.
func (e *V1SubscriptionScheduleCreatedEvent) FetchRelatedObject(ctx context.Context) (*SubscriptionSchedule, error) {
	return e.fetchRelatedObject()
}

// V1SubscriptionScheduleCreatedEventNotification is the webhook payload you'll get when handling an event with type "v1.subscription_schedule.created"
// Occurs whenever a new subscription schedule is created.
type V1SubscriptionScheduleCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1SubscriptionScheduleCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1SubscriptionScheduleCreatedEvent that created this Notification
func (en *V1SubscriptionScheduleCreatedEventNotification) FetchEvent(ctx context.Context) (*V1SubscriptionScheduleCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1SubscriptionScheduleCreatedEvent), nil
}

// FetchRelatedObject fetches the SubscriptionSchedule related to the event.
func (en *V1SubscriptionScheduleCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*SubscriptionSchedule, error) {
	relatedObj := &SubscriptionSchedule{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1SubscriptionScheduleExpiringEvent is the Go struct for the "v1.subscription_schedule.expiring" event.
// Occurs 7 days before a subscription schedule will expire.
type V1SubscriptionScheduleExpiringEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*SubscriptionSchedule, error)
}

// FetchRelatedObject fetches the SubscriptionSchedule related to the event.
func (e *V1SubscriptionScheduleExpiringEvent) FetchRelatedObject(ctx context.Context) (*SubscriptionSchedule, error) {
	return e.fetchRelatedObject()
}

// V1SubscriptionScheduleExpiringEventNotification is the webhook payload you'll get when handling an event with type "v1.subscription_schedule.expiring"
// Occurs 7 days before a subscription schedule will expire.
type V1SubscriptionScheduleExpiringEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1SubscriptionScheduleExpiringEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1SubscriptionScheduleExpiringEvent that created this Notification
func (en *V1SubscriptionScheduleExpiringEventNotification) FetchEvent(ctx context.Context) (*V1SubscriptionScheduleExpiringEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1SubscriptionScheduleExpiringEvent), nil
}

// FetchRelatedObject fetches the SubscriptionSchedule related to the event.
func (en *V1SubscriptionScheduleExpiringEventNotification) FetchRelatedObject(ctx context.Context) (*SubscriptionSchedule, error) {
	relatedObj := &SubscriptionSchedule{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1SubscriptionScheduleReleasedEvent is the Go struct for the "v1.subscription_schedule.released" event.
// Occurs whenever a new subscription schedule is released.
type V1SubscriptionScheduleReleasedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*SubscriptionSchedule, error)
}

// FetchRelatedObject fetches the SubscriptionSchedule related to the event.
func (e *V1SubscriptionScheduleReleasedEvent) FetchRelatedObject(ctx context.Context) (*SubscriptionSchedule, error) {
	return e.fetchRelatedObject()
}

// V1SubscriptionScheduleReleasedEventNotification is the webhook payload you'll get when handling an event with type "v1.subscription_schedule.released"
// Occurs whenever a new subscription schedule is released.
type V1SubscriptionScheduleReleasedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1SubscriptionScheduleReleasedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1SubscriptionScheduleReleasedEvent that created this Notification
func (en *V1SubscriptionScheduleReleasedEventNotification) FetchEvent(ctx context.Context) (*V1SubscriptionScheduleReleasedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1SubscriptionScheduleReleasedEvent), nil
}

// FetchRelatedObject fetches the SubscriptionSchedule related to the event.
func (en *V1SubscriptionScheduleReleasedEventNotification) FetchRelatedObject(ctx context.Context) (*SubscriptionSchedule, error) {
	relatedObj := &SubscriptionSchedule{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1SubscriptionScheduleUpdatedEvent is the Go struct for the "v1.subscription_schedule.updated" event.
// Occurs whenever a subscription schedule is updated.
type V1SubscriptionScheduleUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*SubscriptionSchedule, error)
}

// FetchRelatedObject fetches the SubscriptionSchedule related to the event.
func (e *V1SubscriptionScheduleUpdatedEvent) FetchRelatedObject(ctx context.Context) (*SubscriptionSchedule, error) {
	return e.fetchRelatedObject()
}

// V1SubscriptionScheduleUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v1.subscription_schedule.updated"
// Occurs whenever a subscription schedule is updated.
type V1SubscriptionScheduleUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1SubscriptionScheduleUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1SubscriptionScheduleUpdatedEvent that created this Notification
func (en *V1SubscriptionScheduleUpdatedEventNotification) FetchEvent(ctx context.Context) (*V1SubscriptionScheduleUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1SubscriptionScheduleUpdatedEvent), nil
}

// FetchRelatedObject fetches the SubscriptionSchedule related to the event.
func (en *V1SubscriptionScheduleUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*SubscriptionSchedule, error) {
	relatedObj := &SubscriptionSchedule{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1TaxRateCreatedEvent is the Go struct for the "v1.tax_rate.created" event.
// Occurs whenever a new tax rate is created.
type V1TaxRateCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*TaxRate, error)
}

// FetchRelatedObject fetches the TaxRate related to the event.
func (e *V1TaxRateCreatedEvent) FetchRelatedObject(ctx context.Context) (*TaxRate, error) {
	return e.fetchRelatedObject()
}

// V1TaxRateCreatedEventNotification is the webhook payload you'll get when handling an event with type "v1.tax_rate.created"
// Occurs whenever a new tax rate is created.
type V1TaxRateCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1TaxRateCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1TaxRateCreatedEvent that created this Notification
func (en *V1TaxRateCreatedEventNotification) FetchEvent(ctx context.Context) (*V1TaxRateCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1TaxRateCreatedEvent), nil
}

// FetchRelatedObject fetches the TaxRate related to the event.
func (en *V1TaxRateCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*TaxRate, error) {
	relatedObj := &TaxRate{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1TaxRateUpdatedEvent is the Go struct for the "v1.tax_rate.updated" event.
// Occurs whenever a tax rate is updated.
type V1TaxRateUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*TaxRate, error)
}

// FetchRelatedObject fetches the TaxRate related to the event.
func (e *V1TaxRateUpdatedEvent) FetchRelatedObject(ctx context.Context) (*TaxRate, error) {
	return e.fetchRelatedObject()
}

// V1TaxRateUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v1.tax_rate.updated"
// Occurs whenever a tax rate is updated.
type V1TaxRateUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1TaxRateUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1TaxRateUpdatedEvent that created this Notification
func (en *V1TaxRateUpdatedEventNotification) FetchEvent(ctx context.Context) (*V1TaxRateUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1TaxRateUpdatedEvent), nil
}

// FetchRelatedObject fetches the TaxRate related to the event.
func (en *V1TaxRateUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*TaxRate, error) {
	relatedObj := &TaxRate{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1TerminalReaderActionFailedEvent is the Go struct for the "v1.terminal.reader.action_failed" event.
// Occurs whenever an action sent to a Terminal reader failed.
type V1TerminalReaderActionFailedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*TerminalReader, error)
}

// FetchRelatedObject fetches the TerminalReader related to the event.
func (e *V1TerminalReaderActionFailedEvent) FetchRelatedObject(ctx context.Context) (*TerminalReader, error) {
	return e.fetchRelatedObject()
}

// V1TerminalReaderActionFailedEventNotification is the webhook payload you'll get when handling an event with type "v1.terminal.reader.action_failed"
// Occurs whenever an action sent to a Terminal reader failed.
type V1TerminalReaderActionFailedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1TerminalReaderActionFailedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1TerminalReaderActionFailedEvent that created this Notification
func (en *V1TerminalReaderActionFailedEventNotification) FetchEvent(ctx context.Context) (*V1TerminalReaderActionFailedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1TerminalReaderActionFailedEvent), nil
}

// FetchRelatedObject fetches the TerminalReader related to the event.
func (en *V1TerminalReaderActionFailedEventNotification) FetchRelatedObject(ctx context.Context) (*TerminalReader, error) {
	relatedObj := &TerminalReader{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1TerminalReaderActionSucceededEvent is the Go struct for the "v1.terminal.reader.action_succeeded" event.
// Occurs whenever an action sent to a Terminal reader was successful.
type V1TerminalReaderActionSucceededEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*TerminalReader, error)
}

// FetchRelatedObject fetches the TerminalReader related to the event.
func (e *V1TerminalReaderActionSucceededEvent) FetchRelatedObject(ctx context.Context) (*TerminalReader, error) {
	return e.fetchRelatedObject()
}

// V1TerminalReaderActionSucceededEventNotification is the webhook payload you'll get when handling an event with type "v1.terminal.reader.action_succeeded"
// Occurs whenever an action sent to a Terminal reader was successful.
type V1TerminalReaderActionSucceededEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1TerminalReaderActionSucceededEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1TerminalReaderActionSucceededEvent that created this Notification
func (en *V1TerminalReaderActionSucceededEventNotification) FetchEvent(ctx context.Context) (*V1TerminalReaderActionSucceededEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1TerminalReaderActionSucceededEvent), nil
}

// FetchRelatedObject fetches the TerminalReader related to the event.
func (en *V1TerminalReaderActionSucceededEventNotification) FetchRelatedObject(ctx context.Context) (*TerminalReader, error) {
	relatedObj := &TerminalReader{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1TerminalReaderActionUpdatedEvent is the Go struct for the "v1.terminal.reader.action_updated" event.
// Occurs whenever an action sent to a Terminal reader is updated.
type V1TerminalReaderActionUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*TerminalReader, error)
}

// FetchRelatedObject fetches the TerminalReader related to the event.
func (e *V1TerminalReaderActionUpdatedEvent) FetchRelatedObject(ctx context.Context) (*TerminalReader, error) {
	return e.fetchRelatedObject()
}

// V1TerminalReaderActionUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v1.terminal.reader.action_updated"
// Occurs whenever an action sent to a Terminal reader is updated.
type V1TerminalReaderActionUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1TerminalReaderActionUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1TerminalReaderActionUpdatedEvent that created this Notification
func (en *V1TerminalReaderActionUpdatedEventNotification) FetchEvent(ctx context.Context) (*V1TerminalReaderActionUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1TerminalReaderActionUpdatedEvent), nil
}

// FetchRelatedObject fetches the TerminalReader related to the event.
func (en *V1TerminalReaderActionUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*TerminalReader, error) {
	relatedObj := &TerminalReader{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1TestHelpersTestClockAdvancingEvent is the Go struct for the "v1.test_helpers.test_clock.advancing" event.
// Occurs whenever a test clock starts advancing.
type V1TestHelpersTestClockAdvancingEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*TestHelpersTestClock, error)
}

// FetchRelatedObject fetches the TestHelpersTestClock related to the event.
func (e *V1TestHelpersTestClockAdvancingEvent) FetchRelatedObject(ctx context.Context) (*TestHelpersTestClock, error) {
	return e.fetchRelatedObject()
}

// V1TestHelpersTestClockAdvancingEventNotification is the webhook payload you'll get when handling an event with type "v1.test_helpers.test_clock.advancing"
// Occurs whenever a test clock starts advancing.
type V1TestHelpersTestClockAdvancingEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1TestHelpersTestClockAdvancingEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1TestHelpersTestClockAdvancingEvent that created this Notification
func (en *V1TestHelpersTestClockAdvancingEventNotification) FetchEvent(ctx context.Context) (*V1TestHelpersTestClockAdvancingEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1TestHelpersTestClockAdvancingEvent), nil
}

// FetchRelatedObject fetches the TestHelpersTestClock related to the event.
func (en *V1TestHelpersTestClockAdvancingEventNotification) FetchRelatedObject(ctx context.Context) (*TestHelpersTestClock, error) {
	relatedObj := &TestHelpersTestClock{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1TestHelpersTestClockCreatedEvent is the Go struct for the "v1.test_helpers.test_clock.created" event.
// Occurs whenever a test clock is created.
type V1TestHelpersTestClockCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*TestHelpersTestClock, error)
}

// FetchRelatedObject fetches the TestHelpersTestClock related to the event.
func (e *V1TestHelpersTestClockCreatedEvent) FetchRelatedObject(ctx context.Context) (*TestHelpersTestClock, error) {
	return e.fetchRelatedObject()
}

// V1TestHelpersTestClockCreatedEventNotification is the webhook payload you'll get when handling an event with type "v1.test_helpers.test_clock.created"
// Occurs whenever a test clock is created.
type V1TestHelpersTestClockCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1TestHelpersTestClockCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1TestHelpersTestClockCreatedEvent that created this Notification
func (en *V1TestHelpersTestClockCreatedEventNotification) FetchEvent(ctx context.Context) (*V1TestHelpersTestClockCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1TestHelpersTestClockCreatedEvent), nil
}

// FetchRelatedObject fetches the TestHelpersTestClock related to the event.
func (en *V1TestHelpersTestClockCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*TestHelpersTestClock, error) {
	relatedObj := &TestHelpersTestClock{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1TestHelpersTestClockDeletedEvent is the Go struct for the "v1.test_helpers.test_clock.deleted" event.
// Occurs whenever a test clock is deleted.
type V1TestHelpersTestClockDeletedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*TestHelpersTestClock, error)
}

// FetchRelatedObject fetches the TestHelpersTestClock related to the event.
func (e *V1TestHelpersTestClockDeletedEvent) FetchRelatedObject(ctx context.Context) (*TestHelpersTestClock, error) {
	return e.fetchRelatedObject()
}

// V1TestHelpersTestClockDeletedEventNotification is the webhook payload you'll get when handling an event with type "v1.test_helpers.test_clock.deleted"
// Occurs whenever a test clock is deleted.
type V1TestHelpersTestClockDeletedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1TestHelpersTestClockDeletedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1TestHelpersTestClockDeletedEvent that created this Notification
func (en *V1TestHelpersTestClockDeletedEventNotification) FetchEvent(ctx context.Context) (*V1TestHelpersTestClockDeletedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1TestHelpersTestClockDeletedEvent), nil
}

// FetchRelatedObject fetches the TestHelpersTestClock related to the event.
func (en *V1TestHelpersTestClockDeletedEventNotification) FetchRelatedObject(ctx context.Context) (*TestHelpersTestClock, error) {
	relatedObj := &TestHelpersTestClock{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1TestHelpersTestClockInternalFailureEvent is the Go struct for the "v1.test_helpers.test_clock.internal_failure" event.
// Occurs whenever a test clock fails to advance its frozen time.
type V1TestHelpersTestClockInternalFailureEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*TestHelpersTestClock, error)
}

// FetchRelatedObject fetches the TestHelpersTestClock related to the event.
func (e *V1TestHelpersTestClockInternalFailureEvent) FetchRelatedObject(ctx context.Context) (*TestHelpersTestClock, error) {
	return e.fetchRelatedObject()
}

// V1TestHelpersTestClockInternalFailureEventNotification is the webhook payload you'll get when handling an event with type "v1.test_helpers.test_clock.internal_failure"
// Occurs whenever a test clock fails to advance its frozen time.
type V1TestHelpersTestClockInternalFailureEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1TestHelpersTestClockInternalFailureEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1TestHelpersTestClockInternalFailureEvent that created this Notification
func (en *V1TestHelpersTestClockInternalFailureEventNotification) FetchEvent(ctx context.Context) (*V1TestHelpersTestClockInternalFailureEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1TestHelpersTestClockInternalFailureEvent), nil
}

// FetchRelatedObject fetches the TestHelpersTestClock related to the event.
func (en *V1TestHelpersTestClockInternalFailureEventNotification) FetchRelatedObject(ctx context.Context) (*TestHelpersTestClock, error) {
	relatedObj := &TestHelpersTestClock{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1TestHelpersTestClockReadyEvent is the Go struct for the "v1.test_helpers.test_clock.ready" event.
// Occurs whenever a test clock transitions to a ready status.
type V1TestHelpersTestClockReadyEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*TestHelpersTestClock, error)
}

// FetchRelatedObject fetches the TestHelpersTestClock related to the event.
func (e *V1TestHelpersTestClockReadyEvent) FetchRelatedObject(ctx context.Context) (*TestHelpersTestClock, error) {
	return e.fetchRelatedObject()
}

// V1TestHelpersTestClockReadyEventNotification is the webhook payload you'll get when handling an event with type "v1.test_helpers.test_clock.ready"
// Occurs whenever a test clock transitions to a ready status.
type V1TestHelpersTestClockReadyEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1TestHelpersTestClockReadyEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1TestHelpersTestClockReadyEvent that created this Notification
func (en *V1TestHelpersTestClockReadyEventNotification) FetchEvent(ctx context.Context) (*V1TestHelpersTestClockReadyEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1TestHelpersTestClockReadyEvent), nil
}

// FetchRelatedObject fetches the TestHelpersTestClock related to the event.
func (en *V1TestHelpersTestClockReadyEventNotification) FetchRelatedObject(ctx context.Context) (*TestHelpersTestClock, error) {
	relatedObj := &TestHelpersTestClock{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1TopupCanceledEvent is the Go struct for the "v1.topup.canceled" event.
// Occurs whenever a top-up is canceled.
type V1TopupCanceledEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Topup, error)
}

// FetchRelatedObject fetches the Topup related to the event.
func (e *V1TopupCanceledEvent) FetchRelatedObject(ctx context.Context) (*Topup, error) {
	return e.fetchRelatedObject()
}

// V1TopupCanceledEventNotification is the webhook payload you'll get when handling an event with type "v1.topup.canceled"
// Occurs whenever a top-up is canceled.
type V1TopupCanceledEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1TopupCanceledEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1TopupCanceledEvent that created this Notification
func (en *V1TopupCanceledEventNotification) FetchEvent(ctx context.Context) (*V1TopupCanceledEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1TopupCanceledEvent), nil
}

// FetchRelatedObject fetches the Topup related to the event.
func (en *V1TopupCanceledEventNotification) FetchRelatedObject(ctx context.Context) (*Topup, error) {
	relatedObj := &Topup{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1TopupCreatedEvent is the Go struct for the "v1.topup.created" event.
// Occurs whenever a top-up is created.
type V1TopupCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Topup, error)
}

// FetchRelatedObject fetches the Topup related to the event.
func (e *V1TopupCreatedEvent) FetchRelatedObject(ctx context.Context) (*Topup, error) {
	return e.fetchRelatedObject()
}

// V1TopupCreatedEventNotification is the webhook payload you'll get when handling an event with type "v1.topup.created"
// Occurs whenever a top-up is created.
type V1TopupCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1TopupCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1TopupCreatedEvent that created this Notification
func (en *V1TopupCreatedEventNotification) FetchEvent(ctx context.Context) (*V1TopupCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1TopupCreatedEvent), nil
}

// FetchRelatedObject fetches the Topup related to the event.
func (en *V1TopupCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*Topup, error) {
	relatedObj := &Topup{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1TopupFailedEvent is the Go struct for the "v1.topup.failed" event.
// Occurs whenever a top-up fails.
type V1TopupFailedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Topup, error)
}

// FetchRelatedObject fetches the Topup related to the event.
func (e *V1TopupFailedEvent) FetchRelatedObject(ctx context.Context) (*Topup, error) {
	return e.fetchRelatedObject()
}

// V1TopupFailedEventNotification is the webhook payload you'll get when handling an event with type "v1.topup.failed"
// Occurs whenever a top-up fails.
type V1TopupFailedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1TopupFailedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1TopupFailedEvent that created this Notification
func (en *V1TopupFailedEventNotification) FetchEvent(ctx context.Context) (*V1TopupFailedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1TopupFailedEvent), nil
}

// FetchRelatedObject fetches the Topup related to the event.
func (en *V1TopupFailedEventNotification) FetchRelatedObject(ctx context.Context) (*Topup, error) {
	relatedObj := &Topup{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1TopupReversedEvent is the Go struct for the "v1.topup.reversed" event.
// Occurs whenever a top-up is reversed.
type V1TopupReversedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Topup, error)
}

// FetchRelatedObject fetches the Topup related to the event.
func (e *V1TopupReversedEvent) FetchRelatedObject(ctx context.Context) (*Topup, error) {
	return e.fetchRelatedObject()
}

// V1TopupReversedEventNotification is the webhook payload you'll get when handling an event with type "v1.topup.reversed"
// Occurs whenever a top-up is reversed.
type V1TopupReversedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1TopupReversedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1TopupReversedEvent that created this Notification
func (en *V1TopupReversedEventNotification) FetchEvent(ctx context.Context) (*V1TopupReversedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1TopupReversedEvent), nil
}

// FetchRelatedObject fetches the Topup related to the event.
func (en *V1TopupReversedEventNotification) FetchRelatedObject(ctx context.Context) (*Topup, error) {
	relatedObj := &Topup{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1TopupSucceededEvent is the Go struct for the "v1.topup.succeeded" event.
// Occurs whenever a top-up succeeds.
type V1TopupSucceededEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Topup, error)
}

// FetchRelatedObject fetches the Topup related to the event.
func (e *V1TopupSucceededEvent) FetchRelatedObject(ctx context.Context) (*Topup, error) {
	return e.fetchRelatedObject()
}

// V1TopupSucceededEventNotification is the webhook payload you'll get when handling an event with type "v1.topup.succeeded"
// Occurs whenever a top-up succeeds.
type V1TopupSucceededEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1TopupSucceededEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1TopupSucceededEvent that created this Notification
func (en *V1TopupSucceededEventNotification) FetchEvent(ctx context.Context) (*V1TopupSucceededEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1TopupSucceededEvent), nil
}

// FetchRelatedObject fetches the Topup related to the event.
func (en *V1TopupSucceededEventNotification) FetchRelatedObject(ctx context.Context) (*Topup, error) {
	relatedObj := &Topup{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1TransferCreatedEvent is the Go struct for the "v1.transfer.created" event.
// Occurs whenever a transfer is created.
type V1TransferCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Transfer, error)
}

// FetchRelatedObject fetches the Transfer related to the event.
func (e *V1TransferCreatedEvent) FetchRelatedObject(ctx context.Context) (*Transfer, error) {
	return e.fetchRelatedObject()
}

// V1TransferCreatedEventNotification is the webhook payload you'll get when handling an event with type "v1.transfer.created"
// Occurs whenever a transfer is created.
type V1TransferCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1TransferCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1TransferCreatedEvent that created this Notification
func (en *V1TransferCreatedEventNotification) FetchEvent(ctx context.Context) (*V1TransferCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1TransferCreatedEvent), nil
}

// FetchRelatedObject fetches the Transfer related to the event.
func (en *V1TransferCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*Transfer, error) {
	relatedObj := &Transfer{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1TransferReversedEvent is the Go struct for the "v1.transfer.reversed" event.
// Occurs whenever a transfer is reversed, including partial reversals.
type V1TransferReversedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Transfer, error)
}

// FetchRelatedObject fetches the Transfer related to the event.
func (e *V1TransferReversedEvent) FetchRelatedObject(ctx context.Context) (*Transfer, error) {
	return e.fetchRelatedObject()
}

// V1TransferReversedEventNotification is the webhook payload you'll get when handling an event with type "v1.transfer.reversed"
// Occurs whenever a transfer is reversed, including partial reversals.
type V1TransferReversedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1TransferReversedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1TransferReversedEvent that created this Notification
func (en *V1TransferReversedEventNotification) FetchEvent(ctx context.Context) (*V1TransferReversedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1TransferReversedEvent), nil
}

// FetchRelatedObject fetches the Transfer related to the event.
func (en *V1TransferReversedEventNotification) FetchRelatedObject(ctx context.Context) (*Transfer, error) {
	relatedObj := &Transfer{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V1TransferUpdatedEvent is the Go struct for the "v1.transfer.updated" event.
// Occurs whenever a transfer's description or metadata is updated.
type V1TransferUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*Transfer, error)
}

// FetchRelatedObject fetches the Transfer related to the event.
func (e *V1TransferUpdatedEvent) FetchRelatedObject(ctx context.Context) (*Transfer, error) {
	return e.fetchRelatedObject()
}

// V1TransferUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v1.transfer.updated"
// Occurs whenever a transfer's description or metadata is updated.
type V1TransferUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V1TransferUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V1TransferUpdatedEvent that created this Notification
func (en *V1TransferUpdatedEventNotification) FetchEvent(ctx context.Context) (*V1TransferUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V1TransferUpdatedEvent), nil
}

// FetchRelatedObject fetches the Transfer related to the event.
func (en *V1TransferUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*Transfer, error) {
	relatedObj := &Transfer{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2BillingBillSettingUpdatedEvent is the Go struct for the "v2.billing.bill_setting.updated" event.
// This event occurs when a bill setting is updated.
type V2BillingBillSettingUpdatedEvent struct {
	V2BaseEvent
	Data               V2BillingBillSettingUpdatedEventData `json:"data"`
	RelatedObject      RelatedObject                        `json:"related_object"`
	fetchRelatedObject func() (*V2BillingBillSetting, error)
}

// FetchRelatedObject fetches the V2BillingBillSetting related to the event.
func (e *V2BillingBillSettingUpdatedEvent) FetchRelatedObject(ctx context.Context) (*V2BillingBillSetting, error) {
	return e.fetchRelatedObject()
}

// V2BillingBillSettingUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v2.billing.bill_setting.updated"
// This event occurs when a bill setting is updated.
type V2BillingBillSettingUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2BillingBillSettingUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2BillingBillSettingUpdatedEvent that created this Notification
func (en *V2BillingBillSettingUpdatedEventNotification) FetchEvent(ctx context.Context) (*V2BillingBillSettingUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2BillingBillSettingUpdatedEvent), nil
}

// FetchRelatedObject fetches the V2BillingBillSetting related to the event.
func (en *V2BillingBillSettingUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2BillingBillSetting, error) {
	relatedObj := &V2BillingBillSetting{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2BillingCadenceBilledEvent is the Go struct for the "v2.billing.cadence.billed" event.
// Occurs when a billing Cadence generates an invoice.
type V2BillingCadenceBilledEvent struct {
	V2BaseEvent
	Data               V2BillingCadenceBilledEventData `json:"data"`
	RelatedObject      RelatedObject                   `json:"related_object"`
	fetchRelatedObject func() (*V2BillingCadence, error)
}

// FetchRelatedObject fetches the V2BillingCadence related to the event.
func (e *V2BillingCadenceBilledEvent) FetchRelatedObject(ctx context.Context) (*V2BillingCadence, error) {
	return e.fetchRelatedObject()
}

// V2BillingCadenceBilledEventNotification is the webhook payload you'll get when handling an event with type "v2.billing.cadence.billed"
// Occurs when a billing Cadence generates an invoice.
type V2BillingCadenceBilledEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2BillingCadenceBilledEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2BillingCadenceBilledEvent that created this Notification
func (en *V2BillingCadenceBilledEventNotification) FetchEvent(ctx context.Context) (*V2BillingCadenceBilledEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2BillingCadenceBilledEvent), nil
}

// FetchRelatedObject fetches the V2BillingCadence related to the event.
func (en *V2BillingCadenceBilledEventNotification) FetchRelatedObject(ctx context.Context) (*V2BillingCadence, error) {
	relatedObj := &V2BillingCadence{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2BillingCadenceCanceledEvent is the Go struct for the "v2.billing.cadence.canceled" event.
// Occurs when a billing Cadence is canceled.
type V2BillingCadenceCanceledEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2BillingCadence, error)
}

// FetchRelatedObject fetches the V2BillingCadence related to the event.
func (e *V2BillingCadenceCanceledEvent) FetchRelatedObject(ctx context.Context) (*V2BillingCadence, error) {
	return e.fetchRelatedObject()
}

// V2BillingCadenceCanceledEventNotification is the webhook payload you'll get when handling an event with type "v2.billing.cadence.canceled"
// Occurs when a billing Cadence is canceled.
type V2BillingCadenceCanceledEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2BillingCadenceCanceledEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2BillingCadenceCanceledEvent that created this Notification
func (en *V2BillingCadenceCanceledEventNotification) FetchEvent(ctx context.Context) (*V2BillingCadenceCanceledEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2BillingCadenceCanceledEvent), nil
}

// FetchRelatedObject fetches the V2BillingCadence related to the event.
func (en *V2BillingCadenceCanceledEventNotification) FetchRelatedObject(ctx context.Context) (*V2BillingCadence, error) {
	relatedObj := &V2BillingCadence{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2BillingCadenceCreatedEvent is the Go struct for the "v2.billing.cadence.created" event.
// Occurs when a billing Cadence is created.
type V2BillingCadenceCreatedEvent struct {
	V2BaseEvent
	Data               V2BillingCadenceCreatedEventData `json:"data"`
	RelatedObject      RelatedObject                    `json:"related_object"`
	fetchRelatedObject func() (*V2BillingCadence, error)
}

// FetchRelatedObject fetches the V2BillingCadence related to the event.
func (e *V2BillingCadenceCreatedEvent) FetchRelatedObject(ctx context.Context) (*V2BillingCadence, error) {
	return e.fetchRelatedObject()
}

// V2BillingCadenceCreatedEventNotification is the webhook payload you'll get when handling an event with type "v2.billing.cadence.created"
// Occurs when a billing Cadence is created.
type V2BillingCadenceCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2BillingCadenceCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2BillingCadenceCreatedEvent that created this Notification
func (en *V2BillingCadenceCreatedEventNotification) FetchEvent(ctx context.Context) (*V2BillingCadenceCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2BillingCadenceCreatedEvent), nil
}

// FetchRelatedObject fetches the V2BillingCadence related to the event.
func (en *V2BillingCadenceCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2BillingCadence, error) {
	relatedObj := &V2BillingCadence{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2BillingLicenseFeeCreatedEvent is the Go struct for the "v2.billing.license_fee.created" event.
// Occurs when a LicenseFee is created.
type V2BillingLicenseFeeCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2BillingLicenseFee, error)
}

// FetchRelatedObject fetches the V2BillingLicenseFee related to the event.
func (e *V2BillingLicenseFeeCreatedEvent) FetchRelatedObject(ctx context.Context) (*V2BillingLicenseFee, error) {
	return e.fetchRelatedObject()
}

// V2BillingLicenseFeeCreatedEventNotification is the webhook payload you'll get when handling an event with type "v2.billing.license_fee.created"
// Occurs when a LicenseFee is created.
type V2BillingLicenseFeeCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2BillingLicenseFeeCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2BillingLicenseFeeCreatedEvent that created this Notification
func (en *V2BillingLicenseFeeCreatedEventNotification) FetchEvent(ctx context.Context) (*V2BillingLicenseFeeCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2BillingLicenseFeeCreatedEvent), nil
}

// FetchRelatedObject fetches the V2BillingLicenseFee related to the event.
func (en *V2BillingLicenseFeeCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2BillingLicenseFee, error) {
	relatedObj := &V2BillingLicenseFee{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2BillingLicenseFeeUpdatedEvent is the Go struct for the "v2.billing.license_fee.updated" event.
// Occurs when a LicenseFee is updated.
type V2BillingLicenseFeeUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2BillingLicenseFee, error)
}

// FetchRelatedObject fetches the V2BillingLicenseFee related to the event.
func (e *V2BillingLicenseFeeUpdatedEvent) FetchRelatedObject(ctx context.Context) (*V2BillingLicenseFee, error) {
	return e.fetchRelatedObject()
}

// V2BillingLicenseFeeUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v2.billing.license_fee.updated"
// Occurs when a LicenseFee is updated.
type V2BillingLicenseFeeUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2BillingLicenseFeeUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2BillingLicenseFeeUpdatedEvent that created this Notification
func (en *V2BillingLicenseFeeUpdatedEventNotification) FetchEvent(ctx context.Context) (*V2BillingLicenseFeeUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2BillingLicenseFeeUpdatedEvent), nil
}

// FetchRelatedObject fetches the V2BillingLicenseFee related to the event.
func (en *V2BillingLicenseFeeUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2BillingLicenseFee, error) {
	relatedObj := &V2BillingLicenseFee{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2BillingLicenseFeeVersionCreatedEvent is the Go struct for the "v2.billing.license_fee_version.created" event.
// Occurs when a LicenseFeeVersion is created.
type V2BillingLicenseFeeVersionCreatedEvent struct {
	V2BaseEvent
	Data               V2BillingLicenseFeeVersionCreatedEventData `json:"data"`
	RelatedObject      RelatedObject                              `json:"related_object"`
	fetchRelatedObject func() (*V2BillingLicenseFeeVersion, error)
}

// FetchRelatedObject fetches the V2BillingLicenseFeeVersion related to the event.
func (e *V2BillingLicenseFeeVersionCreatedEvent) FetchRelatedObject(ctx context.Context) (*V2BillingLicenseFeeVersion, error) {
	return e.fetchRelatedObject()
}

// V2BillingLicenseFeeVersionCreatedEventNotification is the webhook payload you'll get when handling an event with type "v2.billing.license_fee_version.created"
// Occurs when a LicenseFeeVersion is created.
type V2BillingLicenseFeeVersionCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2BillingLicenseFeeVersionCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2BillingLicenseFeeVersionCreatedEvent that created this Notification
func (en *V2BillingLicenseFeeVersionCreatedEventNotification) FetchEvent(ctx context.Context) (*V2BillingLicenseFeeVersionCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2BillingLicenseFeeVersionCreatedEvent), nil
}

// FetchRelatedObject fetches the V2BillingLicenseFeeVersion related to the event.
func (en *V2BillingLicenseFeeVersionCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2BillingLicenseFeeVersion, error) {
	relatedObj := &V2BillingLicenseFeeVersion{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2BillingLicensedItemCreatedEvent is the Go struct for the "v2.billing.licensed_item.created" event.
// Occurs when a LicensedItem is created.
type V2BillingLicensedItemCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2BillingLicensedItem, error)
}

// FetchRelatedObject fetches the V2BillingLicensedItem related to the event.
func (e *V2BillingLicensedItemCreatedEvent) FetchRelatedObject(ctx context.Context) (*V2BillingLicensedItem, error) {
	return e.fetchRelatedObject()
}

// V2BillingLicensedItemCreatedEventNotification is the webhook payload you'll get when handling an event with type "v2.billing.licensed_item.created"
// Occurs when a LicensedItem is created.
type V2BillingLicensedItemCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2BillingLicensedItemCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2BillingLicensedItemCreatedEvent that created this Notification
func (en *V2BillingLicensedItemCreatedEventNotification) FetchEvent(ctx context.Context) (*V2BillingLicensedItemCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2BillingLicensedItemCreatedEvent), nil
}

// FetchRelatedObject fetches the V2BillingLicensedItem related to the event.
func (en *V2BillingLicensedItemCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2BillingLicensedItem, error) {
	relatedObj := &V2BillingLicensedItem{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2BillingLicensedItemUpdatedEvent is the Go struct for the "v2.billing.licensed_item.updated" event.
// Occurs when a LicensedItem is updated.
type V2BillingLicensedItemUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2BillingLicensedItem, error)
}

// FetchRelatedObject fetches the V2BillingLicensedItem related to the event.
func (e *V2BillingLicensedItemUpdatedEvent) FetchRelatedObject(ctx context.Context) (*V2BillingLicensedItem, error) {
	return e.fetchRelatedObject()
}

// V2BillingLicensedItemUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v2.billing.licensed_item.updated"
// Occurs when a LicensedItem is updated.
type V2BillingLicensedItemUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2BillingLicensedItemUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2BillingLicensedItemUpdatedEvent that created this Notification
func (en *V2BillingLicensedItemUpdatedEventNotification) FetchEvent(ctx context.Context) (*V2BillingLicensedItemUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2BillingLicensedItemUpdatedEvent), nil
}

// FetchRelatedObject fetches the V2BillingLicensedItem related to the event.
func (en *V2BillingLicensedItemUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2BillingLicensedItem, error) {
	relatedObj := &V2BillingLicensedItem{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2BillingMeteredItemCreatedEvent is the Go struct for the "v2.billing.metered_item.created" event.
// Occurs when a MeteredItem is created.
type V2BillingMeteredItemCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2BillingMeteredItem, error)
}

// FetchRelatedObject fetches the V2BillingMeteredItem related to the event.
func (e *V2BillingMeteredItemCreatedEvent) FetchRelatedObject(ctx context.Context) (*V2BillingMeteredItem, error) {
	return e.fetchRelatedObject()
}

// V2BillingMeteredItemCreatedEventNotification is the webhook payload you'll get when handling an event with type "v2.billing.metered_item.created"
// Occurs when a MeteredItem is created.
type V2BillingMeteredItemCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2BillingMeteredItemCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2BillingMeteredItemCreatedEvent that created this Notification
func (en *V2BillingMeteredItemCreatedEventNotification) FetchEvent(ctx context.Context) (*V2BillingMeteredItemCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2BillingMeteredItemCreatedEvent), nil
}

// FetchRelatedObject fetches the V2BillingMeteredItem related to the event.
func (en *V2BillingMeteredItemCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2BillingMeteredItem, error) {
	relatedObj := &V2BillingMeteredItem{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2BillingMeteredItemUpdatedEvent is the Go struct for the "v2.billing.metered_item.updated" event.
// Occurs when a MeteredItem is updated.
type V2BillingMeteredItemUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2BillingMeteredItem, error)
}

// FetchRelatedObject fetches the V2BillingMeteredItem related to the event.
func (e *V2BillingMeteredItemUpdatedEvent) FetchRelatedObject(ctx context.Context) (*V2BillingMeteredItem, error) {
	return e.fetchRelatedObject()
}

// V2BillingMeteredItemUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v2.billing.metered_item.updated"
// Occurs when a MeteredItem is updated.
type V2BillingMeteredItemUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2BillingMeteredItemUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2BillingMeteredItemUpdatedEvent that created this Notification
func (en *V2BillingMeteredItemUpdatedEventNotification) FetchEvent(ctx context.Context) (*V2BillingMeteredItemUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2BillingMeteredItemUpdatedEvent), nil
}

// FetchRelatedObject fetches the V2BillingMeteredItem related to the event.
func (en *V2BillingMeteredItemUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2BillingMeteredItem, error) {
	relatedObj := &V2BillingMeteredItem{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2BillingPricingPlanCreatedEvent is the Go struct for the "v2.billing.pricing_plan.created" event.
// Occurs when a PricingPlan is created.
type V2BillingPricingPlanCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2BillingPricingPlan, error)
}

// FetchRelatedObject fetches the V2BillingPricingPlan related to the event.
func (e *V2BillingPricingPlanCreatedEvent) FetchRelatedObject(ctx context.Context) (*V2BillingPricingPlan, error) {
	return e.fetchRelatedObject()
}

// V2BillingPricingPlanCreatedEventNotification is the webhook payload you'll get when handling an event with type "v2.billing.pricing_plan.created"
// Occurs when a PricingPlan is created.
type V2BillingPricingPlanCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2BillingPricingPlanCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2BillingPricingPlanCreatedEvent that created this Notification
func (en *V2BillingPricingPlanCreatedEventNotification) FetchEvent(ctx context.Context) (*V2BillingPricingPlanCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2BillingPricingPlanCreatedEvent), nil
}

// FetchRelatedObject fetches the V2BillingPricingPlan related to the event.
func (en *V2BillingPricingPlanCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2BillingPricingPlan, error) {
	relatedObj := &V2BillingPricingPlan{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2BillingPricingPlanUpdatedEvent is the Go struct for the "v2.billing.pricing_plan.updated" event.
// Occurs when a PricingPlan is updated.
type V2BillingPricingPlanUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2BillingPricingPlan, error)
}

// FetchRelatedObject fetches the V2BillingPricingPlan related to the event.
func (e *V2BillingPricingPlanUpdatedEvent) FetchRelatedObject(ctx context.Context) (*V2BillingPricingPlan, error) {
	return e.fetchRelatedObject()
}

// V2BillingPricingPlanUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v2.billing.pricing_plan.updated"
// Occurs when a PricingPlan is updated.
type V2BillingPricingPlanUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2BillingPricingPlanUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2BillingPricingPlanUpdatedEvent that created this Notification
func (en *V2BillingPricingPlanUpdatedEventNotification) FetchEvent(ctx context.Context) (*V2BillingPricingPlanUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2BillingPricingPlanUpdatedEvent), nil
}

// FetchRelatedObject fetches the V2BillingPricingPlan related to the event.
func (en *V2BillingPricingPlanUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2BillingPricingPlan, error) {
	relatedObj := &V2BillingPricingPlan{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2BillingPricingPlanComponentCreatedEvent is the Go struct for the "v2.billing.pricing_plan_component.created" event.
// Occurs when a PricingPlanComponent is created.
type V2BillingPricingPlanComponentCreatedEvent struct {
	V2BaseEvent
	Data               V2BillingPricingPlanComponentCreatedEventData `json:"data"`
	RelatedObject      RelatedObject                                 `json:"related_object"`
	fetchRelatedObject func() (*V2BillingPricingPlanComponent, error)
}

// FetchRelatedObject fetches the V2BillingPricingPlanComponent related to the event.
func (e *V2BillingPricingPlanComponentCreatedEvent) FetchRelatedObject(ctx context.Context) (*V2BillingPricingPlanComponent, error) {
	return e.fetchRelatedObject()
}

// V2BillingPricingPlanComponentCreatedEventNotification is the webhook payload you'll get when handling an event with type "v2.billing.pricing_plan_component.created"
// Occurs when a PricingPlanComponent is created.
type V2BillingPricingPlanComponentCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2BillingPricingPlanComponentCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2BillingPricingPlanComponentCreatedEvent that created this Notification
func (en *V2BillingPricingPlanComponentCreatedEventNotification) FetchEvent(ctx context.Context) (*V2BillingPricingPlanComponentCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2BillingPricingPlanComponentCreatedEvent), nil
}

// FetchRelatedObject fetches the V2BillingPricingPlanComponent related to the event.
func (en *V2BillingPricingPlanComponentCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2BillingPricingPlanComponent, error) {
	relatedObj := &V2BillingPricingPlanComponent{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2BillingPricingPlanComponentUpdatedEvent is the Go struct for the "v2.billing.pricing_plan_component.updated" event.
// Occurs when a PricingPlanComponent is updated.
type V2BillingPricingPlanComponentUpdatedEvent struct {
	V2BaseEvent
	Data               V2BillingPricingPlanComponentUpdatedEventData `json:"data"`
	RelatedObject      RelatedObject                                 `json:"related_object"`
	fetchRelatedObject func() (*V2BillingPricingPlanComponent, error)
}

// FetchRelatedObject fetches the V2BillingPricingPlanComponent related to the event.
func (e *V2BillingPricingPlanComponentUpdatedEvent) FetchRelatedObject(ctx context.Context) (*V2BillingPricingPlanComponent, error) {
	return e.fetchRelatedObject()
}

// V2BillingPricingPlanComponentUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v2.billing.pricing_plan_component.updated"
// Occurs when a PricingPlanComponent is updated.
type V2BillingPricingPlanComponentUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2BillingPricingPlanComponentUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2BillingPricingPlanComponentUpdatedEvent that created this Notification
func (en *V2BillingPricingPlanComponentUpdatedEventNotification) FetchEvent(ctx context.Context) (*V2BillingPricingPlanComponentUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2BillingPricingPlanComponentUpdatedEvent), nil
}

// FetchRelatedObject fetches the V2BillingPricingPlanComponent related to the event.
func (en *V2BillingPricingPlanComponentUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2BillingPricingPlanComponent, error) {
	relatedObj := &V2BillingPricingPlanComponent{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2BillingPricingPlanSubscriptionCollectionAwaitingCustomerActionEvent is the Go struct for the "v2.billing.pricing_plan_subscription.collection_awaiting_customer_action" event.
// Occurs when a PricingPlanSubscription's collection is awaiting customer action.
type V2BillingPricingPlanSubscriptionCollectionAwaitingCustomerActionEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2BillingPricingPlanSubscription, error)
}

// FetchRelatedObject fetches the V2BillingPricingPlanSubscription related to the event.
func (e *V2BillingPricingPlanSubscriptionCollectionAwaitingCustomerActionEvent) FetchRelatedObject(ctx context.Context) (*V2BillingPricingPlanSubscription, error) {
	return e.fetchRelatedObject()
}

// V2BillingPricingPlanSubscriptionCollectionAwaitingCustomerActionEventNotification is the webhook payload you'll get when handling an event with type "v2.billing.pricing_plan_subscription.collection_awaiting_customer_action"
// Occurs when a PricingPlanSubscription's collection is awaiting customer action.
type V2BillingPricingPlanSubscriptionCollectionAwaitingCustomerActionEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2BillingPricingPlanSubscriptionCollectionAwaitingCustomerActionEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2BillingPricingPlanSubscriptionCollectionAwaitingCustomerActionEvent that created this Notification
func (en *V2BillingPricingPlanSubscriptionCollectionAwaitingCustomerActionEventNotification) FetchEvent(ctx context.Context) (*V2BillingPricingPlanSubscriptionCollectionAwaitingCustomerActionEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2BillingPricingPlanSubscriptionCollectionAwaitingCustomerActionEvent), nil
}

// FetchRelatedObject fetches the V2BillingPricingPlanSubscription related to the event.
func (en *V2BillingPricingPlanSubscriptionCollectionAwaitingCustomerActionEventNotification) FetchRelatedObject(ctx context.Context) (*V2BillingPricingPlanSubscription, error) {
	relatedObj := &V2BillingPricingPlanSubscription{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2BillingPricingPlanSubscriptionCollectionCurrentEvent is the Go struct for the "v2.billing.pricing_plan_subscription.collection_current" event.
// Occurs when a PricingPlanSubscription's collection is current.
type V2BillingPricingPlanSubscriptionCollectionCurrentEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2BillingPricingPlanSubscription, error)
}

// FetchRelatedObject fetches the V2BillingPricingPlanSubscription related to the event.
func (e *V2BillingPricingPlanSubscriptionCollectionCurrentEvent) FetchRelatedObject(ctx context.Context) (*V2BillingPricingPlanSubscription, error) {
	return e.fetchRelatedObject()
}

// V2BillingPricingPlanSubscriptionCollectionCurrentEventNotification is the webhook payload you'll get when handling an event with type "v2.billing.pricing_plan_subscription.collection_current"
// Occurs when a PricingPlanSubscription's collection is current.
type V2BillingPricingPlanSubscriptionCollectionCurrentEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2BillingPricingPlanSubscriptionCollectionCurrentEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2BillingPricingPlanSubscriptionCollectionCurrentEvent that created this Notification
func (en *V2BillingPricingPlanSubscriptionCollectionCurrentEventNotification) FetchEvent(ctx context.Context) (*V2BillingPricingPlanSubscriptionCollectionCurrentEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2BillingPricingPlanSubscriptionCollectionCurrentEvent), nil
}

// FetchRelatedObject fetches the V2BillingPricingPlanSubscription related to the event.
func (en *V2BillingPricingPlanSubscriptionCollectionCurrentEventNotification) FetchRelatedObject(ctx context.Context) (*V2BillingPricingPlanSubscription, error) {
	relatedObj := &V2BillingPricingPlanSubscription{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2BillingPricingPlanSubscriptionCollectionPastDueEvent is the Go struct for the "v2.billing.pricing_plan_subscription.collection_past_due" event.
// Occurs when a PricingPlanSubscription's collection is past due.
type V2BillingPricingPlanSubscriptionCollectionPastDueEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2BillingPricingPlanSubscription, error)
}

// FetchRelatedObject fetches the V2BillingPricingPlanSubscription related to the event.
func (e *V2BillingPricingPlanSubscriptionCollectionPastDueEvent) FetchRelatedObject(ctx context.Context) (*V2BillingPricingPlanSubscription, error) {
	return e.fetchRelatedObject()
}

// V2BillingPricingPlanSubscriptionCollectionPastDueEventNotification is the webhook payload you'll get when handling an event with type "v2.billing.pricing_plan_subscription.collection_past_due"
// Occurs when a PricingPlanSubscription's collection is past due.
type V2BillingPricingPlanSubscriptionCollectionPastDueEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2BillingPricingPlanSubscriptionCollectionPastDueEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2BillingPricingPlanSubscriptionCollectionPastDueEvent that created this Notification
func (en *V2BillingPricingPlanSubscriptionCollectionPastDueEventNotification) FetchEvent(ctx context.Context) (*V2BillingPricingPlanSubscriptionCollectionPastDueEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2BillingPricingPlanSubscriptionCollectionPastDueEvent), nil
}

// FetchRelatedObject fetches the V2BillingPricingPlanSubscription related to the event.
func (en *V2BillingPricingPlanSubscriptionCollectionPastDueEventNotification) FetchRelatedObject(ctx context.Context) (*V2BillingPricingPlanSubscription, error) {
	relatedObj := &V2BillingPricingPlanSubscription{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2BillingPricingPlanSubscriptionCollectionPausedEvent is the Go struct for the "v2.billing.pricing_plan_subscription.collection_paused" event.
// Occurs when a PricingPlanSubscription's collection is paused.
type V2BillingPricingPlanSubscriptionCollectionPausedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2BillingPricingPlanSubscription, error)
}

// FetchRelatedObject fetches the V2BillingPricingPlanSubscription related to the event.
func (e *V2BillingPricingPlanSubscriptionCollectionPausedEvent) FetchRelatedObject(ctx context.Context) (*V2BillingPricingPlanSubscription, error) {
	return e.fetchRelatedObject()
}

// V2BillingPricingPlanSubscriptionCollectionPausedEventNotification is the webhook payload you'll get when handling an event with type "v2.billing.pricing_plan_subscription.collection_paused"
// Occurs when a PricingPlanSubscription's collection is paused.
type V2BillingPricingPlanSubscriptionCollectionPausedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2BillingPricingPlanSubscriptionCollectionPausedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2BillingPricingPlanSubscriptionCollectionPausedEvent that created this Notification
func (en *V2BillingPricingPlanSubscriptionCollectionPausedEventNotification) FetchEvent(ctx context.Context) (*V2BillingPricingPlanSubscriptionCollectionPausedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2BillingPricingPlanSubscriptionCollectionPausedEvent), nil
}

// FetchRelatedObject fetches the V2BillingPricingPlanSubscription related to the event.
func (en *V2BillingPricingPlanSubscriptionCollectionPausedEventNotification) FetchRelatedObject(ctx context.Context) (*V2BillingPricingPlanSubscription, error) {
	relatedObj := &V2BillingPricingPlanSubscription{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2BillingPricingPlanSubscriptionCollectionUnpaidEvent is the Go struct for the "v2.billing.pricing_plan_subscription.collection_unpaid" event.
// Occurs when a PricingPlanSubscription's collection is unpaid.
type V2BillingPricingPlanSubscriptionCollectionUnpaidEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2BillingPricingPlanSubscription, error)
}

// FetchRelatedObject fetches the V2BillingPricingPlanSubscription related to the event.
func (e *V2BillingPricingPlanSubscriptionCollectionUnpaidEvent) FetchRelatedObject(ctx context.Context) (*V2BillingPricingPlanSubscription, error) {
	return e.fetchRelatedObject()
}

// V2BillingPricingPlanSubscriptionCollectionUnpaidEventNotification is the webhook payload you'll get when handling an event with type "v2.billing.pricing_plan_subscription.collection_unpaid"
// Occurs when a PricingPlanSubscription's collection is unpaid.
type V2BillingPricingPlanSubscriptionCollectionUnpaidEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2BillingPricingPlanSubscriptionCollectionUnpaidEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2BillingPricingPlanSubscriptionCollectionUnpaidEvent that created this Notification
func (en *V2BillingPricingPlanSubscriptionCollectionUnpaidEventNotification) FetchEvent(ctx context.Context) (*V2BillingPricingPlanSubscriptionCollectionUnpaidEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2BillingPricingPlanSubscriptionCollectionUnpaidEvent), nil
}

// FetchRelatedObject fetches the V2BillingPricingPlanSubscription related to the event.
func (en *V2BillingPricingPlanSubscriptionCollectionUnpaidEventNotification) FetchRelatedObject(ctx context.Context) (*V2BillingPricingPlanSubscription, error) {
	relatedObj := &V2BillingPricingPlanSubscription{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2BillingPricingPlanSubscriptionServicingActivatedEvent is the Go struct for the "v2.billing.pricing_plan_subscription.servicing_activated" event.
// Occurs when PricingPlanSubscription servicing is activated.
type V2BillingPricingPlanSubscriptionServicingActivatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2BillingPricingPlanSubscription, error)
}

// FetchRelatedObject fetches the V2BillingPricingPlanSubscription related to the event.
func (e *V2BillingPricingPlanSubscriptionServicingActivatedEvent) FetchRelatedObject(ctx context.Context) (*V2BillingPricingPlanSubscription, error) {
	return e.fetchRelatedObject()
}

// V2BillingPricingPlanSubscriptionServicingActivatedEventNotification is the webhook payload you'll get when handling an event with type "v2.billing.pricing_plan_subscription.servicing_activated"
// Occurs when PricingPlanSubscription servicing is activated.
type V2BillingPricingPlanSubscriptionServicingActivatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2BillingPricingPlanSubscriptionServicingActivatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2BillingPricingPlanSubscriptionServicingActivatedEvent that created this Notification
func (en *V2BillingPricingPlanSubscriptionServicingActivatedEventNotification) FetchEvent(ctx context.Context) (*V2BillingPricingPlanSubscriptionServicingActivatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2BillingPricingPlanSubscriptionServicingActivatedEvent), nil
}

// FetchRelatedObject fetches the V2BillingPricingPlanSubscription related to the event.
func (en *V2BillingPricingPlanSubscriptionServicingActivatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2BillingPricingPlanSubscription, error) {
	relatedObj := &V2BillingPricingPlanSubscription{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2BillingPricingPlanSubscriptionServicingCanceledEvent is the Go struct for the "v2.billing.pricing_plan_subscription.servicing_canceled" event.
// Occurs when PricingPlanSubscription servicing is canceled.
type V2BillingPricingPlanSubscriptionServicingCanceledEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2BillingPricingPlanSubscription, error)
}

// FetchRelatedObject fetches the V2BillingPricingPlanSubscription related to the event.
func (e *V2BillingPricingPlanSubscriptionServicingCanceledEvent) FetchRelatedObject(ctx context.Context) (*V2BillingPricingPlanSubscription, error) {
	return e.fetchRelatedObject()
}

// V2BillingPricingPlanSubscriptionServicingCanceledEventNotification is the webhook payload you'll get when handling an event with type "v2.billing.pricing_plan_subscription.servicing_canceled"
// Occurs when PricingPlanSubscription servicing is canceled.
type V2BillingPricingPlanSubscriptionServicingCanceledEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2BillingPricingPlanSubscriptionServicingCanceledEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2BillingPricingPlanSubscriptionServicingCanceledEvent that created this Notification
func (en *V2BillingPricingPlanSubscriptionServicingCanceledEventNotification) FetchEvent(ctx context.Context) (*V2BillingPricingPlanSubscriptionServicingCanceledEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2BillingPricingPlanSubscriptionServicingCanceledEvent), nil
}

// FetchRelatedObject fetches the V2BillingPricingPlanSubscription related to the event.
func (en *V2BillingPricingPlanSubscriptionServicingCanceledEventNotification) FetchRelatedObject(ctx context.Context) (*V2BillingPricingPlanSubscription, error) {
	relatedObj := &V2BillingPricingPlanSubscription{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2BillingPricingPlanSubscriptionServicingPausedEvent is the Go struct for the "v2.billing.pricing_plan_subscription.servicing_paused" event.
// Occurs when PricingPlanSubscription servicing is paused.
type V2BillingPricingPlanSubscriptionServicingPausedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2BillingPricingPlanSubscription, error)
}

// FetchRelatedObject fetches the V2BillingPricingPlanSubscription related to the event.
func (e *V2BillingPricingPlanSubscriptionServicingPausedEvent) FetchRelatedObject(ctx context.Context) (*V2BillingPricingPlanSubscription, error) {
	return e.fetchRelatedObject()
}

// V2BillingPricingPlanSubscriptionServicingPausedEventNotification is the webhook payload you'll get when handling an event with type "v2.billing.pricing_plan_subscription.servicing_paused"
// Occurs when PricingPlanSubscription servicing is paused.
type V2BillingPricingPlanSubscriptionServicingPausedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2BillingPricingPlanSubscriptionServicingPausedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2BillingPricingPlanSubscriptionServicingPausedEvent that created this Notification
func (en *V2BillingPricingPlanSubscriptionServicingPausedEventNotification) FetchEvent(ctx context.Context) (*V2BillingPricingPlanSubscriptionServicingPausedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2BillingPricingPlanSubscriptionServicingPausedEvent), nil
}

// FetchRelatedObject fetches the V2BillingPricingPlanSubscription related to the event.
func (en *V2BillingPricingPlanSubscriptionServicingPausedEventNotification) FetchRelatedObject(ctx context.Context) (*V2BillingPricingPlanSubscription, error) {
	relatedObj := &V2BillingPricingPlanSubscription{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2BillingPricingPlanVersionCreatedEvent is the Go struct for the "v2.billing.pricing_plan_version.created" event.
// Occurs when a PricingPlanVersion is created.
type V2BillingPricingPlanVersionCreatedEvent struct {
	V2BaseEvent
	Data               V2BillingPricingPlanVersionCreatedEventData `json:"data"`
	RelatedObject      RelatedObject                               `json:"related_object"`
	fetchRelatedObject func() (*V2BillingPricingPlanVersion, error)
}

// FetchRelatedObject fetches the V2BillingPricingPlanVersion related to the event.
func (e *V2BillingPricingPlanVersionCreatedEvent) FetchRelatedObject(ctx context.Context) (*V2BillingPricingPlanVersion, error) {
	return e.fetchRelatedObject()
}

// V2BillingPricingPlanVersionCreatedEventNotification is the webhook payload you'll get when handling an event with type "v2.billing.pricing_plan_version.created"
// Occurs when a PricingPlanVersion is created.
type V2BillingPricingPlanVersionCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2BillingPricingPlanVersionCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2BillingPricingPlanVersionCreatedEvent that created this Notification
func (en *V2BillingPricingPlanVersionCreatedEventNotification) FetchEvent(ctx context.Context) (*V2BillingPricingPlanVersionCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2BillingPricingPlanVersionCreatedEvent), nil
}

// FetchRelatedObject fetches the V2BillingPricingPlanVersion related to the event.
func (en *V2BillingPricingPlanVersionCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2BillingPricingPlanVersion, error) {
	relatedObj := &V2BillingPricingPlanVersion{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2BillingRateCardCreatedEvent is the Go struct for the "v2.billing.rate_card.created" event.
// Occurs when a RateCard is created.
type V2BillingRateCardCreatedEvent struct {
	V2BaseEvent
	Data               V2BillingRateCardCreatedEventData `json:"data"`
	RelatedObject      RelatedObject                     `json:"related_object"`
	fetchRelatedObject func() (*V2BillingRateCard, error)
}

// FetchRelatedObject fetches the V2BillingRateCard related to the event.
func (e *V2BillingRateCardCreatedEvent) FetchRelatedObject(ctx context.Context) (*V2BillingRateCard, error) {
	return e.fetchRelatedObject()
}

// V2BillingRateCardCreatedEventNotification is the webhook payload you'll get when handling an event with type "v2.billing.rate_card.created"
// Occurs when a RateCard is created.
type V2BillingRateCardCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2BillingRateCardCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2BillingRateCardCreatedEvent that created this Notification
func (en *V2BillingRateCardCreatedEventNotification) FetchEvent(ctx context.Context) (*V2BillingRateCardCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2BillingRateCardCreatedEvent), nil
}

// FetchRelatedObject fetches the V2BillingRateCard related to the event.
func (en *V2BillingRateCardCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2BillingRateCard, error) {
	relatedObj := &V2BillingRateCard{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2BillingRateCardUpdatedEvent is the Go struct for the "v2.billing.rate_card.updated" event.
// Occurs when a RateCard is updated.
type V2BillingRateCardUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2BillingRateCard, error)
}

// FetchRelatedObject fetches the V2BillingRateCard related to the event.
func (e *V2BillingRateCardUpdatedEvent) FetchRelatedObject(ctx context.Context) (*V2BillingRateCard, error) {
	return e.fetchRelatedObject()
}

// V2BillingRateCardUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v2.billing.rate_card.updated"
// Occurs when a RateCard is updated.
type V2BillingRateCardUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2BillingRateCardUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2BillingRateCardUpdatedEvent that created this Notification
func (en *V2BillingRateCardUpdatedEventNotification) FetchEvent(ctx context.Context) (*V2BillingRateCardUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2BillingRateCardUpdatedEvent), nil
}

// FetchRelatedObject fetches the V2BillingRateCard related to the event.
func (en *V2BillingRateCardUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2BillingRateCard, error) {
	relatedObj := &V2BillingRateCard{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2BillingRateCardRateCreatedEvent is the Go struct for the "v2.billing.rate_card_rate.created" event.
// Occurs when a RateCardRate is created.
type V2BillingRateCardRateCreatedEvent struct {
	V2BaseEvent
	Data               V2BillingRateCardRateCreatedEventData `json:"data"`
	RelatedObject      RelatedObject                         `json:"related_object"`
	fetchRelatedObject func() (*V2BillingRateCardRate, error)
}

// FetchRelatedObject fetches the V2BillingRateCardRate related to the event.
func (e *V2BillingRateCardRateCreatedEvent) FetchRelatedObject(ctx context.Context) (*V2BillingRateCardRate, error) {
	return e.fetchRelatedObject()
}

// V2BillingRateCardRateCreatedEventNotification is the webhook payload you'll get when handling an event with type "v2.billing.rate_card_rate.created"
// Occurs when a RateCardRate is created.
type V2BillingRateCardRateCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2BillingRateCardRateCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2BillingRateCardRateCreatedEvent that created this Notification
func (en *V2BillingRateCardRateCreatedEventNotification) FetchEvent(ctx context.Context) (*V2BillingRateCardRateCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2BillingRateCardRateCreatedEvent), nil
}

// FetchRelatedObject fetches the V2BillingRateCardRate related to the event.
func (en *V2BillingRateCardRateCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2BillingRateCardRate, error) {
	relatedObj := &V2BillingRateCardRate{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2BillingRateCardSubscriptionActivatedEvent is the Go struct for the "v2.billing.rate_card_subscription.activated" event.
// Occurs when a RateCardSubscription is activated.
type V2BillingRateCardSubscriptionActivatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2BillingRateCardSubscription, error)
}

// FetchRelatedObject fetches the V2BillingRateCardSubscription related to the event.
func (e *V2BillingRateCardSubscriptionActivatedEvent) FetchRelatedObject(ctx context.Context) (*V2BillingRateCardSubscription, error) {
	return e.fetchRelatedObject()
}

// V2BillingRateCardSubscriptionActivatedEventNotification is the webhook payload you'll get when handling an event with type "v2.billing.rate_card_subscription.activated"
// Occurs when a RateCardSubscription is activated.
type V2BillingRateCardSubscriptionActivatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2BillingRateCardSubscriptionActivatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2BillingRateCardSubscriptionActivatedEvent that created this Notification
func (en *V2BillingRateCardSubscriptionActivatedEventNotification) FetchEvent(ctx context.Context) (*V2BillingRateCardSubscriptionActivatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2BillingRateCardSubscriptionActivatedEvent), nil
}

// FetchRelatedObject fetches the V2BillingRateCardSubscription related to the event.
func (en *V2BillingRateCardSubscriptionActivatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2BillingRateCardSubscription, error) {
	relatedObj := &V2BillingRateCardSubscription{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2BillingRateCardSubscriptionCanceledEvent is the Go struct for the "v2.billing.rate_card_subscription.canceled" event.
// Occurs when a RateCardSubscription is canceled.
type V2BillingRateCardSubscriptionCanceledEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2BillingRateCardSubscription, error)
}

// FetchRelatedObject fetches the V2BillingRateCardSubscription related to the event.
func (e *V2BillingRateCardSubscriptionCanceledEvent) FetchRelatedObject(ctx context.Context) (*V2BillingRateCardSubscription, error) {
	return e.fetchRelatedObject()
}

// V2BillingRateCardSubscriptionCanceledEventNotification is the webhook payload you'll get when handling an event with type "v2.billing.rate_card_subscription.canceled"
// Occurs when a RateCardSubscription is canceled.
type V2BillingRateCardSubscriptionCanceledEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2BillingRateCardSubscriptionCanceledEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2BillingRateCardSubscriptionCanceledEvent that created this Notification
func (en *V2BillingRateCardSubscriptionCanceledEventNotification) FetchEvent(ctx context.Context) (*V2BillingRateCardSubscriptionCanceledEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2BillingRateCardSubscriptionCanceledEvent), nil
}

// FetchRelatedObject fetches the V2BillingRateCardSubscription related to the event.
func (en *V2BillingRateCardSubscriptionCanceledEventNotification) FetchRelatedObject(ctx context.Context) (*V2BillingRateCardSubscription, error) {
	relatedObj := &V2BillingRateCardSubscription{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2BillingRateCardSubscriptionCollectionAwaitingCustomerActionEvent is the Go struct for the "v2.billing.rate_card_subscription.collection_awaiting_customer_action" event.
// Occurs when a RateCardSubscription's collection is awaiting customer action.
type V2BillingRateCardSubscriptionCollectionAwaitingCustomerActionEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2BillingRateCardSubscription, error)
}

// FetchRelatedObject fetches the V2BillingRateCardSubscription related to the event.
func (e *V2BillingRateCardSubscriptionCollectionAwaitingCustomerActionEvent) FetchRelatedObject(ctx context.Context) (*V2BillingRateCardSubscription, error) {
	return e.fetchRelatedObject()
}

// V2BillingRateCardSubscriptionCollectionAwaitingCustomerActionEventNotification is the webhook payload you'll get when handling an event with type "v2.billing.rate_card_subscription.collection_awaiting_customer_action"
// Occurs when a RateCardSubscription's collection is awaiting customer action.
type V2BillingRateCardSubscriptionCollectionAwaitingCustomerActionEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2BillingRateCardSubscriptionCollectionAwaitingCustomerActionEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2BillingRateCardSubscriptionCollectionAwaitingCustomerActionEvent that created this Notification
func (en *V2BillingRateCardSubscriptionCollectionAwaitingCustomerActionEventNotification) FetchEvent(ctx context.Context) (*V2BillingRateCardSubscriptionCollectionAwaitingCustomerActionEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2BillingRateCardSubscriptionCollectionAwaitingCustomerActionEvent), nil
}

// FetchRelatedObject fetches the V2BillingRateCardSubscription related to the event.
func (en *V2BillingRateCardSubscriptionCollectionAwaitingCustomerActionEventNotification) FetchRelatedObject(ctx context.Context) (*V2BillingRateCardSubscription, error) {
	relatedObj := &V2BillingRateCardSubscription{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2BillingRateCardSubscriptionCollectionCurrentEvent is the Go struct for the "v2.billing.rate_card_subscription.collection_current" event.
// Occurs when a RateCardSubscription's collection is current.
type V2BillingRateCardSubscriptionCollectionCurrentEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2BillingRateCardSubscription, error)
}

// FetchRelatedObject fetches the V2BillingRateCardSubscription related to the event.
func (e *V2BillingRateCardSubscriptionCollectionCurrentEvent) FetchRelatedObject(ctx context.Context) (*V2BillingRateCardSubscription, error) {
	return e.fetchRelatedObject()
}

// V2BillingRateCardSubscriptionCollectionCurrentEventNotification is the webhook payload you'll get when handling an event with type "v2.billing.rate_card_subscription.collection_current"
// Occurs when a RateCardSubscription's collection is current.
type V2BillingRateCardSubscriptionCollectionCurrentEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2BillingRateCardSubscriptionCollectionCurrentEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2BillingRateCardSubscriptionCollectionCurrentEvent that created this Notification
func (en *V2BillingRateCardSubscriptionCollectionCurrentEventNotification) FetchEvent(ctx context.Context) (*V2BillingRateCardSubscriptionCollectionCurrentEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2BillingRateCardSubscriptionCollectionCurrentEvent), nil
}

// FetchRelatedObject fetches the V2BillingRateCardSubscription related to the event.
func (en *V2BillingRateCardSubscriptionCollectionCurrentEventNotification) FetchRelatedObject(ctx context.Context) (*V2BillingRateCardSubscription, error) {
	relatedObj := &V2BillingRateCardSubscription{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2BillingRateCardSubscriptionCollectionPastDueEvent is the Go struct for the "v2.billing.rate_card_subscription.collection_past_due" event.
// Occurs when a RateCardSubscription's collection is past due.
type V2BillingRateCardSubscriptionCollectionPastDueEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2BillingRateCardSubscription, error)
}

// FetchRelatedObject fetches the V2BillingRateCardSubscription related to the event.
func (e *V2BillingRateCardSubscriptionCollectionPastDueEvent) FetchRelatedObject(ctx context.Context) (*V2BillingRateCardSubscription, error) {
	return e.fetchRelatedObject()
}

// V2BillingRateCardSubscriptionCollectionPastDueEventNotification is the webhook payload you'll get when handling an event with type "v2.billing.rate_card_subscription.collection_past_due"
// Occurs when a RateCardSubscription's collection is past due.
type V2BillingRateCardSubscriptionCollectionPastDueEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2BillingRateCardSubscriptionCollectionPastDueEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2BillingRateCardSubscriptionCollectionPastDueEvent that created this Notification
func (en *V2BillingRateCardSubscriptionCollectionPastDueEventNotification) FetchEvent(ctx context.Context) (*V2BillingRateCardSubscriptionCollectionPastDueEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2BillingRateCardSubscriptionCollectionPastDueEvent), nil
}

// FetchRelatedObject fetches the V2BillingRateCardSubscription related to the event.
func (en *V2BillingRateCardSubscriptionCollectionPastDueEventNotification) FetchRelatedObject(ctx context.Context) (*V2BillingRateCardSubscription, error) {
	relatedObj := &V2BillingRateCardSubscription{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2BillingRateCardSubscriptionCollectionPausedEvent is the Go struct for the "v2.billing.rate_card_subscription.collection_paused" event.
// Occurs when a RateCardSubscription's collection is paused.
type V2BillingRateCardSubscriptionCollectionPausedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2BillingRateCardSubscription, error)
}

// FetchRelatedObject fetches the V2BillingRateCardSubscription related to the event.
func (e *V2BillingRateCardSubscriptionCollectionPausedEvent) FetchRelatedObject(ctx context.Context) (*V2BillingRateCardSubscription, error) {
	return e.fetchRelatedObject()
}

// V2BillingRateCardSubscriptionCollectionPausedEventNotification is the webhook payload you'll get when handling an event with type "v2.billing.rate_card_subscription.collection_paused"
// Occurs when a RateCardSubscription's collection is paused.
type V2BillingRateCardSubscriptionCollectionPausedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2BillingRateCardSubscriptionCollectionPausedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2BillingRateCardSubscriptionCollectionPausedEvent that created this Notification
func (en *V2BillingRateCardSubscriptionCollectionPausedEventNotification) FetchEvent(ctx context.Context) (*V2BillingRateCardSubscriptionCollectionPausedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2BillingRateCardSubscriptionCollectionPausedEvent), nil
}

// FetchRelatedObject fetches the V2BillingRateCardSubscription related to the event.
func (en *V2BillingRateCardSubscriptionCollectionPausedEventNotification) FetchRelatedObject(ctx context.Context) (*V2BillingRateCardSubscription, error) {
	relatedObj := &V2BillingRateCardSubscription{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2BillingRateCardSubscriptionCollectionUnpaidEvent is the Go struct for the "v2.billing.rate_card_subscription.collection_unpaid" event.
// Occurs when a RateCardSubscription's collection is unpaid.
type V2BillingRateCardSubscriptionCollectionUnpaidEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2BillingRateCardSubscription, error)
}

// FetchRelatedObject fetches the V2BillingRateCardSubscription related to the event.
func (e *V2BillingRateCardSubscriptionCollectionUnpaidEvent) FetchRelatedObject(ctx context.Context) (*V2BillingRateCardSubscription, error) {
	return e.fetchRelatedObject()
}

// V2BillingRateCardSubscriptionCollectionUnpaidEventNotification is the webhook payload you'll get when handling an event with type "v2.billing.rate_card_subscription.collection_unpaid"
// Occurs when a RateCardSubscription's collection is unpaid.
type V2BillingRateCardSubscriptionCollectionUnpaidEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2BillingRateCardSubscriptionCollectionUnpaidEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2BillingRateCardSubscriptionCollectionUnpaidEvent that created this Notification
func (en *V2BillingRateCardSubscriptionCollectionUnpaidEventNotification) FetchEvent(ctx context.Context) (*V2BillingRateCardSubscriptionCollectionUnpaidEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2BillingRateCardSubscriptionCollectionUnpaidEvent), nil
}

// FetchRelatedObject fetches the V2BillingRateCardSubscription related to the event.
func (en *V2BillingRateCardSubscriptionCollectionUnpaidEventNotification) FetchRelatedObject(ctx context.Context) (*V2BillingRateCardSubscription, error) {
	relatedObj := &V2BillingRateCardSubscription{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2BillingRateCardSubscriptionServicingActivatedEvent is the Go struct for the "v2.billing.rate_card_subscription.servicing_activated" event.
// Occurs when RateCardSubscription servicing is activated.
type V2BillingRateCardSubscriptionServicingActivatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2BillingRateCardSubscription, error)
}

// FetchRelatedObject fetches the V2BillingRateCardSubscription related to the event.
func (e *V2BillingRateCardSubscriptionServicingActivatedEvent) FetchRelatedObject(ctx context.Context) (*V2BillingRateCardSubscription, error) {
	return e.fetchRelatedObject()
}

// V2BillingRateCardSubscriptionServicingActivatedEventNotification is the webhook payload you'll get when handling an event with type "v2.billing.rate_card_subscription.servicing_activated"
// Occurs when RateCardSubscription servicing is activated.
type V2BillingRateCardSubscriptionServicingActivatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2BillingRateCardSubscriptionServicingActivatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2BillingRateCardSubscriptionServicingActivatedEvent that created this Notification
func (en *V2BillingRateCardSubscriptionServicingActivatedEventNotification) FetchEvent(ctx context.Context) (*V2BillingRateCardSubscriptionServicingActivatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2BillingRateCardSubscriptionServicingActivatedEvent), nil
}

// FetchRelatedObject fetches the V2BillingRateCardSubscription related to the event.
func (en *V2BillingRateCardSubscriptionServicingActivatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2BillingRateCardSubscription, error) {
	relatedObj := &V2BillingRateCardSubscription{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2BillingRateCardSubscriptionServicingCanceledEvent is the Go struct for the "v2.billing.rate_card_subscription.servicing_canceled" event.
// Occurs when RateCardSubscription servicing is canceled.
type V2BillingRateCardSubscriptionServicingCanceledEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2BillingRateCardSubscription, error)
}

// FetchRelatedObject fetches the V2BillingRateCardSubscription related to the event.
func (e *V2BillingRateCardSubscriptionServicingCanceledEvent) FetchRelatedObject(ctx context.Context) (*V2BillingRateCardSubscription, error) {
	return e.fetchRelatedObject()
}

// V2BillingRateCardSubscriptionServicingCanceledEventNotification is the webhook payload you'll get when handling an event with type "v2.billing.rate_card_subscription.servicing_canceled"
// Occurs when RateCardSubscription servicing is canceled.
type V2BillingRateCardSubscriptionServicingCanceledEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2BillingRateCardSubscriptionServicingCanceledEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2BillingRateCardSubscriptionServicingCanceledEvent that created this Notification
func (en *V2BillingRateCardSubscriptionServicingCanceledEventNotification) FetchEvent(ctx context.Context) (*V2BillingRateCardSubscriptionServicingCanceledEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2BillingRateCardSubscriptionServicingCanceledEvent), nil
}

// FetchRelatedObject fetches the V2BillingRateCardSubscription related to the event.
func (en *V2BillingRateCardSubscriptionServicingCanceledEventNotification) FetchRelatedObject(ctx context.Context) (*V2BillingRateCardSubscription, error) {
	relatedObj := &V2BillingRateCardSubscription{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2BillingRateCardSubscriptionServicingPausedEvent is the Go struct for the "v2.billing.rate_card_subscription.servicing_paused" event.
// Occurs when RateCardSubscription servicing is paused.
type V2BillingRateCardSubscriptionServicingPausedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2BillingRateCardSubscription, error)
}

// FetchRelatedObject fetches the V2BillingRateCardSubscription related to the event.
func (e *V2BillingRateCardSubscriptionServicingPausedEvent) FetchRelatedObject(ctx context.Context) (*V2BillingRateCardSubscription, error) {
	return e.fetchRelatedObject()
}

// V2BillingRateCardSubscriptionServicingPausedEventNotification is the webhook payload you'll get when handling an event with type "v2.billing.rate_card_subscription.servicing_paused"
// Occurs when RateCardSubscription servicing is paused.
type V2BillingRateCardSubscriptionServicingPausedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2BillingRateCardSubscriptionServicingPausedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2BillingRateCardSubscriptionServicingPausedEvent that created this Notification
func (en *V2BillingRateCardSubscriptionServicingPausedEventNotification) FetchEvent(ctx context.Context) (*V2BillingRateCardSubscriptionServicingPausedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2BillingRateCardSubscriptionServicingPausedEvent), nil
}

// FetchRelatedObject fetches the V2BillingRateCardSubscription related to the event.
func (en *V2BillingRateCardSubscriptionServicingPausedEventNotification) FetchRelatedObject(ctx context.Context) (*V2BillingRateCardSubscription, error) {
	relatedObj := &V2BillingRateCardSubscription{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2BillingRateCardVersionCreatedEvent is the Go struct for the "v2.billing.rate_card_version.created" event.
// Occurs when a RateCardVersion is created.
type V2BillingRateCardVersionCreatedEvent struct {
	V2BaseEvent
	Data               V2BillingRateCardVersionCreatedEventData `json:"data"`
	RelatedObject      RelatedObject                            `json:"related_object"`
	fetchRelatedObject func() (*V2BillingRateCardVersion, error)
}

// FetchRelatedObject fetches the V2BillingRateCardVersion related to the event.
func (e *V2BillingRateCardVersionCreatedEvent) FetchRelatedObject(ctx context.Context) (*V2BillingRateCardVersion, error) {
	return e.fetchRelatedObject()
}

// V2BillingRateCardVersionCreatedEventNotification is the webhook payload you'll get when handling an event with type "v2.billing.rate_card_version.created"
// Occurs when a RateCardVersion is created.
type V2BillingRateCardVersionCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2BillingRateCardVersionCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2BillingRateCardVersionCreatedEvent that created this Notification
func (en *V2BillingRateCardVersionCreatedEventNotification) FetchEvent(ctx context.Context) (*V2BillingRateCardVersionCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2BillingRateCardVersionCreatedEvent), nil
}

// FetchRelatedObject fetches the V2BillingRateCardVersion related to the event.
func (en *V2BillingRateCardVersionCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2BillingRateCardVersion, error) {
	relatedObj := &V2BillingRateCardVersion{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2CoreAccountClosedEvent is the Go struct for the "v2.core.account.closed" event.
// This event occurs when an account is closed.
type V2CoreAccountClosedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2CoreAccount, error)
}

// FetchRelatedObject fetches the V2CoreAccount related to the event.
func (e *V2CoreAccountClosedEvent) FetchRelatedObject(ctx context.Context) (*V2CoreAccount, error) {
	return e.fetchRelatedObject()
}

// V2CoreAccountClosedEventNotification is the webhook payload you'll get when handling an event with type "v2.core.account.closed"
// This event occurs when an account is closed.
type V2CoreAccountClosedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2CoreAccountClosedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2CoreAccountClosedEvent that created this Notification
func (en *V2CoreAccountClosedEventNotification) FetchEvent(ctx context.Context) (*V2CoreAccountClosedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2CoreAccountClosedEvent), nil
}

// FetchRelatedObject fetches the V2CoreAccount related to the event.
func (en *V2CoreAccountClosedEventNotification) FetchRelatedObject(ctx context.Context) (*V2CoreAccount, error) {
	relatedObj := &V2CoreAccount{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2CoreAccountCreatedEvent is the Go struct for the "v2.core.account.created" event.
// Occurs when an Account is created.
type V2CoreAccountCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2CoreAccount, error)
}

// FetchRelatedObject fetches the V2CoreAccount related to the event.
func (e *V2CoreAccountCreatedEvent) FetchRelatedObject(ctx context.Context) (*V2CoreAccount, error) {
	return e.fetchRelatedObject()
}

// V2CoreAccountCreatedEventNotification is the webhook payload you'll get when handling an event with type "v2.core.account.created"
// Occurs when an Account is created.
type V2CoreAccountCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2CoreAccountCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2CoreAccountCreatedEvent that created this Notification
func (en *V2CoreAccountCreatedEventNotification) FetchEvent(ctx context.Context) (*V2CoreAccountCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2CoreAccountCreatedEvent), nil
}

// FetchRelatedObject fetches the V2CoreAccount related to the event.
func (en *V2CoreAccountCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2CoreAccount, error) {
	relatedObj := &V2CoreAccount{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2CoreAccountUpdatedEvent is the Go struct for the "v2.core.account.updated" event.
// Occurs when an Account is updated.
type V2CoreAccountUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2CoreAccount, error)
}

// FetchRelatedObject fetches the V2CoreAccount related to the event.
func (e *V2CoreAccountUpdatedEvent) FetchRelatedObject(ctx context.Context) (*V2CoreAccount, error) {
	return e.fetchRelatedObject()
}

// V2CoreAccountUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v2.core.account.updated"
// Occurs when an Account is updated.
type V2CoreAccountUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2CoreAccountUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2CoreAccountUpdatedEvent that created this Notification
func (en *V2CoreAccountUpdatedEventNotification) FetchEvent(ctx context.Context) (*V2CoreAccountUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2CoreAccountUpdatedEvent), nil
}

// FetchRelatedObject fetches the V2CoreAccount related to the event.
func (en *V2CoreAccountUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2CoreAccount, error) {
	relatedObj := &V2CoreAccount{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2CoreAccountIncludingConfigurationCustomerCapabilityStatusUpdatedEvent is the Go struct for the "v2.core.account[configuration.customer].capability_status_updated" event.
// Occurs when the status of an Account's customer configuration capability is updated.
type V2CoreAccountIncludingConfigurationCustomerCapabilityStatusUpdatedEvent struct {
	V2BaseEvent
	Data               V2CoreAccountIncludingConfigurationCustomerCapabilityStatusUpdatedEventData `json:"data"`
	RelatedObject      RelatedObject                                                               `json:"related_object"`
	fetchRelatedObject func() (*V2CoreAccount, error)
}

// FetchRelatedObject fetches the V2CoreAccount related to the event.
func (e *V2CoreAccountIncludingConfigurationCustomerCapabilityStatusUpdatedEvent) FetchRelatedObject(ctx context.Context) (*V2CoreAccount, error) {
	return e.fetchRelatedObject()
}

// V2CoreAccountIncludingConfigurationCustomerCapabilityStatusUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v2.core.account[configuration.customer].capability_status_updated"
// Occurs when the status of an Account's customer configuration capability is updated.
type V2CoreAccountIncludingConfigurationCustomerCapabilityStatusUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2CoreAccountIncludingConfigurationCustomerCapabilityStatusUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2CoreAccountIncludingConfigurationCustomerCapabilityStatusUpdatedEvent that created this Notification
func (en *V2CoreAccountIncludingConfigurationCustomerCapabilityStatusUpdatedEventNotification) FetchEvent(ctx context.Context) (*V2CoreAccountIncludingConfigurationCustomerCapabilityStatusUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2CoreAccountIncludingConfigurationCustomerCapabilityStatusUpdatedEvent), nil
}

// FetchRelatedObject fetches the V2CoreAccount related to the event.
func (en *V2CoreAccountIncludingConfigurationCustomerCapabilityStatusUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2CoreAccount, error) {
	relatedObj := &V2CoreAccount{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2CoreAccountIncludingConfigurationCustomerUpdatedEvent is the Go struct for the "v2.core.account[configuration.customer].updated" event.
// Occurs when an Account's customer configuration is updated.
type V2CoreAccountIncludingConfigurationCustomerUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2CoreAccount, error)
}

// FetchRelatedObject fetches the V2CoreAccount related to the event.
func (e *V2CoreAccountIncludingConfigurationCustomerUpdatedEvent) FetchRelatedObject(ctx context.Context) (*V2CoreAccount, error) {
	return e.fetchRelatedObject()
}

// V2CoreAccountIncludingConfigurationCustomerUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v2.core.account[configuration.customer].updated"
// Occurs when an Account's customer configuration is updated.
type V2CoreAccountIncludingConfigurationCustomerUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2CoreAccountIncludingConfigurationCustomerUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2CoreAccountIncludingConfigurationCustomerUpdatedEvent that created this Notification
func (en *V2CoreAccountIncludingConfigurationCustomerUpdatedEventNotification) FetchEvent(ctx context.Context) (*V2CoreAccountIncludingConfigurationCustomerUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2CoreAccountIncludingConfigurationCustomerUpdatedEvent), nil
}

// FetchRelatedObject fetches the V2CoreAccount related to the event.
func (en *V2CoreAccountIncludingConfigurationCustomerUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2CoreAccount, error) {
	relatedObj := &V2CoreAccount{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEvent is the Go struct for the "v2.core.account[configuration.merchant].capability_status_updated" event.
// Occurs when the status of an Account's merchant configuration capability is updated.
type V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEvent struct {
	V2BaseEvent
	Data               V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventData `json:"data"`
	RelatedObject      RelatedObject                                                               `json:"related_object"`
	fetchRelatedObject func() (*V2CoreAccount, error)
}

// FetchRelatedObject fetches the V2CoreAccount related to the event.
func (e *V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEvent) FetchRelatedObject(ctx context.Context) (*V2CoreAccount, error) {
	return e.fetchRelatedObject()
}

// V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v2.core.account[configuration.merchant].capability_status_updated"
// Occurs when the status of an Account's merchant configuration capability is updated.
type V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEvent that created this Notification
func (en *V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventNotification) FetchEvent(ctx context.Context) (*V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEvent), nil
}

// FetchRelatedObject fetches the V2CoreAccount related to the event.
func (en *V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2CoreAccount, error) {
	relatedObj := &V2CoreAccount{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2CoreAccountIncludingConfigurationMerchantUpdatedEvent is the Go struct for the "v2.core.account[configuration.merchant].updated" event.
// Occurs when an Account's merchant configuration is updated.
type V2CoreAccountIncludingConfigurationMerchantUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2CoreAccount, error)
}

// FetchRelatedObject fetches the V2CoreAccount related to the event.
func (e *V2CoreAccountIncludingConfigurationMerchantUpdatedEvent) FetchRelatedObject(ctx context.Context) (*V2CoreAccount, error) {
	return e.fetchRelatedObject()
}

// V2CoreAccountIncludingConfigurationMerchantUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v2.core.account[configuration.merchant].updated"
// Occurs when an Account's merchant configuration is updated.
type V2CoreAccountIncludingConfigurationMerchantUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2CoreAccountIncludingConfigurationMerchantUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2CoreAccountIncludingConfigurationMerchantUpdatedEvent that created this Notification
func (en *V2CoreAccountIncludingConfigurationMerchantUpdatedEventNotification) FetchEvent(ctx context.Context) (*V2CoreAccountIncludingConfigurationMerchantUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2CoreAccountIncludingConfigurationMerchantUpdatedEvent), nil
}

// FetchRelatedObject fetches the V2CoreAccount related to the event.
func (en *V2CoreAccountIncludingConfigurationMerchantUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2CoreAccount, error) {
	relatedObj := &V2CoreAccount{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2CoreAccountIncludingConfigurationRecipientCapabilityStatusUpdatedEvent is the Go struct for the "v2.core.account[configuration.recipient].capability_status_updated" event.
// Occurs when the status of an Account's recipient configuration capability is updated.
type V2CoreAccountIncludingConfigurationRecipientCapabilityStatusUpdatedEvent struct {
	V2BaseEvent
	Data               V2CoreAccountIncludingConfigurationRecipientCapabilityStatusUpdatedEventData `json:"data"`
	RelatedObject      RelatedObject                                                                `json:"related_object"`
	fetchRelatedObject func() (*V2CoreAccount, error)
}

// FetchRelatedObject fetches the V2CoreAccount related to the event.
func (e *V2CoreAccountIncludingConfigurationRecipientCapabilityStatusUpdatedEvent) FetchRelatedObject(ctx context.Context) (*V2CoreAccount, error) {
	return e.fetchRelatedObject()
}

// V2CoreAccountIncludingConfigurationRecipientCapabilityStatusUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v2.core.account[configuration.recipient].capability_status_updated"
// Occurs when the status of an Account's recipient configuration capability is updated.
type V2CoreAccountIncludingConfigurationRecipientCapabilityStatusUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2CoreAccountIncludingConfigurationRecipientCapabilityStatusUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2CoreAccountIncludingConfigurationRecipientCapabilityStatusUpdatedEvent that created this Notification
func (en *V2CoreAccountIncludingConfigurationRecipientCapabilityStatusUpdatedEventNotification) FetchEvent(ctx context.Context) (*V2CoreAccountIncludingConfigurationRecipientCapabilityStatusUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2CoreAccountIncludingConfigurationRecipientCapabilityStatusUpdatedEvent), nil
}

// FetchRelatedObject fetches the V2CoreAccount related to the event.
func (en *V2CoreAccountIncludingConfigurationRecipientCapabilityStatusUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2CoreAccount, error) {
	relatedObj := &V2CoreAccount{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2CoreAccountIncludingConfigurationRecipientUpdatedEvent is the Go struct for the "v2.core.account[configuration.recipient].updated" event.
// Occurs when a Recipient's configuration is updated.
type V2CoreAccountIncludingConfigurationRecipientUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2CoreAccount, error)
}

// FetchRelatedObject fetches the V2CoreAccount related to the event.
func (e *V2CoreAccountIncludingConfigurationRecipientUpdatedEvent) FetchRelatedObject(ctx context.Context) (*V2CoreAccount, error) {
	return e.fetchRelatedObject()
}

// V2CoreAccountIncludingConfigurationRecipientUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v2.core.account[configuration.recipient].updated"
// Occurs when a Recipient's configuration is updated.
type V2CoreAccountIncludingConfigurationRecipientUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2CoreAccountIncludingConfigurationRecipientUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2CoreAccountIncludingConfigurationRecipientUpdatedEvent that created this Notification
func (en *V2CoreAccountIncludingConfigurationRecipientUpdatedEventNotification) FetchEvent(ctx context.Context) (*V2CoreAccountIncludingConfigurationRecipientUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2CoreAccountIncludingConfigurationRecipientUpdatedEvent), nil
}

// FetchRelatedObject fetches the V2CoreAccount related to the event.
func (en *V2CoreAccountIncludingConfigurationRecipientUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2CoreAccount, error) {
	relatedObj := &V2CoreAccount{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2CoreAccountIncludingConfigurationStorerCapabilityStatusUpdatedEvent is the Go struct for the "v2.core.account[configuration.storer].capability_status_updated" event.
// Occurs when the status of an Account's storer configuration capability is updated.
type V2CoreAccountIncludingConfigurationStorerCapabilityStatusUpdatedEvent struct {
	V2BaseEvent
	Data               V2CoreAccountIncludingConfigurationStorerCapabilityStatusUpdatedEventData `json:"data"`
	RelatedObject      RelatedObject                                                             `json:"related_object"`
	fetchRelatedObject func() (*V2CoreAccount, error)
}

// FetchRelatedObject fetches the V2CoreAccount related to the event.
func (e *V2CoreAccountIncludingConfigurationStorerCapabilityStatusUpdatedEvent) FetchRelatedObject(ctx context.Context) (*V2CoreAccount, error) {
	return e.fetchRelatedObject()
}

// V2CoreAccountIncludingConfigurationStorerCapabilityStatusUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v2.core.account[configuration.storer].capability_status_updated"
// Occurs when the status of an Account's storer configuration capability is updated.
type V2CoreAccountIncludingConfigurationStorerCapabilityStatusUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2CoreAccountIncludingConfigurationStorerCapabilityStatusUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2CoreAccountIncludingConfigurationStorerCapabilityStatusUpdatedEvent that created this Notification
func (en *V2CoreAccountIncludingConfigurationStorerCapabilityStatusUpdatedEventNotification) FetchEvent(ctx context.Context) (*V2CoreAccountIncludingConfigurationStorerCapabilityStatusUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2CoreAccountIncludingConfigurationStorerCapabilityStatusUpdatedEvent), nil
}

// FetchRelatedObject fetches the V2CoreAccount related to the event.
func (en *V2CoreAccountIncludingConfigurationStorerCapabilityStatusUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2CoreAccount, error) {
	relatedObj := &V2CoreAccount{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2CoreAccountIncludingConfigurationStorerUpdatedEvent is the Go struct for the "v2.core.account[configuration.storer].updated" event.
// Occurs when a Storer's configuration is updated.
type V2CoreAccountIncludingConfigurationStorerUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2CoreAccount, error)
}

// FetchRelatedObject fetches the V2CoreAccount related to the event.
func (e *V2CoreAccountIncludingConfigurationStorerUpdatedEvent) FetchRelatedObject(ctx context.Context) (*V2CoreAccount, error) {
	return e.fetchRelatedObject()
}

// V2CoreAccountIncludingConfigurationStorerUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v2.core.account[configuration.storer].updated"
// Occurs when a Storer's configuration is updated.
type V2CoreAccountIncludingConfigurationStorerUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2CoreAccountIncludingConfigurationStorerUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2CoreAccountIncludingConfigurationStorerUpdatedEvent that created this Notification
func (en *V2CoreAccountIncludingConfigurationStorerUpdatedEventNotification) FetchEvent(ctx context.Context) (*V2CoreAccountIncludingConfigurationStorerUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2CoreAccountIncludingConfigurationStorerUpdatedEvent), nil
}

// FetchRelatedObject fetches the V2CoreAccount related to the event.
func (en *V2CoreAccountIncludingConfigurationStorerUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2CoreAccount, error) {
	relatedObj := &V2CoreAccount{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2CoreAccountIncludingDefaultsUpdatedEvent is the Go struct for the "v2.core.account[defaults].updated" event.
// This event occurs when account defaults are created or updated.
type V2CoreAccountIncludingDefaultsUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2CoreAccount, error)
}

// FetchRelatedObject fetches the V2CoreAccount related to the event.
func (e *V2CoreAccountIncludingDefaultsUpdatedEvent) FetchRelatedObject(ctx context.Context) (*V2CoreAccount, error) {
	return e.fetchRelatedObject()
}

// V2CoreAccountIncludingDefaultsUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v2.core.account[defaults].updated"
// This event occurs when account defaults are created or updated.
type V2CoreAccountIncludingDefaultsUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2CoreAccountIncludingDefaultsUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2CoreAccountIncludingDefaultsUpdatedEvent that created this Notification
func (en *V2CoreAccountIncludingDefaultsUpdatedEventNotification) FetchEvent(ctx context.Context) (*V2CoreAccountIncludingDefaultsUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2CoreAccountIncludingDefaultsUpdatedEvent), nil
}

// FetchRelatedObject fetches the V2CoreAccount related to the event.
func (en *V2CoreAccountIncludingDefaultsUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2CoreAccount, error) {
	relatedObj := &V2CoreAccount{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2CoreAccountIncludingIdentityUpdatedEvent is the Go struct for the "v2.core.account[identity].updated" event.
// Occurs when an Identity is updated.
type V2CoreAccountIncludingIdentityUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2CoreAccount, error)
}

// FetchRelatedObject fetches the V2CoreAccount related to the event.
func (e *V2CoreAccountIncludingIdentityUpdatedEvent) FetchRelatedObject(ctx context.Context) (*V2CoreAccount, error) {
	return e.fetchRelatedObject()
}

// V2CoreAccountIncludingIdentityUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v2.core.account[identity].updated"
// Occurs when an Identity is updated.
type V2CoreAccountIncludingIdentityUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2CoreAccountIncludingIdentityUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2CoreAccountIncludingIdentityUpdatedEvent that created this Notification
func (en *V2CoreAccountIncludingIdentityUpdatedEventNotification) FetchEvent(ctx context.Context) (*V2CoreAccountIncludingIdentityUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2CoreAccountIncludingIdentityUpdatedEvent), nil
}

// FetchRelatedObject fetches the V2CoreAccount related to the event.
func (en *V2CoreAccountIncludingIdentityUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2CoreAccount, error) {
	relatedObj := &V2CoreAccount{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2CoreAccountIncludingRequirementsUpdatedEvent is the Go struct for the "v2.core.account[requirements].updated" event.
// Occurs when an Account's requirements are updated.
type V2CoreAccountIncludingRequirementsUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2CoreAccount, error)
}

// FetchRelatedObject fetches the V2CoreAccount related to the event.
func (e *V2CoreAccountIncludingRequirementsUpdatedEvent) FetchRelatedObject(ctx context.Context) (*V2CoreAccount, error) {
	return e.fetchRelatedObject()
}

// V2CoreAccountIncludingRequirementsUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v2.core.account[requirements].updated"
// Occurs when an Account's requirements are updated.
type V2CoreAccountIncludingRequirementsUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2CoreAccountIncludingRequirementsUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2CoreAccountIncludingRequirementsUpdatedEvent that created this Notification
func (en *V2CoreAccountIncludingRequirementsUpdatedEventNotification) FetchEvent(ctx context.Context) (*V2CoreAccountIncludingRequirementsUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2CoreAccountIncludingRequirementsUpdatedEvent), nil
}

// FetchRelatedObject fetches the V2CoreAccount related to the event.
func (en *V2CoreAccountIncludingRequirementsUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2CoreAccount, error) {
	relatedObj := &V2CoreAccount{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2CoreAccountLinkReturnedEvent is the Go struct for the "v2.core.account_link.returned" event.
// Occurs when the generated AccountLink is completed.
type V2CoreAccountLinkReturnedEvent struct {
	V2BaseEvent
	Data V2CoreAccountLinkReturnedEventData `json:"data"`
}

// V2CoreAccountLinkReturnedEventNotification is the webhook payload you'll get when handling an event with type "v2.core.account_link.returned"
// Occurs when the generated AccountLink is completed.
type V2CoreAccountLinkReturnedEventNotification struct{ V2EventNotification }

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2CoreAccountLinkReturnedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2CoreAccountLinkReturnedEvent that created this Notification
func (en *V2CoreAccountLinkReturnedEventNotification) FetchEvent(ctx context.Context) (*V2CoreAccountLinkReturnedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2CoreAccountLinkReturnedEvent), nil
}

// V2CoreAccountPersonCreatedEvent is the Go struct for the "v2.core.account_person.created" event.
// Occurs when a Person is created.
type V2CoreAccountPersonCreatedEvent struct {
	V2BaseEvent
	Data               V2CoreAccountPersonCreatedEventData `json:"data"`
	RelatedObject      RelatedObject                       `json:"related_object"`
	fetchRelatedObject func() (*V2CoreAccountPerson, error)
}

// FetchRelatedObject fetches the V2CoreAccountPerson related to the event.
func (e *V2CoreAccountPersonCreatedEvent) FetchRelatedObject(ctx context.Context) (*V2CoreAccountPerson, error) {
	return e.fetchRelatedObject()
}

// V2CoreAccountPersonCreatedEventNotification is the webhook payload you'll get when handling an event with type "v2.core.account_person.created"
// Occurs when a Person is created.
type V2CoreAccountPersonCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2CoreAccountPersonCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2CoreAccountPersonCreatedEvent that created this Notification
func (en *V2CoreAccountPersonCreatedEventNotification) FetchEvent(ctx context.Context) (*V2CoreAccountPersonCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2CoreAccountPersonCreatedEvent), nil
}

// FetchRelatedObject fetches the V2CoreAccountPerson related to the event.
func (en *V2CoreAccountPersonCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2CoreAccountPerson, error) {
	relatedObj := &V2CoreAccountPerson{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2CoreAccountPersonDeletedEvent is the Go struct for the "v2.core.account_person.deleted" event.
// Occurs when a Person is deleted.
type V2CoreAccountPersonDeletedEvent struct {
	V2BaseEvent
	Data               V2CoreAccountPersonDeletedEventData `json:"data"`
	RelatedObject      RelatedObject                       `json:"related_object"`
	fetchRelatedObject func() (*V2CoreAccountPerson, error)
}

// FetchRelatedObject fetches the V2CoreAccountPerson related to the event.
func (e *V2CoreAccountPersonDeletedEvent) FetchRelatedObject(ctx context.Context) (*V2CoreAccountPerson, error) {
	return e.fetchRelatedObject()
}

// V2CoreAccountPersonDeletedEventNotification is the webhook payload you'll get when handling an event with type "v2.core.account_person.deleted"
// Occurs when a Person is deleted.
type V2CoreAccountPersonDeletedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2CoreAccountPersonDeletedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2CoreAccountPersonDeletedEvent that created this Notification
func (en *V2CoreAccountPersonDeletedEventNotification) FetchEvent(ctx context.Context) (*V2CoreAccountPersonDeletedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2CoreAccountPersonDeletedEvent), nil
}

// FetchRelatedObject fetches the V2CoreAccountPerson related to the event.
func (en *V2CoreAccountPersonDeletedEventNotification) FetchRelatedObject(ctx context.Context) (*V2CoreAccountPerson, error) {
	relatedObj := &V2CoreAccountPerson{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2CoreAccountPersonUpdatedEvent is the Go struct for the "v2.core.account_person.updated" event.
// Occurs when a Person is updated.
type V2CoreAccountPersonUpdatedEvent struct {
	V2BaseEvent
	Data               V2CoreAccountPersonUpdatedEventData `json:"data"`
	RelatedObject      RelatedObject                       `json:"related_object"`
	fetchRelatedObject func() (*V2CoreAccountPerson, error)
}

// FetchRelatedObject fetches the V2CoreAccountPerson related to the event.
func (e *V2CoreAccountPersonUpdatedEvent) FetchRelatedObject(ctx context.Context) (*V2CoreAccountPerson, error) {
	return e.fetchRelatedObject()
}

// V2CoreAccountPersonUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v2.core.account_person.updated"
// Occurs when a Person is updated.
type V2CoreAccountPersonUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2CoreAccountPersonUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2CoreAccountPersonUpdatedEvent that created this Notification
func (en *V2CoreAccountPersonUpdatedEventNotification) FetchEvent(ctx context.Context) (*V2CoreAccountPersonUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2CoreAccountPersonUpdatedEvent), nil
}

// FetchRelatedObject fetches the V2CoreAccountPerson related to the event.
func (en *V2CoreAccountPersonUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2CoreAccountPerson, error) {
	relatedObj := &V2CoreAccountPerson{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2CoreClaimableSandboxClaimedEvent is the Go struct for the "v2.core.claimable_sandbox.claimed" event.
// Occurs when a claimable sandbox is claimed.
type V2CoreClaimableSandboxClaimedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2CoreClaimableSandbox, error)
}

// FetchRelatedObject fetches the V2CoreClaimableSandbox related to the event.
func (e *V2CoreClaimableSandboxClaimedEvent) FetchRelatedObject(ctx context.Context) (*V2CoreClaimableSandbox, error) {
	return e.fetchRelatedObject()
}

// V2CoreClaimableSandboxClaimedEventNotification is the webhook payload you'll get when handling an event with type "v2.core.claimable_sandbox.claimed"
// Occurs when a claimable sandbox is claimed.
type V2CoreClaimableSandboxClaimedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2CoreClaimableSandboxClaimedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2CoreClaimableSandboxClaimedEvent that created this Notification
func (en *V2CoreClaimableSandboxClaimedEventNotification) FetchEvent(ctx context.Context) (*V2CoreClaimableSandboxClaimedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2CoreClaimableSandboxClaimedEvent), nil
}

// FetchRelatedObject fetches the V2CoreClaimableSandbox related to the event.
func (en *V2CoreClaimableSandboxClaimedEventNotification) FetchRelatedObject(ctx context.Context) (*V2CoreClaimableSandbox, error) {
	relatedObj := &V2CoreClaimableSandbox{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2CoreClaimableSandboxCreatedEvent is the Go struct for the "v2.core.claimable_sandbox.created" event.
// Occurs when a claimable sandbox is created.
type V2CoreClaimableSandboxCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2CoreClaimableSandbox, error)
}

// FetchRelatedObject fetches the V2CoreClaimableSandbox related to the event.
func (e *V2CoreClaimableSandboxCreatedEvent) FetchRelatedObject(ctx context.Context) (*V2CoreClaimableSandbox, error) {
	return e.fetchRelatedObject()
}

// V2CoreClaimableSandboxCreatedEventNotification is the webhook payload you'll get when handling an event with type "v2.core.claimable_sandbox.created"
// Occurs when a claimable sandbox is created.
type V2CoreClaimableSandboxCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2CoreClaimableSandboxCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2CoreClaimableSandboxCreatedEvent that created this Notification
func (en *V2CoreClaimableSandboxCreatedEventNotification) FetchEvent(ctx context.Context) (*V2CoreClaimableSandboxCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2CoreClaimableSandboxCreatedEvent), nil
}

// FetchRelatedObject fetches the V2CoreClaimableSandbox related to the event.
func (en *V2CoreClaimableSandboxCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2CoreClaimableSandbox, error) {
	relatedObj := &V2CoreClaimableSandbox{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2CoreClaimableSandboxExpiredEvent is the Go struct for the "v2.core.claimable_sandbox.expired" event.
// Occurs when a claimable sandbox expires.
type V2CoreClaimableSandboxExpiredEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2CoreClaimableSandbox, error)
}

// FetchRelatedObject fetches the V2CoreClaimableSandbox related to the event.
func (e *V2CoreClaimableSandboxExpiredEvent) FetchRelatedObject(ctx context.Context) (*V2CoreClaimableSandbox, error) {
	return e.fetchRelatedObject()
}

// V2CoreClaimableSandboxExpiredEventNotification is the webhook payload you'll get when handling an event with type "v2.core.claimable_sandbox.expired"
// Occurs when a claimable sandbox expires.
type V2CoreClaimableSandboxExpiredEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2CoreClaimableSandboxExpiredEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2CoreClaimableSandboxExpiredEvent that created this Notification
func (en *V2CoreClaimableSandboxExpiredEventNotification) FetchEvent(ctx context.Context) (*V2CoreClaimableSandboxExpiredEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2CoreClaimableSandboxExpiredEvent), nil
}

// FetchRelatedObject fetches the V2CoreClaimableSandbox related to the event.
func (en *V2CoreClaimableSandboxExpiredEventNotification) FetchRelatedObject(ctx context.Context) (*V2CoreClaimableSandbox, error) {
	relatedObj := &V2CoreClaimableSandbox{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2CoreClaimableSandboxExpiringEvent is the Go struct for the "v2.core.claimable_sandbox.expiring" event.
// Occurs when a claimable sandbox is expiring in 7 days.
type V2CoreClaimableSandboxExpiringEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2CoreClaimableSandbox, error)
}

// FetchRelatedObject fetches the V2CoreClaimableSandbox related to the event.
func (e *V2CoreClaimableSandboxExpiringEvent) FetchRelatedObject(ctx context.Context) (*V2CoreClaimableSandbox, error) {
	return e.fetchRelatedObject()
}

// V2CoreClaimableSandboxExpiringEventNotification is the webhook payload you'll get when handling an event with type "v2.core.claimable_sandbox.expiring"
// Occurs when a claimable sandbox is expiring in 7 days.
type V2CoreClaimableSandboxExpiringEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2CoreClaimableSandboxExpiringEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2CoreClaimableSandboxExpiringEvent that created this Notification
func (en *V2CoreClaimableSandboxExpiringEventNotification) FetchEvent(ctx context.Context) (*V2CoreClaimableSandboxExpiringEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2CoreClaimableSandboxExpiringEvent), nil
}

// FetchRelatedObject fetches the V2CoreClaimableSandbox related to the event.
func (en *V2CoreClaimableSandboxExpiringEventNotification) FetchRelatedObject(ctx context.Context) (*V2CoreClaimableSandbox, error) {
	relatedObj := &V2CoreClaimableSandbox{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2CoreClaimableSandboxSandboxDetailsOwnerAccountUpdatedEvent is the Go struct for the "v2.core.claimable_sandbox.sandbox_details_owner_account_updated" event.
// Occurs when a claimable sandbox is activated by the user with the intention to go live and your Stripe app is installed on the live account.
type V2CoreClaimableSandboxSandboxDetailsOwnerAccountUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2CoreClaimableSandbox, error)
}

// FetchRelatedObject fetches the V2CoreClaimableSandbox related to the event.
func (e *V2CoreClaimableSandboxSandboxDetailsOwnerAccountUpdatedEvent) FetchRelatedObject(ctx context.Context) (*V2CoreClaimableSandbox, error) {
	return e.fetchRelatedObject()
}

// V2CoreClaimableSandboxSandboxDetailsOwnerAccountUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v2.core.claimable_sandbox.sandbox_details_owner_account_updated"
// Occurs when a claimable sandbox is activated by the user with the intention to go live and your Stripe app is installed on the live account.
type V2CoreClaimableSandboxSandboxDetailsOwnerAccountUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2CoreClaimableSandboxSandboxDetailsOwnerAccountUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2CoreClaimableSandboxSandboxDetailsOwnerAccountUpdatedEvent that created this Notification
func (en *V2CoreClaimableSandboxSandboxDetailsOwnerAccountUpdatedEventNotification) FetchEvent(ctx context.Context) (*V2CoreClaimableSandboxSandboxDetailsOwnerAccountUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2CoreClaimableSandboxSandboxDetailsOwnerAccountUpdatedEvent), nil
}

// FetchRelatedObject fetches the V2CoreClaimableSandbox related to the event.
func (en *V2CoreClaimableSandboxSandboxDetailsOwnerAccountUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2CoreClaimableSandbox, error) {
	relatedObj := &V2CoreClaimableSandbox{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2CoreEventDestinationPingEvent is the Go struct for the "v2.core.event_destination.ping" event.
// A ping event used to test the connection to an EventDestination.
type V2CoreEventDestinationPingEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2EventDestination, error)
}

// FetchRelatedObject fetches the V2EventDestination related to the event.
func (e *V2CoreEventDestinationPingEvent) FetchRelatedObject(ctx context.Context) (*V2EventDestination, error) {
	return e.fetchRelatedObject()
}

// V2CoreEventDestinationPingEventNotification is the webhook payload you'll get when handling an event with type "v2.core.event_destination.ping"
// A ping event used to test the connection to an EventDestination.
type V2CoreEventDestinationPingEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2CoreEventDestinationPingEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2CoreEventDestinationPingEvent that created this Notification
func (en *V2CoreEventDestinationPingEventNotification) FetchEvent(ctx context.Context) (*V2CoreEventDestinationPingEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2CoreEventDestinationPingEvent), nil
}

// FetchRelatedObject fetches the V2EventDestination related to the event.
func (en *V2CoreEventDestinationPingEventNotification) FetchRelatedObject(ctx context.Context) (*V2EventDestination, error) {
	relatedObj := &V2EventDestination{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2CoreHealthAPIErrorFiringEvent is the Go struct for the "v2.core.health.api_error.firing" event.
// Occurs when an API error alert is firing.
type V2CoreHealthAPIErrorFiringEvent struct {
	V2BaseEvent
	Data V2CoreHealthAPIErrorFiringEventData `json:"data"`
}

// V2CoreHealthAPIErrorFiringEventNotification is the webhook payload you'll get when handling an event with type "v2.core.health.api_error.firing"
// Occurs when an API error alert is firing.
type V2CoreHealthAPIErrorFiringEventNotification struct{ V2EventNotification }

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2CoreHealthAPIErrorFiringEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2CoreHealthAPIErrorFiringEvent that created this Notification
func (en *V2CoreHealthAPIErrorFiringEventNotification) FetchEvent(ctx context.Context) (*V2CoreHealthAPIErrorFiringEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2CoreHealthAPIErrorFiringEvent), nil
}

// V2CoreHealthAPIErrorResolvedEvent is the Go struct for the "v2.core.health.api_error.resolved" event.
// Occurs when an API error alert is resolved.
type V2CoreHealthAPIErrorResolvedEvent struct {
	V2BaseEvent
	Data V2CoreHealthAPIErrorResolvedEventData `json:"data"`
}

// V2CoreHealthAPIErrorResolvedEventNotification is the webhook payload you'll get when handling an event with type "v2.core.health.api_error.resolved"
// Occurs when an API error alert is resolved.
type V2CoreHealthAPIErrorResolvedEventNotification struct{ V2EventNotification }

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2CoreHealthAPIErrorResolvedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2CoreHealthAPIErrorResolvedEvent that created this Notification
func (en *V2CoreHealthAPIErrorResolvedEventNotification) FetchEvent(ctx context.Context) (*V2CoreHealthAPIErrorResolvedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2CoreHealthAPIErrorResolvedEvent), nil
}

// V2CoreHealthAPILatencyFiringEvent is the Go struct for the "v2.core.health.api_latency.firing" event.
// Occurs when an API latency alert is firing.
type V2CoreHealthAPILatencyFiringEvent struct {
	V2BaseEvent
	Data V2CoreHealthAPILatencyFiringEventData `json:"data"`
}

// V2CoreHealthAPILatencyFiringEventNotification is the webhook payload you'll get when handling an event with type "v2.core.health.api_latency.firing"
// Occurs when an API latency alert is firing.
type V2CoreHealthAPILatencyFiringEventNotification struct{ V2EventNotification }

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2CoreHealthAPILatencyFiringEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2CoreHealthAPILatencyFiringEvent that created this Notification
func (en *V2CoreHealthAPILatencyFiringEventNotification) FetchEvent(ctx context.Context) (*V2CoreHealthAPILatencyFiringEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2CoreHealthAPILatencyFiringEvent), nil
}

// V2CoreHealthAPILatencyResolvedEvent is the Go struct for the "v2.core.health.api_latency.resolved" event.
// Occurs when an API latency alert is resolved.
type V2CoreHealthAPILatencyResolvedEvent struct {
	V2BaseEvent
	Data V2CoreHealthAPILatencyResolvedEventData `json:"data"`
}

// V2CoreHealthAPILatencyResolvedEventNotification is the webhook payload you'll get when handling an event with type "v2.core.health.api_latency.resolved"
// Occurs when an API latency alert is resolved.
type V2CoreHealthAPILatencyResolvedEventNotification struct {
	V2EventNotification
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2CoreHealthAPILatencyResolvedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2CoreHealthAPILatencyResolvedEvent that created this Notification
func (en *V2CoreHealthAPILatencyResolvedEventNotification) FetchEvent(ctx context.Context) (*V2CoreHealthAPILatencyResolvedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2CoreHealthAPILatencyResolvedEvent), nil
}

// V2CoreHealthAuthorizationRateDropFiringEvent is the Go struct for the "v2.core.health.authorization_rate_drop.firing" event.
// Occurs when an authorization rate drop alert is firing.
type V2CoreHealthAuthorizationRateDropFiringEvent struct {
	V2BaseEvent
	Data V2CoreHealthAuthorizationRateDropFiringEventData `json:"data"`
}

// V2CoreHealthAuthorizationRateDropFiringEventNotification is the webhook payload you'll get when handling an event with type "v2.core.health.authorization_rate_drop.firing"
// Occurs when an authorization rate drop alert is firing.
type V2CoreHealthAuthorizationRateDropFiringEventNotification struct {
	V2EventNotification
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2CoreHealthAuthorizationRateDropFiringEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2CoreHealthAuthorizationRateDropFiringEvent that created this Notification
func (en *V2CoreHealthAuthorizationRateDropFiringEventNotification) FetchEvent(ctx context.Context) (*V2CoreHealthAuthorizationRateDropFiringEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2CoreHealthAuthorizationRateDropFiringEvent), nil
}

// V2CoreHealthAuthorizationRateDropResolvedEvent is the Go struct for the "v2.core.health.authorization_rate_drop.resolved" event.
// Occurs when an authorization rate drop alert is resolved.
type V2CoreHealthAuthorizationRateDropResolvedEvent struct {
	V2BaseEvent
	Data V2CoreHealthAuthorizationRateDropResolvedEventData `json:"data"`
}

// V2CoreHealthAuthorizationRateDropResolvedEventNotification is the webhook payload you'll get when handling an event with type "v2.core.health.authorization_rate_drop.resolved"
// Occurs when an authorization rate drop alert is resolved.
type V2CoreHealthAuthorizationRateDropResolvedEventNotification struct {
	V2EventNotification
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2CoreHealthAuthorizationRateDropResolvedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2CoreHealthAuthorizationRateDropResolvedEvent that created this Notification
func (en *V2CoreHealthAuthorizationRateDropResolvedEventNotification) FetchEvent(ctx context.Context) (*V2CoreHealthAuthorizationRateDropResolvedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2CoreHealthAuthorizationRateDropResolvedEvent), nil
}

// V2CoreHealthEventGenerationFailureResolvedEvent is the Go struct for the "v2.core.health.event_generation_failure.resolved" event.
// Occurs when an event generation failure alert is resolved.
type V2CoreHealthEventGenerationFailureResolvedEvent struct {
	V2BaseEvent
	Data V2CoreHealthEventGenerationFailureResolvedEventData `json:"data"`
}

// V2CoreHealthEventGenerationFailureResolvedEventNotification is the webhook payload you'll get when handling an event with type "v2.core.health.event_generation_failure.resolved"
// Occurs when an event generation failure alert is resolved.
type V2CoreHealthEventGenerationFailureResolvedEventNotification struct {
	V2EventNotification
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2CoreHealthEventGenerationFailureResolvedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2CoreHealthEventGenerationFailureResolvedEvent that created this Notification
func (en *V2CoreHealthEventGenerationFailureResolvedEventNotification) FetchEvent(ctx context.Context) (*V2CoreHealthEventGenerationFailureResolvedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2CoreHealthEventGenerationFailureResolvedEvent), nil
}

// V2CoreHealthFraudRateIncreasedEvent is the Go struct for the "v2.core.health.fraud_rate.increased" event.
// Occurs when the fraud rate has increased.
type V2CoreHealthFraudRateIncreasedEvent struct {
	V2BaseEvent
	Data V2CoreHealthFraudRateIncreasedEventData `json:"data"`
}

// V2CoreHealthFraudRateIncreasedEventNotification is the webhook payload you'll get when handling an event with type "v2.core.health.fraud_rate.increased"
// Occurs when the fraud rate has increased.
type V2CoreHealthFraudRateIncreasedEventNotification struct {
	V2EventNotification
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2CoreHealthFraudRateIncreasedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2CoreHealthFraudRateIncreasedEvent that created this Notification
func (en *V2CoreHealthFraudRateIncreasedEventNotification) FetchEvent(ctx context.Context) (*V2CoreHealthFraudRateIncreasedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2CoreHealthFraudRateIncreasedEvent), nil
}

// V2CoreHealthIssuingAuthorizationRequestErrorsFiringEvent is the Go struct for the "v2.core.health.issuing_authorization_request_errors.firing" event.
// Occurs when an issuing authorization request errors alert is firing.
type V2CoreHealthIssuingAuthorizationRequestErrorsFiringEvent struct {
	V2BaseEvent
	Data V2CoreHealthIssuingAuthorizationRequestErrorsFiringEventData `json:"data"`
}

// V2CoreHealthIssuingAuthorizationRequestErrorsFiringEventNotification is the webhook payload you'll get when handling an event with type "v2.core.health.issuing_authorization_request_errors.firing"
// Occurs when an issuing authorization request errors alert is firing.
type V2CoreHealthIssuingAuthorizationRequestErrorsFiringEventNotification struct {
	V2EventNotification
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2CoreHealthIssuingAuthorizationRequestErrorsFiringEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2CoreHealthIssuingAuthorizationRequestErrorsFiringEvent that created this Notification
func (en *V2CoreHealthIssuingAuthorizationRequestErrorsFiringEventNotification) FetchEvent(ctx context.Context) (*V2CoreHealthIssuingAuthorizationRequestErrorsFiringEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2CoreHealthIssuingAuthorizationRequestErrorsFiringEvent), nil
}

// V2CoreHealthIssuingAuthorizationRequestErrorsResolvedEvent is the Go struct for the "v2.core.health.issuing_authorization_request_errors.resolved" event.
// Occurs when an issuing authorization request errors alert is resolved.
type V2CoreHealthIssuingAuthorizationRequestErrorsResolvedEvent struct {
	V2BaseEvent
	Data V2CoreHealthIssuingAuthorizationRequestErrorsResolvedEventData `json:"data"`
}

// V2CoreHealthIssuingAuthorizationRequestErrorsResolvedEventNotification is the webhook payload you'll get when handling an event with type "v2.core.health.issuing_authorization_request_errors.resolved"
// Occurs when an issuing authorization request errors alert is resolved.
type V2CoreHealthIssuingAuthorizationRequestErrorsResolvedEventNotification struct {
	V2EventNotification
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2CoreHealthIssuingAuthorizationRequestErrorsResolvedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2CoreHealthIssuingAuthorizationRequestErrorsResolvedEvent that created this Notification
func (en *V2CoreHealthIssuingAuthorizationRequestErrorsResolvedEventNotification) FetchEvent(ctx context.Context) (*V2CoreHealthIssuingAuthorizationRequestErrorsResolvedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2CoreHealthIssuingAuthorizationRequestErrorsResolvedEvent), nil
}

// V2CoreHealthIssuingAuthorizationRequestTimeoutFiringEvent is the Go struct for the "v2.core.health.issuing_authorization_request_timeout.firing" event.
// Occurs when an issuing authorization request timeout alert is firing.
type V2CoreHealthIssuingAuthorizationRequestTimeoutFiringEvent struct {
	V2BaseEvent
	Data V2CoreHealthIssuingAuthorizationRequestTimeoutFiringEventData `json:"data"`
}

// V2CoreHealthIssuingAuthorizationRequestTimeoutFiringEventNotification is the webhook payload you'll get when handling an event with type "v2.core.health.issuing_authorization_request_timeout.firing"
// Occurs when an issuing authorization request timeout alert is firing.
type V2CoreHealthIssuingAuthorizationRequestTimeoutFiringEventNotification struct {
	V2EventNotification
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2CoreHealthIssuingAuthorizationRequestTimeoutFiringEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2CoreHealthIssuingAuthorizationRequestTimeoutFiringEvent that created this Notification
func (en *V2CoreHealthIssuingAuthorizationRequestTimeoutFiringEventNotification) FetchEvent(ctx context.Context) (*V2CoreHealthIssuingAuthorizationRequestTimeoutFiringEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2CoreHealthIssuingAuthorizationRequestTimeoutFiringEvent), nil
}

// V2CoreHealthIssuingAuthorizationRequestTimeoutResolvedEvent is the Go struct for the "v2.core.health.issuing_authorization_request_timeout.resolved" event.
// Occurs when an issuing authorization request timeout alert is resolved.
type V2CoreHealthIssuingAuthorizationRequestTimeoutResolvedEvent struct {
	V2BaseEvent
	Data V2CoreHealthIssuingAuthorizationRequestTimeoutResolvedEventData `json:"data"`
}

// V2CoreHealthIssuingAuthorizationRequestTimeoutResolvedEventNotification is the webhook payload you'll get when handling an event with type "v2.core.health.issuing_authorization_request_timeout.resolved"
// Occurs when an issuing authorization request timeout alert is resolved.
type V2CoreHealthIssuingAuthorizationRequestTimeoutResolvedEventNotification struct {
	V2EventNotification
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2CoreHealthIssuingAuthorizationRequestTimeoutResolvedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2CoreHealthIssuingAuthorizationRequestTimeoutResolvedEvent that created this Notification
func (en *V2CoreHealthIssuingAuthorizationRequestTimeoutResolvedEventNotification) FetchEvent(ctx context.Context) (*V2CoreHealthIssuingAuthorizationRequestTimeoutResolvedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2CoreHealthIssuingAuthorizationRequestTimeoutResolvedEvent), nil
}

// V2CoreHealthPaymentMethodErrorFiringEvent is the Go struct for the "v2.core.health.payment_method_error.firing" event.
// Occurs when a payment method error alert is firing.
type V2CoreHealthPaymentMethodErrorFiringEvent struct {
	V2BaseEvent
	Data V2CoreHealthPaymentMethodErrorFiringEventData `json:"data"`
}

// V2CoreHealthPaymentMethodErrorFiringEventNotification is the webhook payload you'll get when handling an event with type "v2.core.health.payment_method_error.firing"
// Occurs when a payment method error alert is firing.
type V2CoreHealthPaymentMethodErrorFiringEventNotification struct {
	V2EventNotification
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2CoreHealthPaymentMethodErrorFiringEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2CoreHealthPaymentMethodErrorFiringEvent that created this Notification
func (en *V2CoreHealthPaymentMethodErrorFiringEventNotification) FetchEvent(ctx context.Context) (*V2CoreHealthPaymentMethodErrorFiringEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2CoreHealthPaymentMethodErrorFiringEvent), nil
}

// V2CoreHealthPaymentMethodErrorResolvedEvent is the Go struct for the "v2.core.health.payment_method_error.resolved" event.
// Occurs when a payment method error alert is resolved.
type V2CoreHealthPaymentMethodErrorResolvedEvent struct {
	V2BaseEvent
	Data V2CoreHealthPaymentMethodErrorResolvedEventData `json:"data"`
}

// V2CoreHealthPaymentMethodErrorResolvedEventNotification is the webhook payload you'll get when handling an event with type "v2.core.health.payment_method_error.resolved"
// Occurs when a payment method error alert is resolved.
type V2CoreHealthPaymentMethodErrorResolvedEventNotification struct {
	V2EventNotification
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2CoreHealthPaymentMethodErrorResolvedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2CoreHealthPaymentMethodErrorResolvedEvent that created this Notification
func (en *V2CoreHealthPaymentMethodErrorResolvedEventNotification) FetchEvent(ctx context.Context) (*V2CoreHealthPaymentMethodErrorResolvedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2CoreHealthPaymentMethodErrorResolvedEvent), nil
}

// V2CoreHealthTrafficVolumeDropFiringEvent is the Go struct for the "v2.core.health.traffic_volume_drop.firing" event.
// Occurs when a traffic volume drop alert is firing.
type V2CoreHealthTrafficVolumeDropFiringEvent struct {
	V2BaseEvent
	Data V2CoreHealthTrafficVolumeDropFiringEventData `json:"data"`
}

// V2CoreHealthTrafficVolumeDropFiringEventNotification is the webhook payload you'll get when handling an event with type "v2.core.health.traffic_volume_drop.firing"
// Occurs when a traffic volume drop alert is firing.
type V2CoreHealthTrafficVolumeDropFiringEventNotification struct {
	V2EventNotification
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2CoreHealthTrafficVolumeDropFiringEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2CoreHealthTrafficVolumeDropFiringEvent that created this Notification
func (en *V2CoreHealthTrafficVolumeDropFiringEventNotification) FetchEvent(ctx context.Context) (*V2CoreHealthTrafficVolumeDropFiringEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2CoreHealthTrafficVolumeDropFiringEvent), nil
}

// V2CoreHealthTrafficVolumeDropResolvedEvent is the Go struct for the "v2.core.health.traffic_volume_drop.resolved" event.
// Occurs when a traffic volume drop alert is resolved.
type V2CoreHealthTrafficVolumeDropResolvedEvent struct {
	V2BaseEvent
	Data V2CoreHealthTrafficVolumeDropResolvedEventData `json:"data"`
}

// V2CoreHealthTrafficVolumeDropResolvedEventNotification is the webhook payload you'll get when handling an event with type "v2.core.health.traffic_volume_drop.resolved"
// Occurs when a traffic volume drop alert is resolved.
type V2CoreHealthTrafficVolumeDropResolvedEventNotification struct {
	V2EventNotification
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2CoreHealthTrafficVolumeDropResolvedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2CoreHealthTrafficVolumeDropResolvedEvent that created this Notification
func (en *V2CoreHealthTrafficVolumeDropResolvedEventNotification) FetchEvent(ctx context.Context) (*V2CoreHealthTrafficVolumeDropResolvedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2CoreHealthTrafficVolumeDropResolvedEvent), nil
}

// V2CoreHealthWebhookLatencyFiringEvent is the Go struct for the "v2.core.health.webhook_latency.firing" event.
// Occurs when a webhook latency alert is firing.
type V2CoreHealthWebhookLatencyFiringEvent struct {
	V2BaseEvent
	Data V2CoreHealthWebhookLatencyFiringEventData `json:"data"`
}

// V2CoreHealthWebhookLatencyFiringEventNotification is the webhook payload you'll get when handling an event with type "v2.core.health.webhook_latency.firing"
// Occurs when a webhook latency alert is firing.
type V2CoreHealthWebhookLatencyFiringEventNotification struct {
	V2EventNotification
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2CoreHealthWebhookLatencyFiringEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2CoreHealthWebhookLatencyFiringEvent that created this Notification
func (en *V2CoreHealthWebhookLatencyFiringEventNotification) FetchEvent(ctx context.Context) (*V2CoreHealthWebhookLatencyFiringEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2CoreHealthWebhookLatencyFiringEvent), nil
}

// V2CoreHealthWebhookLatencyResolvedEvent is the Go struct for the "v2.core.health.webhook_latency.resolved" event.
// Occurs when a webhook latency alert is resolved.
type V2CoreHealthWebhookLatencyResolvedEvent struct {
	V2BaseEvent
	Data V2CoreHealthWebhookLatencyResolvedEventData `json:"data"`
}

// V2CoreHealthWebhookLatencyResolvedEventNotification is the webhook payload you'll get when handling an event with type "v2.core.health.webhook_latency.resolved"
// Occurs when a webhook latency alert is resolved.
type V2CoreHealthWebhookLatencyResolvedEventNotification struct {
	V2EventNotification
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2CoreHealthWebhookLatencyResolvedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2CoreHealthWebhookLatencyResolvedEvent that created this Notification
func (en *V2CoreHealthWebhookLatencyResolvedEventNotification) FetchEvent(ctx context.Context) (*V2CoreHealthWebhookLatencyResolvedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2CoreHealthWebhookLatencyResolvedEvent), nil
}

// V2MoneyManagementAdjustmentCreatedEvent is the Go struct for the "v2.money_management.adjustment.created" event.
// Occurs when an Adjustment is created.
type V2MoneyManagementAdjustmentCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2MoneyManagementAdjustment, error)
}

// FetchRelatedObject fetches the V2MoneyManagementAdjustment related to the event.
func (e *V2MoneyManagementAdjustmentCreatedEvent) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementAdjustment, error) {
	return e.fetchRelatedObject()
}

// V2MoneyManagementAdjustmentCreatedEventNotification is the webhook payload you'll get when handling an event with type "v2.money_management.adjustment.created"
// Occurs when an Adjustment is created.
type V2MoneyManagementAdjustmentCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2MoneyManagementAdjustmentCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2MoneyManagementAdjustmentCreatedEvent that created this Notification
func (en *V2MoneyManagementAdjustmentCreatedEventNotification) FetchEvent(ctx context.Context) (*V2MoneyManagementAdjustmentCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2MoneyManagementAdjustmentCreatedEvent), nil
}

// FetchRelatedObject fetches the V2MoneyManagementAdjustment related to the event.
func (en *V2MoneyManagementAdjustmentCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementAdjustment, error) {
	relatedObj := &V2MoneyManagementAdjustment{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2MoneyManagementFinancialAccountCreatedEvent is the Go struct for the "v2.money_management.financial_account.created" event.
// Occurs when a FinancialAccount is created.
type V2MoneyManagementFinancialAccountCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2MoneyManagementFinancialAccount, error)
}

// FetchRelatedObject fetches the V2MoneyManagementFinancialAccount related to the event.
func (e *V2MoneyManagementFinancialAccountCreatedEvent) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementFinancialAccount, error) {
	return e.fetchRelatedObject()
}

// V2MoneyManagementFinancialAccountCreatedEventNotification is the webhook payload you'll get when handling an event with type "v2.money_management.financial_account.created"
// Occurs when a FinancialAccount is created.
type V2MoneyManagementFinancialAccountCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2MoneyManagementFinancialAccountCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2MoneyManagementFinancialAccountCreatedEvent that created this Notification
func (en *V2MoneyManagementFinancialAccountCreatedEventNotification) FetchEvent(ctx context.Context) (*V2MoneyManagementFinancialAccountCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2MoneyManagementFinancialAccountCreatedEvent), nil
}

// FetchRelatedObject fetches the V2MoneyManagementFinancialAccount related to the event.
func (en *V2MoneyManagementFinancialAccountCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementFinancialAccount, error) {
	relatedObj := &V2MoneyManagementFinancialAccount{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2MoneyManagementFinancialAccountUpdatedEvent is the Go struct for the "v2.money_management.financial_account.updated" event.
// Occurs when a FinancialAccount is updated.
type V2MoneyManagementFinancialAccountUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2MoneyManagementFinancialAccount, error)
}

// FetchRelatedObject fetches the V2MoneyManagementFinancialAccount related to the event.
func (e *V2MoneyManagementFinancialAccountUpdatedEvent) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementFinancialAccount, error) {
	return e.fetchRelatedObject()
}

// V2MoneyManagementFinancialAccountUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v2.money_management.financial_account.updated"
// Occurs when a FinancialAccount is updated.
type V2MoneyManagementFinancialAccountUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2MoneyManagementFinancialAccountUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2MoneyManagementFinancialAccountUpdatedEvent that created this Notification
func (en *V2MoneyManagementFinancialAccountUpdatedEventNotification) FetchEvent(ctx context.Context) (*V2MoneyManagementFinancialAccountUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2MoneyManagementFinancialAccountUpdatedEvent), nil
}

// FetchRelatedObject fetches the V2MoneyManagementFinancialAccount related to the event.
func (en *V2MoneyManagementFinancialAccountUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementFinancialAccount, error) {
	relatedObj := &V2MoneyManagementFinancialAccount{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2MoneyManagementFinancialAddressActivatedEvent is the Go struct for the "v2.money_management.financial_address.activated" event.
// Occurs when a FinancialAddress is activated and is ready to receive funds.
type V2MoneyManagementFinancialAddressActivatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2MoneyManagementFinancialAddress, error)
}

// FetchRelatedObject fetches the V2MoneyManagementFinancialAddress related to the event.
func (e *V2MoneyManagementFinancialAddressActivatedEvent) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementFinancialAddress, error) {
	return e.fetchRelatedObject()
}

// V2MoneyManagementFinancialAddressActivatedEventNotification is the webhook payload you'll get when handling an event with type "v2.money_management.financial_address.activated"
// Occurs when a FinancialAddress is activated and is ready to receive funds.
type V2MoneyManagementFinancialAddressActivatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2MoneyManagementFinancialAddressActivatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2MoneyManagementFinancialAddressActivatedEvent that created this Notification
func (en *V2MoneyManagementFinancialAddressActivatedEventNotification) FetchEvent(ctx context.Context) (*V2MoneyManagementFinancialAddressActivatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2MoneyManagementFinancialAddressActivatedEvent), nil
}

// FetchRelatedObject fetches the V2MoneyManagementFinancialAddress related to the event.
func (en *V2MoneyManagementFinancialAddressActivatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementFinancialAddress, error) {
	relatedObj := &V2MoneyManagementFinancialAddress{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2MoneyManagementFinancialAddressFailedEvent is the Go struct for the "v2.money_management.financial_address.failed" event.
// Occurs when a FinancialAddress fails to activate and can not receive funds.
type V2MoneyManagementFinancialAddressFailedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2MoneyManagementFinancialAddress, error)
}

// FetchRelatedObject fetches the V2MoneyManagementFinancialAddress related to the event.
func (e *V2MoneyManagementFinancialAddressFailedEvent) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementFinancialAddress, error) {
	return e.fetchRelatedObject()
}

// V2MoneyManagementFinancialAddressFailedEventNotification is the webhook payload you'll get when handling an event with type "v2.money_management.financial_address.failed"
// Occurs when a FinancialAddress fails to activate and can not receive funds.
type V2MoneyManagementFinancialAddressFailedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2MoneyManagementFinancialAddressFailedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2MoneyManagementFinancialAddressFailedEvent that created this Notification
func (en *V2MoneyManagementFinancialAddressFailedEventNotification) FetchEvent(ctx context.Context) (*V2MoneyManagementFinancialAddressFailedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2MoneyManagementFinancialAddressFailedEvent), nil
}

// FetchRelatedObject fetches the V2MoneyManagementFinancialAddress related to the event.
func (en *V2MoneyManagementFinancialAddressFailedEventNotification) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementFinancialAddress, error) {
	relatedObj := &V2MoneyManagementFinancialAddress{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2MoneyManagementInboundTransferAvailableEvent is the Go struct for the "v2.money_management.inbound_transfer.available" event.
// Occurs when an InboundTransfer's funds are made available.
type V2MoneyManagementInboundTransferAvailableEvent struct {
	V2BaseEvent
	Data               V2MoneyManagementInboundTransferAvailableEventData `json:"data"`
	RelatedObject      RelatedObject                                      `json:"related_object"`
	fetchRelatedObject func() (*V2MoneyManagementInboundTransfer, error)
}

// FetchRelatedObject fetches the V2MoneyManagementInboundTransfer related to the event.
func (e *V2MoneyManagementInboundTransferAvailableEvent) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementInboundTransfer, error) {
	return e.fetchRelatedObject()
}

// V2MoneyManagementInboundTransferAvailableEventNotification is the webhook payload you'll get when handling an event with type "v2.money_management.inbound_transfer.available"
// Occurs when an InboundTransfer's funds are made available.
type V2MoneyManagementInboundTransferAvailableEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2MoneyManagementInboundTransferAvailableEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2MoneyManagementInboundTransferAvailableEvent that created this Notification
func (en *V2MoneyManagementInboundTransferAvailableEventNotification) FetchEvent(ctx context.Context) (*V2MoneyManagementInboundTransferAvailableEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2MoneyManagementInboundTransferAvailableEvent), nil
}

// FetchRelatedObject fetches the V2MoneyManagementInboundTransfer related to the event.
func (en *V2MoneyManagementInboundTransferAvailableEventNotification) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementInboundTransfer, error) {
	relatedObj := &V2MoneyManagementInboundTransfer{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2MoneyManagementInboundTransferBankDebitFailedEvent is the Go struct for the "v2.money_management.inbound_transfer.bank_debit_failed" event.
// Occurs when an InboundTransfer fails.
type V2MoneyManagementInboundTransferBankDebitFailedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2MoneyManagementInboundTransfer, error)
}

// FetchRelatedObject fetches the V2MoneyManagementInboundTransfer related to the event.
func (e *V2MoneyManagementInboundTransferBankDebitFailedEvent) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementInboundTransfer, error) {
	return e.fetchRelatedObject()
}

// V2MoneyManagementInboundTransferBankDebitFailedEventNotification is the webhook payload you'll get when handling an event with type "v2.money_management.inbound_transfer.bank_debit_failed"
// Occurs when an InboundTransfer fails.
type V2MoneyManagementInboundTransferBankDebitFailedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2MoneyManagementInboundTransferBankDebitFailedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2MoneyManagementInboundTransferBankDebitFailedEvent that created this Notification
func (en *V2MoneyManagementInboundTransferBankDebitFailedEventNotification) FetchEvent(ctx context.Context) (*V2MoneyManagementInboundTransferBankDebitFailedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2MoneyManagementInboundTransferBankDebitFailedEvent), nil
}

// FetchRelatedObject fetches the V2MoneyManagementInboundTransfer related to the event.
func (en *V2MoneyManagementInboundTransferBankDebitFailedEventNotification) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementInboundTransfer, error) {
	relatedObj := &V2MoneyManagementInboundTransfer{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2MoneyManagementInboundTransferBankDebitProcessingEvent is the Go struct for the "v2.money_management.inbound_transfer.bank_debit_processing" event.
// Occurs when an InboundTransfer starts processing.
type V2MoneyManagementInboundTransferBankDebitProcessingEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2MoneyManagementInboundTransfer, error)
}

// FetchRelatedObject fetches the V2MoneyManagementInboundTransfer related to the event.
func (e *V2MoneyManagementInboundTransferBankDebitProcessingEvent) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementInboundTransfer, error) {
	return e.fetchRelatedObject()
}

// V2MoneyManagementInboundTransferBankDebitProcessingEventNotification is the webhook payload you'll get when handling an event with type "v2.money_management.inbound_transfer.bank_debit_processing"
// Occurs when an InboundTransfer starts processing.
type V2MoneyManagementInboundTransferBankDebitProcessingEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2MoneyManagementInboundTransferBankDebitProcessingEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2MoneyManagementInboundTransferBankDebitProcessingEvent that created this Notification
func (en *V2MoneyManagementInboundTransferBankDebitProcessingEventNotification) FetchEvent(ctx context.Context) (*V2MoneyManagementInboundTransferBankDebitProcessingEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2MoneyManagementInboundTransferBankDebitProcessingEvent), nil
}

// FetchRelatedObject fetches the V2MoneyManagementInboundTransfer related to the event.
func (en *V2MoneyManagementInboundTransferBankDebitProcessingEventNotification) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementInboundTransfer, error) {
	relatedObj := &V2MoneyManagementInboundTransfer{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2MoneyManagementInboundTransferBankDebitQueuedEvent is the Go struct for the "v2.money_management.inbound_transfer.bank_debit_queued" event.
// Occurs when an InboundTransfer is queued.
type V2MoneyManagementInboundTransferBankDebitQueuedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2MoneyManagementInboundTransfer, error)
}

// FetchRelatedObject fetches the V2MoneyManagementInboundTransfer related to the event.
func (e *V2MoneyManagementInboundTransferBankDebitQueuedEvent) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementInboundTransfer, error) {
	return e.fetchRelatedObject()
}

// V2MoneyManagementInboundTransferBankDebitQueuedEventNotification is the webhook payload you'll get when handling an event with type "v2.money_management.inbound_transfer.bank_debit_queued"
// Occurs when an InboundTransfer is queued.
type V2MoneyManagementInboundTransferBankDebitQueuedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2MoneyManagementInboundTransferBankDebitQueuedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2MoneyManagementInboundTransferBankDebitQueuedEvent that created this Notification
func (en *V2MoneyManagementInboundTransferBankDebitQueuedEventNotification) FetchEvent(ctx context.Context) (*V2MoneyManagementInboundTransferBankDebitQueuedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2MoneyManagementInboundTransferBankDebitQueuedEvent), nil
}

// FetchRelatedObject fetches the V2MoneyManagementInboundTransfer related to the event.
func (en *V2MoneyManagementInboundTransferBankDebitQueuedEventNotification) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementInboundTransfer, error) {
	relatedObj := &V2MoneyManagementInboundTransfer{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2MoneyManagementInboundTransferBankDebitReturnedEvent is the Go struct for the "v2.money_management.inbound_transfer.bank_debit_returned" event.
// Occurs when an InboundTransfer is returned.
type V2MoneyManagementInboundTransferBankDebitReturnedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2MoneyManagementInboundTransfer, error)
}

// FetchRelatedObject fetches the V2MoneyManagementInboundTransfer related to the event.
func (e *V2MoneyManagementInboundTransferBankDebitReturnedEvent) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementInboundTransfer, error) {
	return e.fetchRelatedObject()
}

// V2MoneyManagementInboundTransferBankDebitReturnedEventNotification is the webhook payload you'll get when handling an event with type "v2.money_management.inbound_transfer.bank_debit_returned"
// Occurs when an InboundTransfer is returned.
type V2MoneyManagementInboundTransferBankDebitReturnedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2MoneyManagementInboundTransferBankDebitReturnedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2MoneyManagementInboundTransferBankDebitReturnedEvent that created this Notification
func (en *V2MoneyManagementInboundTransferBankDebitReturnedEventNotification) FetchEvent(ctx context.Context) (*V2MoneyManagementInboundTransferBankDebitReturnedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2MoneyManagementInboundTransferBankDebitReturnedEvent), nil
}

// FetchRelatedObject fetches the V2MoneyManagementInboundTransfer related to the event.
func (en *V2MoneyManagementInboundTransferBankDebitReturnedEventNotification) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementInboundTransfer, error) {
	relatedObj := &V2MoneyManagementInboundTransfer{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2MoneyManagementInboundTransferBankDebitSucceededEvent is the Go struct for the "v2.money_management.inbound_transfer.bank_debit_succeeded" event.
// Occurs when an InboundTransfer succeeds.
type V2MoneyManagementInboundTransferBankDebitSucceededEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2MoneyManagementInboundTransfer, error)
}

// FetchRelatedObject fetches the V2MoneyManagementInboundTransfer related to the event.
func (e *V2MoneyManagementInboundTransferBankDebitSucceededEvent) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementInboundTransfer, error) {
	return e.fetchRelatedObject()
}

// V2MoneyManagementInboundTransferBankDebitSucceededEventNotification is the webhook payload you'll get when handling an event with type "v2.money_management.inbound_transfer.bank_debit_succeeded"
// Occurs when an InboundTransfer succeeds.
type V2MoneyManagementInboundTransferBankDebitSucceededEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2MoneyManagementInboundTransferBankDebitSucceededEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2MoneyManagementInboundTransferBankDebitSucceededEvent that created this Notification
func (en *V2MoneyManagementInboundTransferBankDebitSucceededEventNotification) FetchEvent(ctx context.Context) (*V2MoneyManagementInboundTransferBankDebitSucceededEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2MoneyManagementInboundTransferBankDebitSucceededEvent), nil
}

// FetchRelatedObject fetches the V2MoneyManagementInboundTransfer related to the event.
func (en *V2MoneyManagementInboundTransferBankDebitSucceededEventNotification) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementInboundTransfer, error) {
	relatedObj := &V2MoneyManagementInboundTransfer{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2MoneyManagementOutboundPaymentCanceledEvent is the Go struct for the "v2.money_management.outbound_payment.canceled" event.
// Occurs when an OutboundPayment transitions into the canceled state.
type V2MoneyManagementOutboundPaymentCanceledEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2MoneyManagementOutboundPayment, error)
}

// FetchRelatedObject fetches the V2MoneyManagementOutboundPayment related to the event.
func (e *V2MoneyManagementOutboundPaymentCanceledEvent) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementOutboundPayment, error) {
	return e.fetchRelatedObject()
}

// V2MoneyManagementOutboundPaymentCanceledEventNotification is the webhook payload you'll get when handling an event with type "v2.money_management.outbound_payment.canceled"
// Occurs when an OutboundPayment transitions into the canceled state.
type V2MoneyManagementOutboundPaymentCanceledEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2MoneyManagementOutboundPaymentCanceledEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2MoneyManagementOutboundPaymentCanceledEvent that created this Notification
func (en *V2MoneyManagementOutboundPaymentCanceledEventNotification) FetchEvent(ctx context.Context) (*V2MoneyManagementOutboundPaymentCanceledEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2MoneyManagementOutboundPaymentCanceledEvent), nil
}

// FetchRelatedObject fetches the V2MoneyManagementOutboundPayment related to the event.
func (en *V2MoneyManagementOutboundPaymentCanceledEventNotification) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementOutboundPayment, error) {
	relatedObj := &V2MoneyManagementOutboundPayment{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2MoneyManagementOutboundPaymentCreatedEvent is the Go struct for the "v2.money_management.outbound_payment.created" event.
// Occurs when an OutboundPayment is created.
type V2MoneyManagementOutboundPaymentCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2MoneyManagementOutboundPayment, error)
}

// FetchRelatedObject fetches the V2MoneyManagementOutboundPayment related to the event.
func (e *V2MoneyManagementOutboundPaymentCreatedEvent) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementOutboundPayment, error) {
	return e.fetchRelatedObject()
}

// V2MoneyManagementOutboundPaymentCreatedEventNotification is the webhook payload you'll get when handling an event with type "v2.money_management.outbound_payment.created"
// Occurs when an OutboundPayment is created.
type V2MoneyManagementOutboundPaymentCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2MoneyManagementOutboundPaymentCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2MoneyManagementOutboundPaymentCreatedEvent that created this Notification
func (en *V2MoneyManagementOutboundPaymentCreatedEventNotification) FetchEvent(ctx context.Context) (*V2MoneyManagementOutboundPaymentCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2MoneyManagementOutboundPaymentCreatedEvent), nil
}

// FetchRelatedObject fetches the V2MoneyManagementOutboundPayment related to the event.
func (en *V2MoneyManagementOutboundPaymentCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementOutboundPayment, error) {
	relatedObj := &V2MoneyManagementOutboundPayment{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2MoneyManagementOutboundPaymentFailedEvent is the Go struct for the "v2.money_management.outbound_payment.failed" event.
// Occurs when an OutboundPayment transitions into the failed state.
type V2MoneyManagementOutboundPaymentFailedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2MoneyManagementOutboundPayment, error)
}

// FetchRelatedObject fetches the V2MoneyManagementOutboundPayment related to the event.
func (e *V2MoneyManagementOutboundPaymentFailedEvent) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementOutboundPayment, error) {
	return e.fetchRelatedObject()
}

// V2MoneyManagementOutboundPaymentFailedEventNotification is the webhook payload you'll get when handling an event with type "v2.money_management.outbound_payment.failed"
// Occurs when an OutboundPayment transitions into the failed state.
type V2MoneyManagementOutboundPaymentFailedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2MoneyManagementOutboundPaymentFailedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2MoneyManagementOutboundPaymentFailedEvent that created this Notification
func (en *V2MoneyManagementOutboundPaymentFailedEventNotification) FetchEvent(ctx context.Context) (*V2MoneyManagementOutboundPaymentFailedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2MoneyManagementOutboundPaymentFailedEvent), nil
}

// FetchRelatedObject fetches the V2MoneyManagementOutboundPayment related to the event.
func (en *V2MoneyManagementOutboundPaymentFailedEventNotification) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementOutboundPayment, error) {
	relatedObj := &V2MoneyManagementOutboundPayment{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2MoneyManagementOutboundPaymentPostedEvent is the Go struct for the "v2.money_management.outbound_payment.posted" event.
// Occurs when an OutboundPayment transitions into the posted state.
type V2MoneyManagementOutboundPaymentPostedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2MoneyManagementOutboundPayment, error)
}

// FetchRelatedObject fetches the V2MoneyManagementOutboundPayment related to the event.
func (e *V2MoneyManagementOutboundPaymentPostedEvent) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementOutboundPayment, error) {
	return e.fetchRelatedObject()
}

// V2MoneyManagementOutboundPaymentPostedEventNotification is the webhook payload you'll get when handling an event with type "v2.money_management.outbound_payment.posted"
// Occurs when an OutboundPayment transitions into the posted state.
type V2MoneyManagementOutboundPaymentPostedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2MoneyManagementOutboundPaymentPostedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2MoneyManagementOutboundPaymentPostedEvent that created this Notification
func (en *V2MoneyManagementOutboundPaymentPostedEventNotification) FetchEvent(ctx context.Context) (*V2MoneyManagementOutboundPaymentPostedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2MoneyManagementOutboundPaymentPostedEvent), nil
}

// FetchRelatedObject fetches the V2MoneyManagementOutboundPayment related to the event.
func (en *V2MoneyManagementOutboundPaymentPostedEventNotification) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementOutboundPayment, error) {
	relatedObj := &V2MoneyManagementOutboundPayment{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2MoneyManagementOutboundPaymentReturnedEvent is the Go struct for the "v2.money_management.outbound_payment.returned" event.
// Occurs when an OutboundPayment transitions into the returned state.
type V2MoneyManagementOutboundPaymentReturnedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2MoneyManagementOutboundPayment, error)
}

// FetchRelatedObject fetches the V2MoneyManagementOutboundPayment related to the event.
func (e *V2MoneyManagementOutboundPaymentReturnedEvent) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementOutboundPayment, error) {
	return e.fetchRelatedObject()
}

// V2MoneyManagementOutboundPaymentReturnedEventNotification is the webhook payload you'll get when handling an event with type "v2.money_management.outbound_payment.returned"
// Occurs when an OutboundPayment transitions into the returned state.
type V2MoneyManagementOutboundPaymentReturnedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2MoneyManagementOutboundPaymentReturnedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2MoneyManagementOutboundPaymentReturnedEvent that created this Notification
func (en *V2MoneyManagementOutboundPaymentReturnedEventNotification) FetchEvent(ctx context.Context) (*V2MoneyManagementOutboundPaymentReturnedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2MoneyManagementOutboundPaymentReturnedEvent), nil
}

// FetchRelatedObject fetches the V2MoneyManagementOutboundPayment related to the event.
func (en *V2MoneyManagementOutboundPaymentReturnedEventNotification) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementOutboundPayment, error) {
	relatedObj := &V2MoneyManagementOutboundPayment{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2MoneyManagementOutboundPaymentUpdatedEvent is the Go struct for the "v2.money_management.outbound_payment.updated" event.
// Occurs when an OutboundPayment is updated.
type V2MoneyManagementOutboundPaymentUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2MoneyManagementOutboundPayment, error)
}

// FetchRelatedObject fetches the V2MoneyManagementOutboundPayment related to the event.
func (e *V2MoneyManagementOutboundPaymentUpdatedEvent) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementOutboundPayment, error) {
	return e.fetchRelatedObject()
}

// V2MoneyManagementOutboundPaymentUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v2.money_management.outbound_payment.updated"
// Occurs when an OutboundPayment is updated.
type V2MoneyManagementOutboundPaymentUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2MoneyManagementOutboundPaymentUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2MoneyManagementOutboundPaymentUpdatedEvent that created this Notification
func (en *V2MoneyManagementOutboundPaymentUpdatedEventNotification) FetchEvent(ctx context.Context) (*V2MoneyManagementOutboundPaymentUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2MoneyManagementOutboundPaymentUpdatedEvent), nil
}

// FetchRelatedObject fetches the V2MoneyManagementOutboundPayment related to the event.
func (en *V2MoneyManagementOutboundPaymentUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementOutboundPayment, error) {
	relatedObj := &V2MoneyManagementOutboundPayment{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2MoneyManagementOutboundTransferCanceledEvent is the Go struct for the "v2.money_management.outbound_transfer.canceled" event.
// Occurs when an OutboundTransfer transitions into the canceled state.
type V2MoneyManagementOutboundTransferCanceledEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2MoneyManagementOutboundTransfer, error)
}

// FetchRelatedObject fetches the V2MoneyManagementOutboundTransfer related to the event.
func (e *V2MoneyManagementOutboundTransferCanceledEvent) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementOutboundTransfer, error) {
	return e.fetchRelatedObject()
}

// V2MoneyManagementOutboundTransferCanceledEventNotification is the webhook payload you'll get when handling an event with type "v2.money_management.outbound_transfer.canceled"
// Occurs when an OutboundTransfer transitions into the canceled state.
type V2MoneyManagementOutboundTransferCanceledEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2MoneyManagementOutboundTransferCanceledEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2MoneyManagementOutboundTransferCanceledEvent that created this Notification
func (en *V2MoneyManagementOutboundTransferCanceledEventNotification) FetchEvent(ctx context.Context) (*V2MoneyManagementOutboundTransferCanceledEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2MoneyManagementOutboundTransferCanceledEvent), nil
}

// FetchRelatedObject fetches the V2MoneyManagementOutboundTransfer related to the event.
func (en *V2MoneyManagementOutboundTransferCanceledEventNotification) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementOutboundTransfer, error) {
	relatedObj := &V2MoneyManagementOutboundTransfer{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2MoneyManagementOutboundTransferCreatedEvent is the Go struct for the "v2.money_management.outbound_transfer.created" event.
// Occurs when an OutboundTransfer is created.
type V2MoneyManagementOutboundTransferCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2MoneyManagementOutboundTransfer, error)
}

// FetchRelatedObject fetches the V2MoneyManagementOutboundTransfer related to the event.
func (e *V2MoneyManagementOutboundTransferCreatedEvent) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementOutboundTransfer, error) {
	return e.fetchRelatedObject()
}

// V2MoneyManagementOutboundTransferCreatedEventNotification is the webhook payload you'll get when handling an event with type "v2.money_management.outbound_transfer.created"
// Occurs when an OutboundTransfer is created.
type V2MoneyManagementOutboundTransferCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2MoneyManagementOutboundTransferCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2MoneyManagementOutboundTransferCreatedEvent that created this Notification
func (en *V2MoneyManagementOutboundTransferCreatedEventNotification) FetchEvent(ctx context.Context) (*V2MoneyManagementOutboundTransferCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2MoneyManagementOutboundTransferCreatedEvent), nil
}

// FetchRelatedObject fetches the V2MoneyManagementOutboundTransfer related to the event.
func (en *V2MoneyManagementOutboundTransferCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementOutboundTransfer, error) {
	relatedObj := &V2MoneyManagementOutboundTransfer{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2MoneyManagementOutboundTransferFailedEvent is the Go struct for the "v2.money_management.outbound_transfer.failed" event.
// Occurs when an OutboundTransfer transitions into the failed state.
type V2MoneyManagementOutboundTransferFailedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2MoneyManagementOutboundTransfer, error)
}

// FetchRelatedObject fetches the V2MoneyManagementOutboundTransfer related to the event.
func (e *V2MoneyManagementOutboundTransferFailedEvent) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementOutboundTransfer, error) {
	return e.fetchRelatedObject()
}

// V2MoneyManagementOutboundTransferFailedEventNotification is the webhook payload you'll get when handling an event with type "v2.money_management.outbound_transfer.failed"
// Occurs when an OutboundTransfer transitions into the failed state.
type V2MoneyManagementOutboundTransferFailedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2MoneyManagementOutboundTransferFailedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2MoneyManagementOutboundTransferFailedEvent that created this Notification
func (en *V2MoneyManagementOutboundTransferFailedEventNotification) FetchEvent(ctx context.Context) (*V2MoneyManagementOutboundTransferFailedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2MoneyManagementOutboundTransferFailedEvent), nil
}

// FetchRelatedObject fetches the V2MoneyManagementOutboundTransfer related to the event.
func (en *V2MoneyManagementOutboundTransferFailedEventNotification) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementOutboundTransfer, error) {
	relatedObj := &V2MoneyManagementOutboundTransfer{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2MoneyManagementOutboundTransferPostedEvent is the Go struct for the "v2.money_management.outbound_transfer.posted" event.
// Occurs when an OutboundTransfer transitions into the posted state.
type V2MoneyManagementOutboundTransferPostedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2MoneyManagementOutboundTransfer, error)
}

// FetchRelatedObject fetches the V2MoneyManagementOutboundTransfer related to the event.
func (e *V2MoneyManagementOutboundTransferPostedEvent) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementOutboundTransfer, error) {
	return e.fetchRelatedObject()
}

// V2MoneyManagementOutboundTransferPostedEventNotification is the webhook payload you'll get when handling an event with type "v2.money_management.outbound_transfer.posted"
// Occurs when an OutboundTransfer transitions into the posted state.
type V2MoneyManagementOutboundTransferPostedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2MoneyManagementOutboundTransferPostedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2MoneyManagementOutboundTransferPostedEvent that created this Notification
func (en *V2MoneyManagementOutboundTransferPostedEventNotification) FetchEvent(ctx context.Context) (*V2MoneyManagementOutboundTransferPostedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2MoneyManagementOutboundTransferPostedEvent), nil
}

// FetchRelatedObject fetches the V2MoneyManagementOutboundTransfer related to the event.
func (en *V2MoneyManagementOutboundTransferPostedEventNotification) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementOutboundTransfer, error) {
	relatedObj := &V2MoneyManagementOutboundTransfer{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2MoneyManagementOutboundTransferReturnedEvent is the Go struct for the "v2.money_management.outbound_transfer.returned" event.
// Occurs when an OutboundTransfer transitions into the returned state.
type V2MoneyManagementOutboundTransferReturnedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2MoneyManagementOutboundTransfer, error)
}

// FetchRelatedObject fetches the V2MoneyManagementOutboundTransfer related to the event.
func (e *V2MoneyManagementOutboundTransferReturnedEvent) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementOutboundTransfer, error) {
	return e.fetchRelatedObject()
}

// V2MoneyManagementOutboundTransferReturnedEventNotification is the webhook payload you'll get when handling an event with type "v2.money_management.outbound_transfer.returned"
// Occurs when an OutboundTransfer transitions into the returned state.
type V2MoneyManagementOutboundTransferReturnedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2MoneyManagementOutboundTransferReturnedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2MoneyManagementOutboundTransferReturnedEvent that created this Notification
func (en *V2MoneyManagementOutboundTransferReturnedEventNotification) FetchEvent(ctx context.Context) (*V2MoneyManagementOutboundTransferReturnedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2MoneyManagementOutboundTransferReturnedEvent), nil
}

// FetchRelatedObject fetches the V2MoneyManagementOutboundTransfer related to the event.
func (en *V2MoneyManagementOutboundTransferReturnedEventNotification) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementOutboundTransfer, error) {
	relatedObj := &V2MoneyManagementOutboundTransfer{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2MoneyManagementOutboundTransferUpdatedEvent is the Go struct for the "v2.money_management.outbound_transfer.updated" event.
// Event that is emitted every time an Outbound Transfer is updated.
type V2MoneyManagementOutboundTransferUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2MoneyManagementOutboundTransfer, error)
}

// FetchRelatedObject fetches the V2MoneyManagementOutboundTransfer related to the event.
func (e *V2MoneyManagementOutboundTransferUpdatedEvent) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementOutboundTransfer, error) {
	return e.fetchRelatedObject()
}

// V2MoneyManagementOutboundTransferUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v2.money_management.outbound_transfer.updated"
// Event that is emitted every time an Outbound Transfer is updated.
type V2MoneyManagementOutboundTransferUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2MoneyManagementOutboundTransferUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2MoneyManagementOutboundTransferUpdatedEvent that created this Notification
func (en *V2MoneyManagementOutboundTransferUpdatedEventNotification) FetchEvent(ctx context.Context) (*V2MoneyManagementOutboundTransferUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2MoneyManagementOutboundTransferUpdatedEvent), nil
}

// FetchRelatedObject fetches the V2MoneyManagementOutboundTransfer related to the event.
func (en *V2MoneyManagementOutboundTransferUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementOutboundTransfer, error) {
	relatedObj := &V2MoneyManagementOutboundTransfer{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2MoneyManagementPayoutMethodUpdatedEvent is the Go struct for the "v2.money_management.payout_method.updated" event.
// Occurs when a PayoutMethod is updated.
type V2MoneyManagementPayoutMethodUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2MoneyManagementPayoutMethod, error)
}

// FetchRelatedObject fetches the V2MoneyManagementPayoutMethod related to the event.
func (e *V2MoneyManagementPayoutMethodUpdatedEvent) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementPayoutMethod, error) {
	return e.fetchRelatedObject()
}

// V2MoneyManagementPayoutMethodUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v2.money_management.payout_method.updated"
// Occurs when a PayoutMethod is updated.
type V2MoneyManagementPayoutMethodUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2MoneyManagementPayoutMethodUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2MoneyManagementPayoutMethodUpdatedEvent that created this Notification
func (en *V2MoneyManagementPayoutMethodUpdatedEventNotification) FetchEvent(ctx context.Context) (*V2MoneyManagementPayoutMethodUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2MoneyManagementPayoutMethodUpdatedEvent), nil
}

// FetchRelatedObject fetches the V2MoneyManagementPayoutMethod related to the event.
func (en *V2MoneyManagementPayoutMethodUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementPayoutMethod, error) {
	relatedObj := &V2MoneyManagementPayoutMethod{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2MoneyManagementReceivedCreditAvailableEvent is the Go struct for the "v2.money_management.received_credit.available" event.
// Occurs when a ReceivedCredit's funds are received and are available in your balance.
type V2MoneyManagementReceivedCreditAvailableEvent struct {
	V2BaseEvent
	Data               V2MoneyManagementReceivedCreditAvailableEventData `json:"data"`
	RelatedObject      RelatedObject                                     `json:"related_object"`
	fetchRelatedObject func() (*V2MoneyManagementReceivedCredit, error)
}

// FetchRelatedObject fetches the V2MoneyManagementReceivedCredit related to the event.
func (e *V2MoneyManagementReceivedCreditAvailableEvent) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementReceivedCredit, error) {
	return e.fetchRelatedObject()
}

// V2MoneyManagementReceivedCreditAvailableEventNotification is the webhook payload you'll get when handling an event with type "v2.money_management.received_credit.available"
// Occurs when a ReceivedCredit's funds are received and are available in your balance.
type V2MoneyManagementReceivedCreditAvailableEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2MoneyManagementReceivedCreditAvailableEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2MoneyManagementReceivedCreditAvailableEvent that created this Notification
func (en *V2MoneyManagementReceivedCreditAvailableEventNotification) FetchEvent(ctx context.Context) (*V2MoneyManagementReceivedCreditAvailableEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2MoneyManagementReceivedCreditAvailableEvent), nil
}

// FetchRelatedObject fetches the V2MoneyManagementReceivedCredit related to the event.
func (en *V2MoneyManagementReceivedCreditAvailableEventNotification) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementReceivedCredit, error) {
	relatedObj := &V2MoneyManagementReceivedCredit{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2MoneyManagementReceivedCreditFailedEvent is the Go struct for the "v2.money_management.received_credit.failed" event.
// Occurs when a ReceivedCredit is attempted to your balance and fails. See the status_details for more information.
type V2MoneyManagementReceivedCreditFailedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2MoneyManagementReceivedCredit, error)
}

// FetchRelatedObject fetches the V2MoneyManagementReceivedCredit related to the event.
func (e *V2MoneyManagementReceivedCreditFailedEvent) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementReceivedCredit, error) {
	return e.fetchRelatedObject()
}

// V2MoneyManagementReceivedCreditFailedEventNotification is the webhook payload you'll get when handling an event with type "v2.money_management.received_credit.failed"
// Occurs when a ReceivedCredit is attempted to your balance and fails. See the status_details for more information.
type V2MoneyManagementReceivedCreditFailedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2MoneyManagementReceivedCreditFailedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2MoneyManagementReceivedCreditFailedEvent that created this Notification
func (en *V2MoneyManagementReceivedCreditFailedEventNotification) FetchEvent(ctx context.Context) (*V2MoneyManagementReceivedCreditFailedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2MoneyManagementReceivedCreditFailedEvent), nil
}

// FetchRelatedObject fetches the V2MoneyManagementReceivedCredit related to the event.
func (en *V2MoneyManagementReceivedCreditFailedEventNotification) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementReceivedCredit, error) {
	relatedObj := &V2MoneyManagementReceivedCredit{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2MoneyManagementReceivedCreditReturnedEvent is the Go struct for the "v2.money_management.received_credit.returned" event.
// Occurs when a ReceivedCredit is reversed, returned to the originator, and deducted from your balance.
type V2MoneyManagementReceivedCreditReturnedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2MoneyManagementReceivedCredit, error)
}

// FetchRelatedObject fetches the V2MoneyManagementReceivedCredit related to the event.
func (e *V2MoneyManagementReceivedCreditReturnedEvent) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementReceivedCredit, error) {
	return e.fetchRelatedObject()
}

// V2MoneyManagementReceivedCreditReturnedEventNotification is the webhook payload you'll get when handling an event with type "v2.money_management.received_credit.returned"
// Occurs when a ReceivedCredit is reversed, returned to the originator, and deducted from your balance.
type V2MoneyManagementReceivedCreditReturnedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2MoneyManagementReceivedCreditReturnedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2MoneyManagementReceivedCreditReturnedEvent that created this Notification
func (en *V2MoneyManagementReceivedCreditReturnedEventNotification) FetchEvent(ctx context.Context) (*V2MoneyManagementReceivedCreditReturnedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2MoneyManagementReceivedCreditReturnedEvent), nil
}

// FetchRelatedObject fetches the V2MoneyManagementReceivedCredit related to the event.
func (en *V2MoneyManagementReceivedCreditReturnedEventNotification) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementReceivedCredit, error) {
	relatedObj := &V2MoneyManagementReceivedCredit{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2MoneyManagementReceivedCreditSucceededEvent is the Go struct for the "v2.money_management.received_credit.succeeded" event.
// Occurs when a ReceivedCredit succeeds.
type V2MoneyManagementReceivedCreditSucceededEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2MoneyManagementReceivedCredit, error)
}

// FetchRelatedObject fetches the V2MoneyManagementReceivedCredit related to the event.
func (e *V2MoneyManagementReceivedCreditSucceededEvent) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementReceivedCredit, error) {
	return e.fetchRelatedObject()
}

// V2MoneyManagementReceivedCreditSucceededEventNotification is the webhook payload you'll get when handling an event with type "v2.money_management.received_credit.succeeded"
// Occurs when a ReceivedCredit succeeds.
type V2MoneyManagementReceivedCreditSucceededEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2MoneyManagementReceivedCreditSucceededEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2MoneyManagementReceivedCreditSucceededEvent that created this Notification
func (en *V2MoneyManagementReceivedCreditSucceededEventNotification) FetchEvent(ctx context.Context) (*V2MoneyManagementReceivedCreditSucceededEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2MoneyManagementReceivedCreditSucceededEvent), nil
}

// FetchRelatedObject fetches the V2MoneyManagementReceivedCredit related to the event.
func (en *V2MoneyManagementReceivedCreditSucceededEventNotification) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementReceivedCredit, error) {
	relatedObj := &V2MoneyManagementReceivedCredit{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2MoneyManagementReceivedDebitCanceledEvent is the Go struct for the "v2.money_management.received_debit.canceled" event.
// Occurs when a ReceivedDebit is canceled.
type V2MoneyManagementReceivedDebitCanceledEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2MoneyManagementReceivedDebit, error)
}

// FetchRelatedObject fetches the V2MoneyManagementReceivedDebit related to the event.
func (e *V2MoneyManagementReceivedDebitCanceledEvent) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementReceivedDebit, error) {
	return e.fetchRelatedObject()
}

// V2MoneyManagementReceivedDebitCanceledEventNotification is the webhook payload you'll get when handling an event with type "v2.money_management.received_debit.canceled"
// Occurs when a ReceivedDebit is canceled.
type V2MoneyManagementReceivedDebitCanceledEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2MoneyManagementReceivedDebitCanceledEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2MoneyManagementReceivedDebitCanceledEvent that created this Notification
func (en *V2MoneyManagementReceivedDebitCanceledEventNotification) FetchEvent(ctx context.Context) (*V2MoneyManagementReceivedDebitCanceledEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2MoneyManagementReceivedDebitCanceledEvent), nil
}

// FetchRelatedObject fetches the V2MoneyManagementReceivedDebit related to the event.
func (en *V2MoneyManagementReceivedDebitCanceledEventNotification) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementReceivedDebit, error) {
	relatedObj := &V2MoneyManagementReceivedDebit{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2MoneyManagementReceivedDebitFailedEvent is the Go struct for the "v2.money_management.received_debit.failed" event.
// Occurs when a ReceivedDebit fails.
type V2MoneyManagementReceivedDebitFailedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2MoneyManagementReceivedDebit, error)
}

// FetchRelatedObject fetches the V2MoneyManagementReceivedDebit related to the event.
func (e *V2MoneyManagementReceivedDebitFailedEvent) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementReceivedDebit, error) {
	return e.fetchRelatedObject()
}

// V2MoneyManagementReceivedDebitFailedEventNotification is the webhook payload you'll get when handling an event with type "v2.money_management.received_debit.failed"
// Occurs when a ReceivedDebit fails.
type V2MoneyManagementReceivedDebitFailedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2MoneyManagementReceivedDebitFailedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2MoneyManagementReceivedDebitFailedEvent that created this Notification
func (en *V2MoneyManagementReceivedDebitFailedEventNotification) FetchEvent(ctx context.Context) (*V2MoneyManagementReceivedDebitFailedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2MoneyManagementReceivedDebitFailedEvent), nil
}

// FetchRelatedObject fetches the V2MoneyManagementReceivedDebit related to the event.
func (en *V2MoneyManagementReceivedDebitFailedEventNotification) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementReceivedDebit, error) {
	relatedObj := &V2MoneyManagementReceivedDebit{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2MoneyManagementReceivedDebitPendingEvent is the Go struct for the "v2.money_management.received_debit.pending" event.
// Occurs when a ReceivedDebit is set to pending.
type V2MoneyManagementReceivedDebitPendingEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2MoneyManagementReceivedDebit, error)
}

// FetchRelatedObject fetches the V2MoneyManagementReceivedDebit related to the event.
func (e *V2MoneyManagementReceivedDebitPendingEvent) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementReceivedDebit, error) {
	return e.fetchRelatedObject()
}

// V2MoneyManagementReceivedDebitPendingEventNotification is the webhook payload you'll get when handling an event with type "v2.money_management.received_debit.pending"
// Occurs when a ReceivedDebit is set to pending.
type V2MoneyManagementReceivedDebitPendingEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2MoneyManagementReceivedDebitPendingEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2MoneyManagementReceivedDebitPendingEvent that created this Notification
func (en *V2MoneyManagementReceivedDebitPendingEventNotification) FetchEvent(ctx context.Context) (*V2MoneyManagementReceivedDebitPendingEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2MoneyManagementReceivedDebitPendingEvent), nil
}

// FetchRelatedObject fetches the V2MoneyManagementReceivedDebit related to the event.
func (en *V2MoneyManagementReceivedDebitPendingEventNotification) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementReceivedDebit, error) {
	relatedObj := &V2MoneyManagementReceivedDebit{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2MoneyManagementReceivedDebitSucceededEvent is the Go struct for the "v2.money_management.received_debit.succeeded" event.
// Occurs when a ReceivedDebit succeeds.
type V2MoneyManagementReceivedDebitSucceededEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2MoneyManagementReceivedDebit, error)
}

// FetchRelatedObject fetches the V2MoneyManagementReceivedDebit related to the event.
func (e *V2MoneyManagementReceivedDebitSucceededEvent) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementReceivedDebit, error) {
	return e.fetchRelatedObject()
}

// V2MoneyManagementReceivedDebitSucceededEventNotification is the webhook payload you'll get when handling an event with type "v2.money_management.received_debit.succeeded"
// Occurs when a ReceivedDebit succeeds.
type V2MoneyManagementReceivedDebitSucceededEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2MoneyManagementReceivedDebitSucceededEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2MoneyManagementReceivedDebitSucceededEvent that created this Notification
func (en *V2MoneyManagementReceivedDebitSucceededEventNotification) FetchEvent(ctx context.Context) (*V2MoneyManagementReceivedDebitSucceededEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2MoneyManagementReceivedDebitSucceededEvent), nil
}

// FetchRelatedObject fetches the V2MoneyManagementReceivedDebit related to the event.
func (en *V2MoneyManagementReceivedDebitSucceededEventNotification) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementReceivedDebit, error) {
	relatedObj := &V2MoneyManagementReceivedDebit{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2MoneyManagementReceivedDebitUpdatedEvent is the Go struct for the "v2.money_management.received_debit.updated" event.
// Occurs when a ReceivedDebit is updated.
type V2MoneyManagementReceivedDebitUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2MoneyManagementReceivedDebit, error)
}

// FetchRelatedObject fetches the V2MoneyManagementReceivedDebit related to the event.
func (e *V2MoneyManagementReceivedDebitUpdatedEvent) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementReceivedDebit, error) {
	return e.fetchRelatedObject()
}

// V2MoneyManagementReceivedDebitUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v2.money_management.received_debit.updated"
// Occurs when a ReceivedDebit is updated.
type V2MoneyManagementReceivedDebitUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2MoneyManagementReceivedDebitUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2MoneyManagementReceivedDebitUpdatedEvent that created this Notification
func (en *V2MoneyManagementReceivedDebitUpdatedEventNotification) FetchEvent(ctx context.Context) (*V2MoneyManagementReceivedDebitUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2MoneyManagementReceivedDebitUpdatedEvent), nil
}

// FetchRelatedObject fetches the V2MoneyManagementReceivedDebit related to the event.
func (en *V2MoneyManagementReceivedDebitUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementReceivedDebit, error) {
	relatedObj := &V2MoneyManagementReceivedDebit{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2MoneyManagementRecipientVerificationCreatedEvent is the Go struct for the "v2.money_management.recipient_verification.created" event.
// Occurs when a RecipientVerification is created.
type V2MoneyManagementRecipientVerificationCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2MoneyManagementRecipientVerification, error)
}

// FetchRelatedObject fetches the V2MoneyManagementRecipientVerification related to the event.
func (e *V2MoneyManagementRecipientVerificationCreatedEvent) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementRecipientVerification, error) {
	return e.fetchRelatedObject()
}

// V2MoneyManagementRecipientVerificationCreatedEventNotification is the webhook payload you'll get when handling an event with type "v2.money_management.recipient_verification.created"
// Occurs when a RecipientVerification is created.
type V2MoneyManagementRecipientVerificationCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2MoneyManagementRecipientVerificationCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2MoneyManagementRecipientVerificationCreatedEvent that created this Notification
func (en *V2MoneyManagementRecipientVerificationCreatedEventNotification) FetchEvent(ctx context.Context) (*V2MoneyManagementRecipientVerificationCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2MoneyManagementRecipientVerificationCreatedEvent), nil
}

// FetchRelatedObject fetches the V2MoneyManagementRecipientVerification related to the event.
func (en *V2MoneyManagementRecipientVerificationCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementRecipientVerification, error) {
	relatedObj := &V2MoneyManagementRecipientVerification{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2MoneyManagementRecipientVerificationUpdatedEvent is the Go struct for the "v2.money_management.recipient_verification.updated" event.
// Occurs when a RecipientVerification is updated.
type V2MoneyManagementRecipientVerificationUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2MoneyManagementRecipientVerification, error)
}

// FetchRelatedObject fetches the V2MoneyManagementRecipientVerification related to the event.
func (e *V2MoneyManagementRecipientVerificationUpdatedEvent) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementRecipientVerification, error) {
	return e.fetchRelatedObject()
}

// V2MoneyManagementRecipientVerificationUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v2.money_management.recipient_verification.updated"
// Occurs when a RecipientVerification is updated.
type V2MoneyManagementRecipientVerificationUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2MoneyManagementRecipientVerificationUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2MoneyManagementRecipientVerificationUpdatedEvent that created this Notification
func (en *V2MoneyManagementRecipientVerificationUpdatedEventNotification) FetchEvent(ctx context.Context) (*V2MoneyManagementRecipientVerificationUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2MoneyManagementRecipientVerificationUpdatedEvent), nil
}

// FetchRelatedObject fetches the V2MoneyManagementRecipientVerification related to the event.
func (en *V2MoneyManagementRecipientVerificationUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementRecipientVerification, error) {
	relatedObj := &V2MoneyManagementRecipientVerification{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2MoneyManagementTransactionCreatedEvent is the Go struct for the "v2.money_management.transaction.created" event.
// Occurs when a Transaction is created.
type V2MoneyManagementTransactionCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2MoneyManagementTransaction, error)
}

// FetchRelatedObject fetches the V2MoneyManagementTransaction related to the event.
func (e *V2MoneyManagementTransactionCreatedEvent) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementTransaction, error) {
	return e.fetchRelatedObject()
}

// V2MoneyManagementTransactionCreatedEventNotification is the webhook payload you'll get when handling an event with type "v2.money_management.transaction.created"
// Occurs when a Transaction is created.
type V2MoneyManagementTransactionCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2MoneyManagementTransactionCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2MoneyManagementTransactionCreatedEvent that created this Notification
func (en *V2MoneyManagementTransactionCreatedEventNotification) FetchEvent(ctx context.Context) (*V2MoneyManagementTransactionCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2MoneyManagementTransactionCreatedEvent), nil
}

// FetchRelatedObject fetches the V2MoneyManagementTransaction related to the event.
func (en *V2MoneyManagementTransactionCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementTransaction, error) {
	relatedObj := &V2MoneyManagementTransaction{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2MoneyManagementTransactionUpdatedEvent is the Go struct for the "v2.money_management.transaction.updated" event.
// Occurs when a Transaction is updated.
type V2MoneyManagementTransactionUpdatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2MoneyManagementTransaction, error)
}

// FetchRelatedObject fetches the V2MoneyManagementTransaction related to the event.
func (e *V2MoneyManagementTransactionUpdatedEvent) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementTransaction, error) {
	return e.fetchRelatedObject()
}

// V2MoneyManagementTransactionUpdatedEventNotification is the webhook payload you'll get when handling an event with type "v2.money_management.transaction.updated"
// Occurs when a Transaction is updated.
type V2MoneyManagementTransactionUpdatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2MoneyManagementTransactionUpdatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2MoneyManagementTransactionUpdatedEvent that created this Notification
func (en *V2MoneyManagementTransactionUpdatedEventNotification) FetchEvent(ctx context.Context) (*V2MoneyManagementTransactionUpdatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2MoneyManagementTransactionUpdatedEvent), nil
}

// FetchRelatedObject fetches the V2MoneyManagementTransaction related to the event.
func (en *V2MoneyManagementTransactionUpdatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2MoneyManagementTransaction, error) {
	relatedObj := &V2MoneyManagementTransaction{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2PaymentsOffSessionPaymentAuthorizationAttemptFailedEvent is the Go struct for the "v2.payments.off_session_payment.authorization_attempt_failed" event.
// Sent after a failed authorization if there are still retries available on the OffSessionPayment.
type V2PaymentsOffSessionPaymentAuthorizationAttemptFailedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2PaymentsOffSessionPayment, error)
}

// FetchRelatedObject fetches the V2PaymentsOffSessionPayment related to the event.
func (e *V2PaymentsOffSessionPaymentAuthorizationAttemptFailedEvent) FetchRelatedObject(ctx context.Context) (*V2PaymentsOffSessionPayment, error) {
	return e.fetchRelatedObject()
}

// V2PaymentsOffSessionPaymentAuthorizationAttemptFailedEventNotification is the webhook payload you'll get when handling an event with type "v2.payments.off_session_payment.authorization_attempt_failed"
// Sent after a failed authorization if there are still retries available on the OffSessionPayment.
type V2PaymentsOffSessionPaymentAuthorizationAttemptFailedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2PaymentsOffSessionPaymentAuthorizationAttemptFailedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2PaymentsOffSessionPaymentAuthorizationAttemptFailedEvent that created this Notification
func (en *V2PaymentsOffSessionPaymentAuthorizationAttemptFailedEventNotification) FetchEvent(ctx context.Context) (*V2PaymentsOffSessionPaymentAuthorizationAttemptFailedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2PaymentsOffSessionPaymentAuthorizationAttemptFailedEvent), nil
}

// FetchRelatedObject fetches the V2PaymentsOffSessionPayment related to the event.
func (en *V2PaymentsOffSessionPaymentAuthorizationAttemptFailedEventNotification) FetchRelatedObject(ctx context.Context) (*V2PaymentsOffSessionPayment, error) {
	relatedObj := &V2PaymentsOffSessionPayment{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2PaymentsOffSessionPaymentAuthorizationAttemptStartedEvent is the Go struct for the "v2.payments.off_session_payment.authorization_attempt_started" event.
// Sent when our internal scheduling system kicks off an attempt at authorization, whether it's a
// retry or an initial authorization.
type V2PaymentsOffSessionPaymentAuthorizationAttemptStartedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2PaymentsOffSessionPayment, error)
}

// FetchRelatedObject fetches the V2PaymentsOffSessionPayment related to the event.
func (e *V2PaymentsOffSessionPaymentAuthorizationAttemptStartedEvent) FetchRelatedObject(ctx context.Context) (*V2PaymentsOffSessionPayment, error) {
	return e.fetchRelatedObject()
}

// V2PaymentsOffSessionPaymentAuthorizationAttemptStartedEventNotification is the webhook payload you'll get when handling an event with type "v2.payments.off_session_payment.authorization_attempt_started"
// Sent when our internal scheduling system kicks off an attempt at authorization, whether it's a
// retry or an initial authorization.
type V2PaymentsOffSessionPaymentAuthorizationAttemptStartedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2PaymentsOffSessionPaymentAuthorizationAttemptStartedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2PaymentsOffSessionPaymentAuthorizationAttemptStartedEvent that created this Notification
func (en *V2PaymentsOffSessionPaymentAuthorizationAttemptStartedEventNotification) FetchEvent(ctx context.Context) (*V2PaymentsOffSessionPaymentAuthorizationAttemptStartedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2PaymentsOffSessionPaymentAuthorizationAttemptStartedEvent), nil
}

// FetchRelatedObject fetches the V2PaymentsOffSessionPayment related to the event.
func (en *V2PaymentsOffSessionPaymentAuthorizationAttemptStartedEventNotification) FetchRelatedObject(ctx context.Context) (*V2PaymentsOffSessionPayment, error) {
	relatedObj := &V2PaymentsOffSessionPayment{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2PaymentsOffSessionPaymentCanceledEvent is the Go struct for the "v2.payments.off_session_payment.canceled" event.
// Sent immediately following a user's call to the Off-Session Payments cancel endpoint.
type V2PaymentsOffSessionPaymentCanceledEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2PaymentsOffSessionPayment, error)
}

// FetchRelatedObject fetches the V2PaymentsOffSessionPayment related to the event.
func (e *V2PaymentsOffSessionPaymentCanceledEvent) FetchRelatedObject(ctx context.Context) (*V2PaymentsOffSessionPayment, error) {
	return e.fetchRelatedObject()
}

// V2PaymentsOffSessionPaymentCanceledEventNotification is the webhook payload you'll get when handling an event with type "v2.payments.off_session_payment.canceled"
// Sent immediately following a user's call to the Off-Session Payments cancel endpoint.
type V2PaymentsOffSessionPaymentCanceledEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2PaymentsOffSessionPaymentCanceledEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2PaymentsOffSessionPaymentCanceledEvent that created this Notification
func (en *V2PaymentsOffSessionPaymentCanceledEventNotification) FetchEvent(ctx context.Context) (*V2PaymentsOffSessionPaymentCanceledEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2PaymentsOffSessionPaymentCanceledEvent), nil
}

// FetchRelatedObject fetches the V2PaymentsOffSessionPayment related to the event.
func (en *V2PaymentsOffSessionPaymentCanceledEventNotification) FetchRelatedObject(ctx context.Context) (*V2PaymentsOffSessionPayment, error) {
	relatedObj := &V2PaymentsOffSessionPayment{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2PaymentsOffSessionPaymentCreatedEvent is the Go struct for the "v2.payments.off_session_payment.created" event.
// Sent immediately following a user's call to the Off-Session Payments create endpoint.
type V2PaymentsOffSessionPaymentCreatedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2PaymentsOffSessionPayment, error)
}

// FetchRelatedObject fetches the V2PaymentsOffSessionPayment related to the event.
func (e *V2PaymentsOffSessionPaymentCreatedEvent) FetchRelatedObject(ctx context.Context) (*V2PaymentsOffSessionPayment, error) {
	return e.fetchRelatedObject()
}

// V2PaymentsOffSessionPaymentCreatedEventNotification is the webhook payload you'll get when handling an event with type "v2.payments.off_session_payment.created"
// Sent immediately following a user's call to the Off-Session Payments create endpoint.
type V2PaymentsOffSessionPaymentCreatedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2PaymentsOffSessionPaymentCreatedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2PaymentsOffSessionPaymentCreatedEvent that created this Notification
func (en *V2PaymentsOffSessionPaymentCreatedEventNotification) FetchEvent(ctx context.Context) (*V2PaymentsOffSessionPaymentCreatedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2PaymentsOffSessionPaymentCreatedEvent), nil
}

// FetchRelatedObject fetches the V2PaymentsOffSessionPayment related to the event.
func (en *V2PaymentsOffSessionPaymentCreatedEventNotification) FetchRelatedObject(ctx context.Context) (*V2PaymentsOffSessionPayment, error) {
	relatedObj := &V2PaymentsOffSessionPayment{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2PaymentsOffSessionPaymentFailedEvent is the Go struct for the "v2.payments.off_session_payment.failed" event.
// Sent after a failed authorization if there are no retries remaining, or if the failure is unretryable.
type V2PaymentsOffSessionPaymentFailedEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2PaymentsOffSessionPayment, error)
}

// FetchRelatedObject fetches the V2PaymentsOffSessionPayment related to the event.
func (e *V2PaymentsOffSessionPaymentFailedEvent) FetchRelatedObject(ctx context.Context) (*V2PaymentsOffSessionPayment, error) {
	return e.fetchRelatedObject()
}

// V2PaymentsOffSessionPaymentFailedEventNotification is the webhook payload you'll get when handling an event with type "v2.payments.off_session_payment.failed"
// Sent after a failed authorization if there are no retries remaining, or if the failure is unretryable.
type V2PaymentsOffSessionPaymentFailedEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2PaymentsOffSessionPaymentFailedEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2PaymentsOffSessionPaymentFailedEvent that created this Notification
func (en *V2PaymentsOffSessionPaymentFailedEventNotification) FetchEvent(ctx context.Context) (*V2PaymentsOffSessionPaymentFailedEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2PaymentsOffSessionPaymentFailedEvent), nil
}

// FetchRelatedObject fetches the V2PaymentsOffSessionPayment related to the event.
func (en *V2PaymentsOffSessionPaymentFailedEventNotification) FetchRelatedObject(ctx context.Context) (*V2PaymentsOffSessionPayment, error) {
	relatedObj := &V2PaymentsOffSessionPayment{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// V2PaymentsOffSessionPaymentSucceededEvent is the Go struct for the "v2.payments.off_session_payment.succeeded" event.
// Sent immediately after a successful authorization.
type V2PaymentsOffSessionPaymentSucceededEvent struct {
	V2BaseEvent
	RelatedObject      RelatedObject `json:"related_object"`
	fetchRelatedObject func() (*V2PaymentsOffSessionPayment, error)
}

// FetchRelatedObject fetches the V2PaymentsOffSessionPayment related to the event.
func (e *V2PaymentsOffSessionPaymentSucceededEvent) FetchRelatedObject(ctx context.Context) (*V2PaymentsOffSessionPayment, error) {
	return e.fetchRelatedObject()
}

// V2PaymentsOffSessionPaymentSucceededEventNotification is the webhook payload you'll get when handling an event with type "v2.payments.off_session_payment.succeeded"
// Sent immediately after a successful authorization.
type V2PaymentsOffSessionPaymentSucceededEventNotification struct {
	V2EventNotification
	RelatedObject RelatedObject `json:"related_object"`
}

// GetEventNotification ensures we conform to `EventNotificationContainer`.
func (en *V2PaymentsOffSessionPaymentSucceededEventNotification) GetEventNotification() *V2EventNotification {
	return &en.V2EventNotification
}

// FetchEvent retrieves the V2PaymentsOffSessionPaymentSucceededEvent that created this Notification
func (en *V2PaymentsOffSessionPaymentSucceededEventNotification) FetchEvent(ctx context.Context) (*V2PaymentsOffSessionPaymentSucceededEvent, error) {
	evt, err := en.V2EventNotification.fetchEvent(ctx)
	if err != nil {
		return nil, err
	}
	return evt.(*V2PaymentsOffSessionPaymentSucceededEvent), nil
}

// FetchRelatedObject fetches the V2PaymentsOffSessionPayment related to the event.
func (en *V2PaymentsOffSessionPaymentSucceededEventNotification) FetchRelatedObject(ctx context.Context) (*V2PaymentsOffSessionPayment, error) {
	relatedObj := &V2PaymentsOffSessionPayment{}
	err := en.client.backend.Call(
		http.MethodGet, en.RelatedObject.URL, en.client.key, &eventNotificationParams{Params: Params{Context: ctx, StripeContext: en.Context}}, relatedObj)
	return relatedObj, err
}

// The request causes the error.
type V1BillingMeterErrorReportTriggeredEventDataReasonErrorTypeSampleErrorRequest struct {
	// The request idempotency key.
	Identifier string `json:"identifier"`
}

// A list of sample errors of this type.
type V1BillingMeterErrorReportTriggeredEventDataReasonErrorTypeSampleError struct {
	// The error message.
	ErrorMessage string `json:"error_message"`
	// The request causes the error.
	Request *V1BillingMeterErrorReportTriggeredEventDataReasonErrorTypeSampleErrorRequest `json:"request"`
}

// The error details.
type V1BillingMeterErrorReportTriggeredEventDataReasonErrorType struct {
	// Open Enum.
	Code V1BillingMeterErrorReportTriggeredEventDataReasonErrorTypeCode `json:"code"`
	// The number of errors of this type.
	ErrorCount int64 `json:"error_count"`
	// A list of sample errors of this type.
	SampleErrors []*V1BillingMeterErrorReportTriggeredEventDataReasonErrorTypeSampleError `json:"sample_errors"`
}

// This contains information about why meter error happens.
type V1BillingMeterErrorReportTriggeredEventDataReason struct {
	// The total error count within this window.
	ErrorCount int64 `json:"error_count"`
	// The error details.
	ErrorTypes []*V1BillingMeterErrorReportTriggeredEventDataReasonErrorType `json:"error_types"`
}

// Occurs when a Meter has invalid async usage events.
type V1BillingMeterErrorReportTriggeredEventData struct {
	// Extra field included in the event's `data` when fetched from /v2/events.
	DeveloperMessageSummary string `json:"developer_message_summary"`
	// This contains information about why meter error happens.
	Reason *V1BillingMeterErrorReportTriggeredEventDataReason `json:"reason"`
	// The end of the window that is encapsulated by this summary.
	ValidationEnd time.Time `json:"validation_end"`
	// The start of the window that is encapsulated by this summary.
	ValidationStart time.Time `json:"validation_start"`
}

// The request causes the error.
type V1BillingMeterNoMeterFoundEventDataReasonErrorTypeSampleErrorRequest struct {
	// The request idempotency key.
	Identifier string `json:"identifier"`
}

// A list of sample errors of this type.
type V1BillingMeterNoMeterFoundEventDataReasonErrorTypeSampleError struct {
	// The error message.
	ErrorMessage string `json:"error_message"`
	// The request causes the error.
	Request *V1BillingMeterNoMeterFoundEventDataReasonErrorTypeSampleErrorRequest `json:"request"`
}

// The error details.
type V1BillingMeterNoMeterFoundEventDataReasonErrorType struct {
	// Open Enum.
	Code V1BillingMeterNoMeterFoundEventDataReasonErrorTypeCode `json:"code"`
	// The number of errors of this type.
	ErrorCount int64 `json:"error_count"`
	// A list of sample errors of this type.
	SampleErrors []*V1BillingMeterNoMeterFoundEventDataReasonErrorTypeSampleError `json:"sample_errors"`
}

// This contains information about why meter error happens.
type V1BillingMeterNoMeterFoundEventDataReason struct {
	// The total error count within this window.
	ErrorCount int64 `json:"error_count"`
	// The error details.
	ErrorTypes []*V1BillingMeterNoMeterFoundEventDataReasonErrorType `json:"error_types"`
}

// Occurs when a Meter's id is missing or invalid in async usage events.
type V1BillingMeterNoMeterFoundEventData struct {
	// Extra field included in the event's `data` when fetched from /v2/events.
	DeveloperMessageSummary string `json:"developer_message_summary"`
	// This contains information about why meter error happens.
	Reason *V1BillingMeterNoMeterFoundEventDataReason `json:"reason"`
	// The end of the window that is encapsulated by this summary.
	ValidationEnd time.Time `json:"validation_end"`
	// The start of the window that is encapsulated by this summary.
	ValidationStart time.Time `json:"validation_start"`
}

// This event occurs when a bill setting is updated.
type V2BillingBillSettingUpdatedEventData struct {
	// Timestamp of when the object was updated.
	Updated time.Time `json:"updated"`
}

// Occurs when a billing Cadence generates an invoice.
type V2BillingCadenceBilledEventData struct {
	// The IDs of the invoices that were generated by the tick for this Cadence.
	Invoices []string `json:"invoices"`
}

// Occurs when a billing Cadence is created.
type V2BillingCadenceCreatedEventData struct {
	// Timestamp of when the object was created.
	Created time.Time `json:"created"`
}

// Occurs when a LicenseFeeVersion is created.
type V2BillingLicenseFeeVersionCreatedEventData struct {
	// The ID of the LicenseFee that the LicenseFeeVersion belongs to.
	LicenseFeeID string `json:"license_fee_id"`
}

// Occurs when a PricingPlanComponent is created.
type V2BillingPricingPlanComponentCreatedEventData struct {
	// The ID of the PricingPlan that the PricingPlanComponent belongs to.
	PricingPlanID string `json:"pricing_plan_id"`
}

// Occurs when a PricingPlanComponent is updated.
type V2BillingPricingPlanComponentUpdatedEventData struct {
	// The ID of the PricingPlan that the PricingPlanComponent belongs to.
	PricingPlanID string `json:"pricing_plan_id"`
}

// Occurs when a PricingPlanVersion is created.
type V2BillingPricingPlanVersionCreatedEventData struct {
	// The ID of the PricingPlan that the PricingPlanVersion belongs to.
	PricingPlanID string `json:"pricing_plan_id"`
}

// Occurs when a RateCard is created.
type V2BillingRateCardCreatedEventData struct {
	// Timestamp of when the object was created.
	Created time.Time `json:"created"`
}

// Occurs when a RateCardRate is created.
type V2BillingRateCardRateCreatedEventData struct {
	// The ID of the BillableItem which this Rate is associated with.
	BillableItem string `json:"billable_item"`
	// Timestamp of when the object was created.
	Created time.Time `json:"created"`
	// The ID of the RateCard which this Rate belongs to.
	RateCard string `json:"rate_card"`
	// The ID of the latest RateCard Version when the Rate was created.
	RateCardVersion string `json:"rate_card_version"`
}

// Occurs when a RateCardVersion is created.
type V2BillingRateCardVersionCreatedEventData struct {
	// The ID of the RateCard that the RateCardVersion belongs to.
	RateCardID string `json:"rate_card_id"`
}

// Occurs when the status of an Account's customer configuration capability is updated.
type V2CoreAccountIncludingConfigurationCustomerCapabilityStatusUpdatedEventData struct {
	// Open Enum. The capability which had its status updated.
	UpdatedCapability V2CoreAccountIncludingConfigurationCustomerCapabilityStatusUpdatedEventDataUpdatedCapability `json:"updated_capability"`
}

// Occurs when the status of an Account's merchant configuration capability is updated.
type V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventData struct {
	// Open Enum. The capability which had its status updated.
	UpdatedCapability V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventDataUpdatedCapability `json:"updated_capability"`
}

// Occurs when the status of an Account's recipient configuration capability is updated.
type V2CoreAccountIncludingConfigurationRecipientCapabilityStatusUpdatedEventData struct {
	// Open Enum. The capability which had its status updated.
	UpdatedCapability V2CoreAccountIncludingConfigurationRecipientCapabilityStatusUpdatedEventDataUpdatedCapability `json:"updated_capability"`
}

// Occurs when the status of an Account's storer configuration capability is updated.
type V2CoreAccountIncludingConfigurationStorerCapabilityStatusUpdatedEventData struct {
	// Open Enum. The capability which had its status updated.
	UpdatedCapability V2CoreAccountIncludingConfigurationStorerCapabilityStatusUpdatedEventDataUpdatedCapability `json:"updated_capability"`
}

// Occurs when the generated AccountLink is completed.
type V2CoreAccountLinkReturnedEventData struct {
	// The ID of the v2 account.
	AccountID string `json:"account_id"`
	// Configurations on the Account that was onboarded via the account link.
	Configurations []V2CoreAccountLinkReturnedEventDataConfiguration `json:"configurations"`
	// Open Enum. The use case type of the account link that has been completed.
	UseCase V2CoreAccountLinkReturnedEventDataUseCase `json:"use_case"`
}

// Occurs when a Person is created.
type V2CoreAccountPersonCreatedEventData struct {
	// The ID of the v2 account.
	AccountID string `json:"account_id"`
}

// Occurs when a Person is deleted.
type V2CoreAccountPersonDeletedEventData struct {
	// The ID of the v2 account.
	AccountID string `json:"account_id"`
}

// Occurs when a Person is updated.
type V2CoreAccountPersonUpdatedEventData struct {
	// The ID of the v2 account.
	AccountID string `json:"account_id"`
}

// The user impact.
type V2CoreHealthAPIErrorFiringEventDataImpact struct {
	// The canonical path.
	CanonicalPath string `json:"canonical_path"`
	// The error code.
	ErrorCode string `json:"error_code,omitempty"`
	// The HTTP method.
	HTTPMethod V2CoreHealthAPIErrorFiringEventDataImpactHTTPMethod `json:"http_method"`
	// The HTTP status.
	HTTPStatus string `json:"http_status"`
	// The number of impacted requests.
	ImpactedRequests int64 `json:"impacted_requests"`
}

// Occurs when an API error alert is firing.
type V2CoreHealthAPIErrorFiringEventData struct {
	// The alert ID.
	AlertID string `json:"alert_id"`
	// The grouping key for the alert.
	GroupingKey string `json:"grouping_key"`
	// The user impact.
	Impact *V2CoreHealthAPIErrorFiringEventDataImpact `json:"impact"`
	// The time when impact on the user experience was first detected.
	StartedAt time.Time `json:"started_at"`
	// A short description of the alert.
	Summary string `json:"summary"`
}

// The user impact.
type V2CoreHealthAPIErrorResolvedEventDataImpact struct {
	// The canonical path.
	CanonicalPath string `json:"canonical_path"`
	// The error code.
	ErrorCode string `json:"error_code,omitempty"`
	// The HTTP method.
	HTTPMethod V2CoreHealthAPIErrorResolvedEventDataImpactHTTPMethod `json:"http_method"`
	// The HTTP status.
	HTTPStatus string `json:"http_status"`
	// The number of impacted requests.
	ImpactedRequests int64 `json:"impacted_requests"`
}

// Occurs when an API error alert is resolved.
type V2CoreHealthAPIErrorResolvedEventData struct {
	// The grouping key for the alert.
	GroupingKey string `json:"grouping_key"`
	// The user impact.
	Impact *V2CoreHealthAPIErrorResolvedEventDataImpact `json:"impact"`
	// The time when the user experience has returned to expected levels.
	ResolvedAt time.Time `json:"resolved_at"`
	// The time when impact on the user experience was first detected.
	StartedAt time.Time `json:"started_at"`
	// A short description of the alert.
	Summary string `json:"summary"`
}

// The user impact.
type V2CoreHealthAPILatencyFiringEventDataImpact struct {
	// The canonical path.
	CanonicalPath string `json:"canonical_path"`
	// The HTTP method.
	HTTPMethod V2CoreHealthAPILatencyFiringEventDataImpactHTTPMethod `json:"http_method"`
	// The HTTP status.
	HTTPStatus string `json:"http_status"`
	// The number of impacted requests.
	ImpactedRequests int64 `json:"impacted_requests"`
}

// Occurs when an API latency alert is firing.
type V2CoreHealthAPILatencyFiringEventData struct {
	// The alert ID.
	AlertID string `json:"alert_id"`
	// The grouping key for the alert.
	GroupingKey string `json:"grouping_key"`
	// The user impact.
	Impact *V2CoreHealthAPILatencyFiringEventDataImpact `json:"impact"`
	// The time when impact on the user experience was first detected.
	StartedAt time.Time `json:"started_at"`
	// A short description of the alert.
	Summary string `json:"summary"`
}

// The user impact.
type V2CoreHealthAPILatencyResolvedEventDataImpact struct {
	// The canonical path.
	CanonicalPath string `json:"canonical_path"`
	// The HTTP method.
	HTTPMethod V2CoreHealthAPILatencyResolvedEventDataImpactHTTPMethod `json:"http_method"`
	// The HTTP status.
	HTTPStatus string `json:"http_status"`
	// The number of impacted requests.
	ImpactedRequests int64 `json:"impacted_requests"`
}

// Occurs when an API latency alert is resolved.
type V2CoreHealthAPILatencyResolvedEventData struct {
	// The grouping key for the alert.
	GroupingKey string `json:"grouping_key"`
	// The user impact.
	Impact *V2CoreHealthAPILatencyResolvedEventDataImpact `json:"impact"`
	// The time when the user experience has returned to expected levels.
	ResolvedAt time.Time `json:"resolved_at"`
	// The time when impact on the user experience was first detected.
	StartedAt time.Time `json:"started_at"`
	// A short description of the alert.
	Summary string `json:"summary"`
}

// Dimensions that describe what subset of payments are impacted.
type V2CoreHealthAuthorizationRateDropFiringEventDataImpactDimension struct {
	// The issuer dimension.
	Issuer string `json:"issuer,omitempty"`
	// The type of the dimension.
	Type V2CoreHealthAuthorizationRateDropFiringEventDataImpactDimensionType `json:"type"`
}

// The user impact.
type V2CoreHealthAuthorizationRateDropFiringEventDataImpact struct {
	// The type of the charge.
	ChargeType V2CoreHealthAuthorizationRateDropFiringEventDataImpactChargeType `json:"charge_type"`
	// The current authorization rate percentage.
	CurrentPercentage string `json:"current_percentage"`
	// Dimensions that describe what subset of payments are impacted.
	Dimensions []*V2CoreHealthAuthorizationRateDropFiringEventDataImpactDimension `json:"dimensions,omitempty"`
	// The type of the payment method.
	PaymentMethodType V2CoreHealthAuthorizationRateDropFiringEventDataImpactPaymentMethodType `json:"payment_method_type"`
	// The previous authorization rate percentage.
	PreviousPercentage string `json:"previous_percentage"`
}

// Occurs when an authorization rate drop alert is firing.
type V2CoreHealthAuthorizationRateDropFiringEventData struct {
	// The alert ID.
	AlertID string `json:"alert_id"`
	// The grouping key for the alert.
	GroupingKey string `json:"grouping_key"`
	// The user impact.
	Impact *V2CoreHealthAuthorizationRateDropFiringEventDataImpact `json:"impact"`
	// The time when impact on the user experience was first detected.
	StartedAt time.Time `json:"started_at"`
	// A short description of the alert.
	Summary string `json:"summary"`
}

// Dimensions that describe what subset of payments are impacted.
type V2CoreHealthAuthorizationRateDropResolvedEventDataImpactDimension struct {
	// The issuer dimension.
	Issuer string `json:"issuer,omitempty"`
	// The type of the dimension.
	Type V2CoreHealthAuthorizationRateDropResolvedEventDataImpactDimensionType `json:"type"`
}

// The user impact.
type V2CoreHealthAuthorizationRateDropResolvedEventDataImpact struct {
	// The type of the charge.
	ChargeType V2CoreHealthAuthorizationRateDropResolvedEventDataImpactChargeType `json:"charge_type"`
	// The current authorization rate percentage.
	CurrentPercentage string `json:"current_percentage"`
	// Dimensions that describe what subset of payments are impacted.
	Dimensions []*V2CoreHealthAuthorizationRateDropResolvedEventDataImpactDimension `json:"dimensions,omitempty"`
	// The type of the payment method.
	PaymentMethodType V2CoreHealthAuthorizationRateDropResolvedEventDataImpactPaymentMethodType `json:"payment_method_type"`
	// The previous authorization rate percentage.
	PreviousPercentage string `json:"previous_percentage"`
}

// Occurs when an authorization rate drop alert is resolved.
type V2CoreHealthAuthorizationRateDropResolvedEventData struct {
	// The grouping key for the alert.
	GroupingKey string `json:"grouping_key"`
	// The user impact.
	Impact *V2CoreHealthAuthorizationRateDropResolvedEventDataImpact `json:"impact"`
	// The time when the user experience has returned to expected levels.
	ResolvedAt time.Time `json:"resolved_at"`
	// The time when impact on the user experience was first detected.
	StartedAt time.Time `json:"started_at"`
	// A short description of the alert.
	Summary string `json:"summary"`
}

// The user impact.
type V2CoreHealthEventGenerationFailureResolvedEventDataImpact struct {
	// The account id the event should have been generated for. Only present when the account is a connected account.
	Account string `json:"account,omitempty"`
	// The type of event that Stripe failed to generate.
	EventType string `json:"event_type"`
	// Indicates if the event was for livemode or not.
	Livemode bool `json:"livemode"`
	// The number of webhooks that Stripe failed to create and deliver.
	MissingDeliveryAttempts int64 `json:"missing_delivery_attempts"`
	// The related object id.
	RelatedObjectID string `json:"related_object_id"`
}

// Occurs when an event generation failure alert is resolved.
type V2CoreHealthEventGenerationFailureResolvedEventData struct {
	// The alert ID.
	AlertID string `json:"alert_id"`
	// The grouping key for the alert.
	GroupingKey string `json:"grouping_key"`
	// The user impact.
	Impact *V2CoreHealthEventGenerationFailureResolvedEventDataImpact `json:"impact"`
	// The time when the user experience has returned to expected levels.
	ResolvedAt time.Time `json:"resolved_at"`
	// A short description of the alert.
	Summary string `json:"summary"`
}

// The user impact.
type V2CoreHealthFraudRateIncreasedEventDataImpact struct {
	// Fraud attack type.
	AttackType V2CoreHealthFraudRateIncreasedEventDataImpactAttackType `json:"attack_type"`
	// The number of impacted requests which are detected.
	ImpactedRequests int64 `json:"impacted_requests"`
	// Estimated aggregated amount for the impacted requests.
	RealizedFraudAmount Amount `json:"realized_fraud_amount"`
}

// Occurs when the fraud rate has increased.
type V2CoreHealthFraudRateIncreasedEventData struct {
	// The alert ID.
	AlertID string `json:"alert_id"`
	// The grouping key for the alert.
	GroupingKey string `json:"grouping_key"`
	// The user impact.
	Impact *V2CoreHealthFraudRateIncreasedEventDataImpact `json:"impact"`
	// The time when the user experience has returned to expected levels.
	ResolvedAt time.Time `json:"resolved_at,omitempty"`
	// The time when impact on the user experience was first detected.
	StartedAt time.Time `json:"started_at"`
	// A short description of the alert.
	Summary string `json:"summary"`
}

// The user impact.
type V2CoreHealthIssuingAuthorizationRequestErrorsFiringEventDataImpact struct {
	// Estimated aggregated amount for the approved requests.
	ApprovedAmount Amount `json:"approved_amount,omitempty"`
	// The number of approved requests which are impacted.
	ApprovedImpactedRequests int64 `json:"approved_impacted_requests,omitempty"`
	// Estimated aggregated amount for the declined requests.
	DeclinedAmount Amount `json:"declined_amount,omitempty"`
	// The number of declined requests which are impacted.
	DeclinedImpactedRequests int64 `json:"declined_impacted_requests,omitempty"`
}

// Occurs when an issuing authorization request errors alert is firing.
type V2CoreHealthIssuingAuthorizationRequestErrorsFiringEventData struct {
	// The grouping key for the alert.
	GroupingKey string `json:"grouping_key"`
	// The user impact.
	Impact *V2CoreHealthIssuingAuthorizationRequestErrorsFiringEventDataImpact `json:"impact"`
	// The time when impact on the user experience was first detected.
	StartedAt time.Time `json:"started_at"`
	// A short description of the alert.
	Summary string `json:"summary"`
}

// The user impact.
type V2CoreHealthIssuingAuthorizationRequestErrorsResolvedEventDataImpact struct {
	// Estimated aggregated amount for the approved requests.
	ApprovedAmount Amount `json:"approved_amount,omitempty"`
	// The number of approved requests which are impacted.
	ApprovedImpactedRequests int64 `json:"approved_impacted_requests,omitempty"`
	// Estimated aggregated amount for the declined requests.
	DeclinedAmount Amount `json:"declined_amount,omitempty"`
	// The number of declined requests which are impacted.
	DeclinedImpactedRequests int64 `json:"declined_impacted_requests,omitempty"`
}

// Occurs when an issuing authorization request errors alert is resolved.
type V2CoreHealthIssuingAuthorizationRequestErrorsResolvedEventData struct {
	// The grouping key for the alert.
	GroupingKey string `json:"grouping_key"`
	// The user impact.
	Impact *V2CoreHealthIssuingAuthorizationRequestErrorsResolvedEventDataImpact `json:"impact"`
	// The time when the user experience has returned to expected levels.
	ResolvedAt time.Time `json:"resolved_at"`
	// The time when impact on the user experience was first detected.
	StartedAt time.Time `json:"started_at"`
	// A short description of the alert.
	Summary string `json:"summary"`
}

// The user impact.
type V2CoreHealthIssuingAuthorizationRequestTimeoutFiringEventDataImpact struct {
	// Estimated aggregated amount for the approved requests.
	ApprovedAmount Amount `json:"approved_amount,omitempty"`
	// The number of approved requests which are impacted.
	ApprovedImpactedRequests int64 `json:"approved_impacted_requests,omitempty"`
	// Estimated aggregated amount for the declined requests.
	DeclinedAmount Amount `json:"declined_amount,omitempty"`
	// The number of declined requests which are impacted.
	DeclinedImpactedRequests int64 `json:"declined_impacted_requests,omitempty"`
}

// Occurs when an issuing authorization request timeout alert is firing.
type V2CoreHealthIssuingAuthorizationRequestTimeoutFiringEventData struct {
	// The alert ID.
	AlertID string `json:"alert_id"`
	// The grouping key for the alert.
	GroupingKey string `json:"grouping_key"`
	// The user impact.
	Impact *V2CoreHealthIssuingAuthorizationRequestTimeoutFiringEventDataImpact `json:"impact"`
	// The time when impact on the user experience was first detected.
	StartedAt time.Time `json:"started_at"`
	// A short description of the alert.
	Summary string `json:"summary"`
}

// The user impact.
type V2CoreHealthIssuingAuthorizationRequestTimeoutResolvedEventDataImpact struct {
	// Estimated aggregated amount for the approved requests.
	ApprovedAmount Amount `json:"approved_amount,omitempty"`
	// The number of approved requests which are impacted.
	ApprovedImpactedRequests int64 `json:"approved_impacted_requests,omitempty"`
	// Estimated aggregated amount for the declined requests.
	DeclinedAmount Amount `json:"declined_amount,omitempty"`
	// The number of declined requests which are impacted.
	DeclinedImpactedRequests int64 `json:"declined_impacted_requests,omitempty"`
}

// Occurs when an issuing authorization request timeout alert is resolved.
type V2CoreHealthIssuingAuthorizationRequestTimeoutResolvedEventData struct {
	// The grouping key for the alert.
	GroupingKey string `json:"grouping_key"`
	// The user impact.
	Impact *V2CoreHealthIssuingAuthorizationRequestTimeoutResolvedEventDataImpact `json:"impact"`
	// The time when the user experience has returned to expected levels.
	ResolvedAt time.Time `json:"resolved_at"`
	// The time when impact on the user experience was first detected.
	StartedAt time.Time `json:"started_at"`
	// A short description of the alert.
	Summary string `json:"summary"`
}

// The user impact.
type V2CoreHealthPaymentMethodErrorFiringEventDataImpact struct {
	// The returned error code.
	ErrorCode string `json:"error_code,omitempty"`
	// The number of impacted requests.
	ImpactedRequests int64 `json:"impacted_requests"`
	// The type of the payment method.
	PaymentMethodType V2CoreHealthPaymentMethodErrorFiringEventDataImpactPaymentMethodType `json:"payment_method_type"`
}

// Occurs when a payment method error alert is firing.
type V2CoreHealthPaymentMethodErrorFiringEventData struct {
	// The alert ID.
	AlertID string `json:"alert_id"`
	// The grouping key for the alert.
	GroupingKey string `json:"grouping_key"`
	// The user impact.
	Impact *V2CoreHealthPaymentMethodErrorFiringEventDataImpact `json:"impact"`
	// The time when impact on the user experience was first detected.
	StartedAt time.Time `json:"started_at"`
	// A short description of the alert.
	Summary string `json:"summary"`
}

// The user impact.
type V2CoreHealthPaymentMethodErrorResolvedEventDataImpact struct {
	// The returned error code.
	ErrorCode string `json:"error_code,omitempty"`
	// The number of impacted requests.
	ImpactedRequests int64 `json:"impacted_requests"`
	// The type of the payment method.
	PaymentMethodType V2CoreHealthPaymentMethodErrorResolvedEventDataImpactPaymentMethodType `json:"payment_method_type"`
}

// Occurs when a payment method error alert is resolved.
type V2CoreHealthPaymentMethodErrorResolvedEventData struct {
	// The grouping key for the alert.
	GroupingKey string `json:"grouping_key"`
	// The user impact.
	Impact *V2CoreHealthPaymentMethodErrorResolvedEventDataImpact `json:"impact"`
	// The time when the user experience has returned to expected levels.
	ResolvedAt time.Time `json:"resolved_at"`
	// The time when impact on the user experience was first detected.
	StartedAt time.Time `json:"started_at"`
	// A short description of the alert.
	Summary string `json:"summary"`
}

// The user impact.
type V2CoreHealthTrafficVolumeDropFiringEventDataImpact struct {
	// The total volume of payment requests within the latest observation time window.
	ActualTraffic int64 `json:"actual_traffic"`
	// The expected volume of payment requests within the latest observation time window.
	ExpectedTraffic int64 `json:"expected_traffic,omitempty"`
	// The size of the observation time window.
	TimeWindow string `json:"time_window"`
}

// Occurs when a traffic volume drop alert is firing.
type V2CoreHealthTrafficVolumeDropFiringEventData struct {
	// The alert ID.
	AlertID string `json:"alert_id"`
	// The grouping key for the alert.
	GroupingKey string `json:"grouping_key"`
	// The user impact.
	Impact *V2CoreHealthTrafficVolumeDropFiringEventDataImpact `json:"impact"`
	// The time when impact on the user experience was first detected.
	StartedAt time.Time `json:"started_at"`
	// A short description of the alert.
	Summary string `json:"summary"`
}

// The user impact.
type V2CoreHealthTrafficVolumeDropResolvedEventDataImpact struct {
	// The total volume of payment requests within the latest observation time window.
	ActualTraffic int64 `json:"actual_traffic"`
	// The expected volume of payment requests within the latest observation time window.
	ExpectedTraffic int64 `json:"expected_traffic,omitempty"`
	// The size of the observation time window.
	TimeWindow string `json:"time_window"`
}

// Occurs when a traffic volume drop alert is resolved.
type V2CoreHealthTrafficVolumeDropResolvedEventData struct {
	// The grouping key for the alert.
	GroupingKey string `json:"grouping_key"`
	// The user impact.
	Impact *V2CoreHealthTrafficVolumeDropResolvedEventDataImpact `json:"impact"`
	// The time when the user experience has returned to expected levels.
	ResolvedAt time.Time `json:"resolved_at"`
	// The time when impact on the user experience was first detected.
	StartedAt time.Time `json:"started_at"`
	// A short description of the alert.
	Summary string `json:"summary"`
}

// The user impact.
type V2CoreHealthWebhookLatencyFiringEventDataImpact struct {
	// The number of impacted requests.
	ImpactedRequests int64 `json:"impacted_requests"`
}

// Occurs when a webhook latency alert is firing.
type V2CoreHealthWebhookLatencyFiringEventData struct {
	// The alert ID.
	AlertID string `json:"alert_id"`
	// The grouping key for the alert.
	GroupingKey string `json:"grouping_key"`
	// The user impact.
	Impact *V2CoreHealthWebhookLatencyFiringEventDataImpact `json:"impact"`
	// The time when impact on the user experience was first detected.
	StartedAt time.Time `json:"started_at"`
	// A short description of the alert.
	Summary string `json:"summary"`
}

// The user impact.
type V2CoreHealthWebhookLatencyResolvedEventDataImpact struct {
	// The number of impacted requests.
	ImpactedRequests int64 `json:"impacted_requests"`
}

// Occurs when a webhook latency alert is resolved.
type V2CoreHealthWebhookLatencyResolvedEventData struct {
	// The grouping key for the alert.
	GroupingKey string `json:"grouping_key"`
	// The user impact.
	Impact *V2CoreHealthWebhookLatencyResolvedEventDataImpact `json:"impact"`
	// The time when the user experience has returned to expected levels.
	ResolvedAt time.Time `json:"resolved_at"`
	// The time when impact on the user experience was first detected.
	StartedAt time.Time `json:"started_at"`
	// A short description of the alert.
	Summary string `json:"summary"`
}

// Occurs when an InboundTransfer's funds are made available.
type V2MoneyManagementInboundTransferAvailableEventData struct {
	// The transaction ID of the received credit.
	TransactionID string `json:"transaction_id"`
}

// Occurs when a ReceivedCredit's funds are received and are available in your balance.
type V2MoneyManagementReceivedCreditAvailableEventData struct {
	// The transaction ID of the received credit.
	TransactionID string `json:"transaction_id"`
}

// ConvertRawEvent converts a raw event to a concrete event type.
// If the event type is not known, it returns the raw event.
func ConvertRawEvent(event *V2RawEvent, backend Backend, key string) (V2Event, error) {
	switch event.Type {
	case "v1.account.updated":
		result := &V1AccountUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Account, error) {
			v := &Account{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.application_fee.created":
		result := &V1ApplicationFeeCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*ApplicationFee, error) {
			v := &ApplicationFee{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.application_fee.refunded":
		result := &V1ApplicationFeeRefundedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*ApplicationFee, error) {
			v := &ApplicationFee{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.billing.meter.error_report_triggered":
		result := &V1BillingMeterErrorReportTriggeredEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*BillingMeter, error) {
			v := &BillingMeter{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		if err := json.Unmarshal(*event.Data, &result.Data); err != nil {
			return nil, err
		}
		return result, nil
	case "v1.billing.meter.no_meter_found":
		result := &V1BillingMeterNoMeterFoundEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		if err := json.Unmarshal(*event.Data, &result.Data); err != nil {
			return nil, err
		}
		return result, nil
	case "v1.billing_portal.configuration.created":
		result := &V1BillingPortalConfigurationCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*BillingPortalConfiguration, error) {
			v := &BillingPortalConfiguration{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.billing_portal.configuration.updated":
		result := &V1BillingPortalConfigurationUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*BillingPortalConfiguration, error) {
			v := &BillingPortalConfiguration{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.capability.updated":
		result := &V1CapabilityUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Capability, error) {
			v := &Capability{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.charge.captured":
		result := &V1ChargeCapturedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Charge, error) {
			v := &Charge{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.charge.dispute.closed":
		result := &V1ChargeDisputeClosedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Dispute, error) {
			v := &Dispute{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.charge.dispute.created":
		result := &V1ChargeDisputeCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Dispute, error) {
			v := &Dispute{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.charge.dispute.funds_reinstated":
		result := &V1ChargeDisputeFundsReinstatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Dispute, error) {
			v := &Dispute{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.charge.dispute.funds_withdrawn":
		result := &V1ChargeDisputeFundsWithdrawnEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Dispute, error) {
			v := &Dispute{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.charge.dispute.updated":
		result := &V1ChargeDisputeUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Dispute, error) {
			v := &Dispute{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.charge.expired":
		result := &V1ChargeExpiredEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Charge, error) {
			v := &Charge{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.charge.failed":
		result := &V1ChargeFailedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Charge, error) {
			v := &Charge{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.charge.pending":
		result := &V1ChargePendingEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Charge, error) {
			v := &Charge{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.charge.refund.updated":
		result := &V1ChargeRefundUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Refund, error) {
			v := &Refund{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.charge.refunded":
		result := &V1ChargeRefundedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Charge, error) {
			v := &Charge{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.charge.succeeded":
		result := &V1ChargeSucceededEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Charge, error) {
			v := &Charge{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.charge.updated":
		result := &V1ChargeUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Charge, error) {
			v := &Charge{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.checkout.session.async_payment_failed":
		result := &V1CheckoutSessionAsyncPaymentFailedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*CheckoutSession, error) {
			v := &CheckoutSession{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.checkout.session.async_payment_succeeded":
		result := &V1CheckoutSessionAsyncPaymentSucceededEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*CheckoutSession, error) {
			v := &CheckoutSession{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.checkout.session.completed":
		result := &V1CheckoutSessionCompletedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*CheckoutSession, error) {
			v := &CheckoutSession{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.checkout.session.expired":
		result := &V1CheckoutSessionExpiredEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*CheckoutSession, error) {
			v := &CheckoutSession{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.climate.order.canceled":
		result := &V1ClimateOrderCanceledEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*ClimateOrder, error) {
			v := &ClimateOrder{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.climate.order.created":
		result := &V1ClimateOrderCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*ClimateOrder, error) {
			v := &ClimateOrder{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.climate.order.delayed":
		result := &V1ClimateOrderDelayedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*ClimateOrder, error) {
			v := &ClimateOrder{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.climate.order.delivered":
		result := &V1ClimateOrderDeliveredEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*ClimateOrder, error) {
			v := &ClimateOrder{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.climate.order.product_substituted":
		result := &V1ClimateOrderProductSubstitutedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*ClimateOrder, error) {
			v := &ClimateOrder{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.climate.product.created":
		result := &V1ClimateProductCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*ClimateProduct, error) {
			v := &ClimateProduct{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.climate.product.pricing_updated":
		result := &V1ClimateProductPricingUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*ClimateProduct, error) {
			v := &ClimateProduct{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.coupon.created":
		result := &V1CouponCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Coupon, error) {
			v := &Coupon{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.coupon.deleted":
		result := &V1CouponDeletedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Coupon, error) {
			v := &Coupon{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.coupon.updated":
		result := &V1CouponUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Coupon, error) {
			v := &Coupon{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.credit_note.created":
		result := &V1CreditNoteCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*CreditNote, error) {
			v := &CreditNote{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.credit_note.updated":
		result := &V1CreditNoteUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*CreditNote, error) {
			v := &CreditNote{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.credit_note.voided":
		result := &V1CreditNoteVoidedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*CreditNote, error) {
			v := &CreditNote{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.customer.created":
		result := &V1CustomerCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Customer, error) {
			v := &Customer{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.customer.deleted":
		result := &V1CustomerDeletedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Customer, error) {
			v := &Customer{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.customer.discount.created":
		result := &V1CustomerDiscountCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Discount, error) {
			v := &Discount{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.customer.discount.deleted":
		result := &V1CustomerDiscountDeletedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Discount, error) {
			v := &Discount{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.customer.discount.updated":
		result := &V1CustomerDiscountUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Discount, error) {
			v := &Discount{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.customer.subscription.created":
		result := &V1CustomerSubscriptionCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Subscription, error) {
			v := &Subscription{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.customer.subscription.deleted":
		result := &V1CustomerSubscriptionDeletedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Subscription, error) {
			v := &Subscription{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.customer.subscription.paused":
		result := &V1CustomerSubscriptionPausedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Subscription, error) {
			v := &Subscription{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.customer.subscription.pending_update_applied":
		result := &V1CustomerSubscriptionPendingUpdateAppliedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Subscription, error) {
			v := &Subscription{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.customer.subscription.pending_update_expired":
		result := &V1CustomerSubscriptionPendingUpdateExpiredEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Subscription, error) {
			v := &Subscription{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.customer.subscription.resumed":
		result := &V1CustomerSubscriptionResumedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Subscription, error) {
			v := &Subscription{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.customer.subscription.trial_will_end":
		result := &V1CustomerSubscriptionTrialWillEndEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Subscription, error) {
			v := &Subscription{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.customer.subscription.updated":
		result := &V1CustomerSubscriptionUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Subscription, error) {
			v := &Subscription{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.customer.tax_id.created":
		result := &V1CustomerTaxIDCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*TaxID, error) {
			v := &TaxID{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.customer.tax_id.deleted":
		result := &V1CustomerTaxIDDeletedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*TaxID, error) {
			v := &TaxID{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.customer.tax_id.updated":
		result := &V1CustomerTaxIDUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*TaxID, error) {
			v := &TaxID{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.customer.updated":
		result := &V1CustomerUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Customer, error) {
			v := &Customer{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.file.created":
		result := &V1FileCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*File, error) {
			v := &File{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.financial_connections.account.created":
		result := &V1FinancialConnectionsAccountCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*FinancialConnectionsAccount, error) {
			v := &FinancialConnectionsAccount{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.financial_connections.account.deactivated":
		result := &V1FinancialConnectionsAccountDeactivatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*FinancialConnectionsAccount, error) {
			v := &FinancialConnectionsAccount{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.financial_connections.account.disconnected":
		result := &V1FinancialConnectionsAccountDisconnectedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*FinancialConnectionsAccount, error) {
			v := &FinancialConnectionsAccount{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.financial_connections.account.reactivated":
		result := &V1FinancialConnectionsAccountReactivatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*FinancialConnectionsAccount, error) {
			v := &FinancialConnectionsAccount{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.financial_connections.account.refreshed_balance":
		result := &V1FinancialConnectionsAccountRefreshedBalanceEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*FinancialConnectionsAccount, error) {
			v := &FinancialConnectionsAccount{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.financial_connections.account.refreshed_ownership":
		result := &V1FinancialConnectionsAccountRefreshedOwnershipEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*FinancialConnectionsAccount, error) {
			v := &FinancialConnectionsAccount{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.financial_connections.account.refreshed_transactions":
		result := &V1FinancialConnectionsAccountRefreshedTransactionsEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*FinancialConnectionsAccount, error) {
			v := &FinancialConnectionsAccount{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.identity.verification_session.canceled":
		result := &V1IdentityVerificationSessionCanceledEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*IdentityVerificationSession, error) {
			v := &IdentityVerificationSession{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.identity.verification_session.created":
		result := &V1IdentityVerificationSessionCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*IdentityVerificationSession, error) {
			v := &IdentityVerificationSession{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.identity.verification_session.processing":
		result := &V1IdentityVerificationSessionProcessingEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*IdentityVerificationSession, error) {
			v := &IdentityVerificationSession{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.identity.verification_session.redacted":
		result := &V1IdentityVerificationSessionRedactedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*IdentityVerificationSession, error) {
			v := &IdentityVerificationSession{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.identity.verification_session.requires_input":
		result := &V1IdentityVerificationSessionRequiresInputEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*IdentityVerificationSession, error) {
			v := &IdentityVerificationSession{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.identity.verification_session.verified":
		result := &V1IdentityVerificationSessionVerifiedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*IdentityVerificationSession, error) {
			v := &IdentityVerificationSession{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.invoice.created":
		result := &V1InvoiceCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Invoice, error) {
			v := &Invoice{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.invoice.deleted":
		result := &V1InvoiceDeletedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Invoice, error) {
			v := &Invoice{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.invoice.finalization_failed":
		result := &V1InvoiceFinalizationFailedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Invoice, error) {
			v := &Invoice{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.invoice.finalized":
		result := &V1InvoiceFinalizedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Invoice, error) {
			v := &Invoice{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.invoice.marked_uncollectible":
		result := &V1InvoiceMarkedUncollectibleEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Invoice, error) {
			v := &Invoice{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.invoice.overdue":
		result := &V1InvoiceOverdueEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Invoice, error) {
			v := &Invoice{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.invoice.overpaid":
		result := &V1InvoiceOverpaidEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Invoice, error) {
			v := &Invoice{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.invoice.paid":
		result := &V1InvoicePaidEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Invoice, error) {
			v := &Invoice{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.invoice.payment_action_required":
		result := &V1InvoicePaymentActionRequiredEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Invoice, error) {
			v := &Invoice{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.invoice.payment_failed":
		result := &V1InvoicePaymentFailedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Invoice, error) {
			v := &Invoice{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.invoice.payment_succeeded":
		result := &V1InvoicePaymentSucceededEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Invoice, error) {
			v := &Invoice{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.invoice.sent":
		result := &V1InvoiceSentEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Invoice, error) {
			v := &Invoice{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.invoice.upcoming":
		result := &V1InvoiceUpcomingEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Invoice, error) {
			v := &Invoice{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.invoice.updated":
		result := &V1InvoiceUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Invoice, error) {
			v := &Invoice{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.invoice.voided":
		result := &V1InvoiceVoidedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Invoice, error) {
			v := &Invoice{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.invoice.will_be_due":
		result := &V1InvoiceWillBeDueEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Invoice, error) {
			v := &Invoice{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.invoice_payment.paid":
		result := &V1InvoicePaymentPaidEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*InvoicePayment, error) {
			v := &InvoicePayment{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.invoiceitem.created":
		result := &V1InvoiceitemCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*InvoiceItem, error) {
			v := &InvoiceItem{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.invoiceitem.deleted":
		result := &V1InvoiceitemDeletedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*InvoiceItem, error) {
			v := &InvoiceItem{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.issuing_authorization.created":
		result := &V1IssuingAuthorizationCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*IssuingAuthorization, error) {
			v := &IssuingAuthorization{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.issuing_authorization.request":
		result := &V1IssuingAuthorizationRequestEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*IssuingAuthorization, error) {
			v := &IssuingAuthorization{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.issuing_authorization.updated":
		result := &V1IssuingAuthorizationUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*IssuingAuthorization, error) {
			v := &IssuingAuthorization{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.issuing_card.created":
		result := &V1IssuingCardCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*IssuingCard, error) {
			v := &IssuingCard{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.issuing_card.updated":
		result := &V1IssuingCardUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*IssuingCard, error) {
			v := &IssuingCard{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.issuing_cardholder.created":
		result := &V1IssuingCardholderCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*IssuingCardholder, error) {
			v := &IssuingCardholder{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.issuing_cardholder.updated":
		result := &V1IssuingCardholderUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*IssuingCardholder, error) {
			v := &IssuingCardholder{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.issuing_dispute.closed":
		result := &V1IssuingDisputeClosedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*IssuingDispute, error) {
			v := &IssuingDispute{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.issuing_dispute.created":
		result := &V1IssuingDisputeCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*IssuingDispute, error) {
			v := &IssuingDispute{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.issuing_dispute.funds_reinstated":
		result := &V1IssuingDisputeFundsReinstatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*IssuingDispute, error) {
			v := &IssuingDispute{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.issuing_dispute.funds_rescinded":
		result := &V1IssuingDisputeFundsRescindedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*IssuingDispute, error) {
			v := &IssuingDispute{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.issuing_dispute.submitted":
		result := &V1IssuingDisputeSubmittedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*IssuingDispute, error) {
			v := &IssuingDispute{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.issuing_dispute.updated":
		result := &V1IssuingDisputeUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*IssuingDispute, error) {
			v := &IssuingDispute{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.issuing_personalization_design.activated":
		result := &V1IssuingPersonalizationDesignActivatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*IssuingPersonalizationDesign, error) {
			v := &IssuingPersonalizationDesign{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.issuing_personalization_design.deactivated":
		result := &V1IssuingPersonalizationDesignDeactivatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*IssuingPersonalizationDesign, error) {
			v := &IssuingPersonalizationDesign{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.issuing_personalization_design.rejected":
		result := &V1IssuingPersonalizationDesignRejectedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*IssuingPersonalizationDesign, error) {
			v := &IssuingPersonalizationDesign{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.issuing_personalization_design.updated":
		result := &V1IssuingPersonalizationDesignUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*IssuingPersonalizationDesign, error) {
			v := &IssuingPersonalizationDesign{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.issuing_token.created":
		result := &V1IssuingTokenCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*IssuingToken, error) {
			v := &IssuingToken{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.issuing_token.updated":
		result := &V1IssuingTokenUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*IssuingToken, error) {
			v := &IssuingToken{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.issuing_transaction.created":
		result := &V1IssuingTransactionCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*IssuingTransaction, error) {
			v := &IssuingTransaction{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.issuing_transaction.purchase_details_receipt_updated":
		result := &V1IssuingTransactionPurchaseDetailsReceiptUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*IssuingTransaction, error) {
			v := &IssuingTransaction{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.issuing_transaction.updated":
		result := &V1IssuingTransactionUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*IssuingTransaction, error) {
			v := &IssuingTransaction{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.mandate.updated":
		result := &V1MandateUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Mandate, error) {
			v := &Mandate{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.payment_intent.amount_capturable_updated":
		result := &V1PaymentIntentAmountCapturableUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*PaymentIntent, error) {
			v := &PaymentIntent{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.payment_intent.canceled":
		result := &V1PaymentIntentCanceledEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*PaymentIntent, error) {
			v := &PaymentIntent{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.payment_intent.created":
		result := &V1PaymentIntentCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*PaymentIntent, error) {
			v := &PaymentIntent{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.payment_intent.partially_funded":
		result := &V1PaymentIntentPartiallyFundedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*PaymentIntent, error) {
			v := &PaymentIntent{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.payment_intent.payment_failed":
		result := &V1PaymentIntentPaymentFailedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*PaymentIntent, error) {
			v := &PaymentIntent{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.payment_intent.processing":
		result := &V1PaymentIntentProcessingEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*PaymentIntent, error) {
			v := &PaymentIntent{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.payment_intent.requires_action":
		result := &V1PaymentIntentRequiresActionEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*PaymentIntent, error) {
			v := &PaymentIntent{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.payment_intent.succeeded":
		result := &V1PaymentIntentSucceededEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*PaymentIntent, error) {
			v := &PaymentIntent{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.payment_link.created":
		result := &V1PaymentLinkCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*PaymentLink, error) {
			v := &PaymentLink{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.payment_link.updated":
		result := &V1PaymentLinkUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*PaymentLink, error) {
			v := &PaymentLink{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.payment_method.attached":
		result := &V1PaymentMethodAttachedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*PaymentMethod, error) {
			v := &PaymentMethod{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.payment_method.automatically_updated":
		result := &V1PaymentMethodAutomaticallyUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*PaymentMethod, error) {
			v := &PaymentMethod{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.payment_method.detached":
		result := &V1PaymentMethodDetachedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*PaymentMethod, error) {
			v := &PaymentMethod{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.payment_method.updated":
		result := &V1PaymentMethodUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*PaymentMethod, error) {
			v := &PaymentMethod{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.payout.canceled":
		result := &V1PayoutCanceledEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Payout, error) {
			v := &Payout{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.payout.created":
		result := &V1PayoutCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Payout, error) {
			v := &Payout{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.payout.failed":
		result := &V1PayoutFailedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Payout, error) {
			v := &Payout{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.payout.paid":
		result := &V1PayoutPaidEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Payout, error) {
			v := &Payout{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.payout.reconciliation_completed":
		result := &V1PayoutReconciliationCompletedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Payout, error) {
			v := &Payout{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.payout.updated":
		result := &V1PayoutUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Payout, error) {
			v := &Payout{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.person.created":
		result := &V1PersonCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Person, error) {
			v := &Person{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.person.deleted":
		result := &V1PersonDeletedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Person, error) {
			v := &Person{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.person.updated":
		result := &V1PersonUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Person, error) {
			v := &Person{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.plan.created":
		result := &V1PlanCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Plan, error) {
			v := &Plan{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.plan.deleted":
		result := &V1PlanDeletedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Plan, error) {
			v := &Plan{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.plan.updated":
		result := &V1PlanUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Plan, error) {
			v := &Plan{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.price.created":
		result := &V1PriceCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Price, error) {
			v := &Price{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.price.deleted":
		result := &V1PriceDeletedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Price, error) {
			v := &Price{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.price.updated":
		result := &V1PriceUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Price, error) {
			v := &Price{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.product.created":
		result := &V1ProductCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Product, error) {
			v := &Product{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.product.deleted":
		result := &V1ProductDeletedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Product, error) {
			v := &Product{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.product.updated":
		result := &V1ProductUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Product, error) {
			v := &Product{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.promotion_code.created":
		result := &V1PromotionCodeCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*PromotionCode, error) {
			v := &PromotionCode{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.promotion_code.updated":
		result := &V1PromotionCodeUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*PromotionCode, error) {
			v := &PromotionCode{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.quote.accepted":
		result := &V1QuoteAcceptedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Quote, error) {
			v := &Quote{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.quote.canceled":
		result := &V1QuoteCanceledEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Quote, error) {
			v := &Quote{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.quote.created":
		result := &V1QuoteCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Quote, error) {
			v := &Quote{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.quote.finalized":
		result := &V1QuoteFinalizedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Quote, error) {
			v := &Quote{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.radar.early_fraud_warning.created":
		result := &V1RadarEarlyFraudWarningCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*RadarEarlyFraudWarning, error) {
			v := &RadarEarlyFraudWarning{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.radar.early_fraud_warning.updated":
		result := &V1RadarEarlyFraudWarningUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*RadarEarlyFraudWarning, error) {
			v := &RadarEarlyFraudWarning{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.refund.created":
		result := &V1RefundCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Refund, error) {
			v := &Refund{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.refund.failed":
		result := &V1RefundFailedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Refund, error) {
			v := &Refund{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.refund.updated":
		result := &V1RefundUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Refund, error) {
			v := &Refund{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.review.closed":
		result := &V1ReviewClosedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Review, error) {
			v := &Review{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.review.opened":
		result := &V1ReviewOpenedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Review, error) {
			v := &Review{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.setup_intent.canceled":
		result := &V1SetupIntentCanceledEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*SetupIntent, error) {
			v := &SetupIntent{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.setup_intent.created":
		result := &V1SetupIntentCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*SetupIntent, error) {
			v := &SetupIntent{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.setup_intent.requires_action":
		result := &V1SetupIntentRequiresActionEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*SetupIntent, error) {
			v := &SetupIntent{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.setup_intent.setup_failed":
		result := &V1SetupIntentSetupFailedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*SetupIntent, error) {
			v := &SetupIntent{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.setup_intent.succeeded":
		result := &V1SetupIntentSucceededEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*SetupIntent, error) {
			v := &SetupIntent{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.sigma.scheduled_query_run.created":
		result := &V1SigmaScheduledQueryRunCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*SigmaScheduledQueryRun, error) {
			v := &SigmaScheduledQueryRun{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.source.canceled":
		result := &V1SourceCanceledEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Source, error) {
			v := &Source{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.source.chargeable":
		result := &V1SourceChargeableEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Source, error) {
			v := &Source{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.source.failed":
		result := &V1SourceFailedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Source, error) {
			v := &Source{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.source.refund_attributes_required":
		result := &V1SourceRefundAttributesRequiredEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Source, error) {
			v := &Source{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.subscription_schedule.aborted":
		result := &V1SubscriptionScheduleAbortedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*SubscriptionSchedule, error) {
			v := &SubscriptionSchedule{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.subscription_schedule.canceled":
		result := &V1SubscriptionScheduleCanceledEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*SubscriptionSchedule, error) {
			v := &SubscriptionSchedule{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.subscription_schedule.completed":
		result := &V1SubscriptionScheduleCompletedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*SubscriptionSchedule, error) {
			v := &SubscriptionSchedule{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.subscription_schedule.created":
		result := &V1SubscriptionScheduleCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*SubscriptionSchedule, error) {
			v := &SubscriptionSchedule{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.subscription_schedule.expiring":
		result := &V1SubscriptionScheduleExpiringEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*SubscriptionSchedule, error) {
			v := &SubscriptionSchedule{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.subscription_schedule.released":
		result := &V1SubscriptionScheduleReleasedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*SubscriptionSchedule, error) {
			v := &SubscriptionSchedule{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.subscription_schedule.updated":
		result := &V1SubscriptionScheduleUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*SubscriptionSchedule, error) {
			v := &SubscriptionSchedule{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.tax_rate.created":
		result := &V1TaxRateCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*TaxRate, error) {
			v := &TaxRate{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.tax_rate.updated":
		result := &V1TaxRateUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*TaxRate, error) {
			v := &TaxRate{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.terminal.reader.action_failed":
		result := &V1TerminalReaderActionFailedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*TerminalReader, error) {
			v := &TerminalReader{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.terminal.reader.action_succeeded":
		result := &V1TerminalReaderActionSucceededEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*TerminalReader, error) {
			v := &TerminalReader{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.terminal.reader.action_updated":
		result := &V1TerminalReaderActionUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*TerminalReader, error) {
			v := &TerminalReader{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.test_helpers.test_clock.advancing":
		result := &V1TestHelpersTestClockAdvancingEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*TestHelpersTestClock, error) {
			v := &TestHelpersTestClock{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.test_helpers.test_clock.created":
		result := &V1TestHelpersTestClockCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*TestHelpersTestClock, error) {
			v := &TestHelpersTestClock{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.test_helpers.test_clock.deleted":
		result := &V1TestHelpersTestClockDeletedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*TestHelpersTestClock, error) {
			v := &TestHelpersTestClock{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.test_helpers.test_clock.internal_failure":
		result := &V1TestHelpersTestClockInternalFailureEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*TestHelpersTestClock, error) {
			v := &TestHelpersTestClock{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.test_helpers.test_clock.ready":
		result := &V1TestHelpersTestClockReadyEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*TestHelpersTestClock, error) {
			v := &TestHelpersTestClock{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.topup.canceled":
		result := &V1TopupCanceledEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Topup, error) {
			v := &Topup{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.topup.created":
		result := &V1TopupCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Topup, error) {
			v := &Topup{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.topup.failed":
		result := &V1TopupFailedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Topup, error) {
			v := &Topup{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.topup.reversed":
		result := &V1TopupReversedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Topup, error) {
			v := &Topup{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.topup.succeeded":
		result := &V1TopupSucceededEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Topup, error) {
			v := &Topup{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.transfer.created":
		result := &V1TransferCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Transfer, error) {
			v := &Transfer{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.transfer.reversed":
		result := &V1TransferReversedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Transfer, error) {
			v := &Transfer{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v1.transfer.updated":
		result := &V1TransferUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*Transfer, error) {
			v := &Transfer{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.billing.bill_setting.updated":
		result := &V2BillingBillSettingUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2BillingBillSetting, error) {
			v := &V2BillingBillSetting{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		if err := json.Unmarshal(*event.Data, &result.Data); err != nil {
			return nil, err
		}
		return result, nil
	case "v2.billing.cadence.billed":
		result := &V2BillingCadenceBilledEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2BillingCadence, error) {
			v := &V2BillingCadence{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		if err := json.Unmarshal(*event.Data, &result.Data); err != nil {
			return nil, err
		}
		return result, nil
	case "v2.billing.cadence.canceled":
		result := &V2BillingCadenceCanceledEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2BillingCadence, error) {
			v := &V2BillingCadence{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.billing.cadence.created":
		result := &V2BillingCadenceCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2BillingCadence, error) {
			v := &V2BillingCadence{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		if err := json.Unmarshal(*event.Data, &result.Data); err != nil {
			return nil, err
		}
		return result, nil
	case "v2.billing.license_fee.created":
		result := &V2BillingLicenseFeeCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2BillingLicenseFee, error) {
			v := &V2BillingLicenseFee{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.billing.license_fee.updated":
		result := &V2BillingLicenseFeeUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2BillingLicenseFee, error) {
			v := &V2BillingLicenseFee{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.billing.license_fee_version.created":
		result := &V2BillingLicenseFeeVersionCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2BillingLicenseFeeVersion, error) {
			v := &V2BillingLicenseFeeVersion{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		if err := json.Unmarshal(*event.Data, &result.Data); err != nil {
			return nil, err
		}
		return result, nil
	case "v2.billing.licensed_item.created":
		result := &V2BillingLicensedItemCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2BillingLicensedItem, error) {
			v := &V2BillingLicensedItem{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.billing.licensed_item.updated":
		result := &V2BillingLicensedItemUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2BillingLicensedItem, error) {
			v := &V2BillingLicensedItem{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.billing.metered_item.created":
		result := &V2BillingMeteredItemCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2BillingMeteredItem, error) {
			v := &V2BillingMeteredItem{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.billing.metered_item.updated":
		result := &V2BillingMeteredItemUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2BillingMeteredItem, error) {
			v := &V2BillingMeteredItem{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.billing.pricing_plan.created":
		result := &V2BillingPricingPlanCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2BillingPricingPlan, error) {
			v := &V2BillingPricingPlan{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.billing.pricing_plan.updated":
		result := &V2BillingPricingPlanUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2BillingPricingPlan, error) {
			v := &V2BillingPricingPlan{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.billing.pricing_plan_component.created":
		result := &V2BillingPricingPlanComponentCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2BillingPricingPlanComponent, error) {
			v := &V2BillingPricingPlanComponent{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		if err := json.Unmarshal(*event.Data, &result.Data); err != nil {
			return nil, err
		}
		return result, nil
	case "v2.billing.pricing_plan_component.updated":
		result := &V2BillingPricingPlanComponentUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2BillingPricingPlanComponent, error) {
			v := &V2BillingPricingPlanComponent{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		if err := json.Unmarshal(*event.Data, &result.Data); err != nil {
			return nil, err
		}
		return result, nil
	case "v2.billing.pricing_plan_subscription.collection_awaiting_customer_action":
		result := &V2BillingPricingPlanSubscriptionCollectionAwaitingCustomerActionEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2BillingPricingPlanSubscription, error) {
			v := &V2BillingPricingPlanSubscription{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.billing.pricing_plan_subscription.collection_current":
		result := &V2BillingPricingPlanSubscriptionCollectionCurrentEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2BillingPricingPlanSubscription, error) {
			v := &V2BillingPricingPlanSubscription{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.billing.pricing_plan_subscription.collection_past_due":
		result := &V2BillingPricingPlanSubscriptionCollectionPastDueEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2BillingPricingPlanSubscription, error) {
			v := &V2BillingPricingPlanSubscription{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.billing.pricing_plan_subscription.collection_paused":
		result := &V2BillingPricingPlanSubscriptionCollectionPausedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2BillingPricingPlanSubscription, error) {
			v := &V2BillingPricingPlanSubscription{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.billing.pricing_plan_subscription.collection_unpaid":
		result := &V2BillingPricingPlanSubscriptionCollectionUnpaidEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2BillingPricingPlanSubscription, error) {
			v := &V2BillingPricingPlanSubscription{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.billing.pricing_plan_subscription.servicing_activated":
		result := &V2BillingPricingPlanSubscriptionServicingActivatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2BillingPricingPlanSubscription, error) {
			v := &V2BillingPricingPlanSubscription{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.billing.pricing_plan_subscription.servicing_canceled":
		result := &V2BillingPricingPlanSubscriptionServicingCanceledEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2BillingPricingPlanSubscription, error) {
			v := &V2BillingPricingPlanSubscription{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.billing.pricing_plan_subscription.servicing_paused":
		result := &V2BillingPricingPlanSubscriptionServicingPausedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2BillingPricingPlanSubscription, error) {
			v := &V2BillingPricingPlanSubscription{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.billing.pricing_plan_version.created":
		result := &V2BillingPricingPlanVersionCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2BillingPricingPlanVersion, error) {
			v := &V2BillingPricingPlanVersion{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		if err := json.Unmarshal(*event.Data, &result.Data); err != nil {
			return nil, err
		}
		return result, nil
	case "v2.billing.rate_card.created":
		result := &V2BillingRateCardCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2BillingRateCard, error) {
			v := &V2BillingRateCard{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		if err := json.Unmarshal(*event.Data, &result.Data); err != nil {
			return nil, err
		}
		return result, nil
	case "v2.billing.rate_card.updated":
		result := &V2BillingRateCardUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2BillingRateCard, error) {
			v := &V2BillingRateCard{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.billing.rate_card_rate.created":
		result := &V2BillingRateCardRateCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2BillingRateCardRate, error) {
			v := &V2BillingRateCardRate{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		if err := json.Unmarshal(*event.Data, &result.Data); err != nil {
			return nil, err
		}
		return result, nil
	case "v2.billing.rate_card_subscription.activated":
		result := &V2BillingRateCardSubscriptionActivatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2BillingRateCardSubscription, error) {
			v := &V2BillingRateCardSubscription{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.billing.rate_card_subscription.canceled":
		result := &V2BillingRateCardSubscriptionCanceledEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2BillingRateCardSubscription, error) {
			v := &V2BillingRateCardSubscription{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.billing.rate_card_subscription.collection_awaiting_customer_action":
		result := &V2BillingRateCardSubscriptionCollectionAwaitingCustomerActionEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2BillingRateCardSubscription, error) {
			v := &V2BillingRateCardSubscription{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.billing.rate_card_subscription.collection_current":
		result := &V2BillingRateCardSubscriptionCollectionCurrentEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2BillingRateCardSubscription, error) {
			v := &V2BillingRateCardSubscription{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.billing.rate_card_subscription.collection_past_due":
		result := &V2BillingRateCardSubscriptionCollectionPastDueEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2BillingRateCardSubscription, error) {
			v := &V2BillingRateCardSubscription{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.billing.rate_card_subscription.collection_paused":
		result := &V2BillingRateCardSubscriptionCollectionPausedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2BillingRateCardSubscription, error) {
			v := &V2BillingRateCardSubscription{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.billing.rate_card_subscription.collection_unpaid":
		result := &V2BillingRateCardSubscriptionCollectionUnpaidEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2BillingRateCardSubscription, error) {
			v := &V2BillingRateCardSubscription{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.billing.rate_card_subscription.servicing_activated":
		result := &V2BillingRateCardSubscriptionServicingActivatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2BillingRateCardSubscription, error) {
			v := &V2BillingRateCardSubscription{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.billing.rate_card_subscription.servicing_canceled":
		result := &V2BillingRateCardSubscriptionServicingCanceledEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2BillingRateCardSubscription, error) {
			v := &V2BillingRateCardSubscription{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.billing.rate_card_subscription.servicing_paused":
		result := &V2BillingRateCardSubscriptionServicingPausedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2BillingRateCardSubscription, error) {
			v := &V2BillingRateCardSubscription{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.billing.rate_card_version.created":
		result := &V2BillingRateCardVersionCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2BillingRateCardVersion, error) {
			v := &V2BillingRateCardVersion{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		if err := json.Unmarshal(*event.Data, &result.Data); err != nil {
			return nil, err
		}
		return result, nil
	case "v2.core.account.closed":
		result := &V2CoreAccountClosedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2CoreAccount, error) {
			v := &V2CoreAccount{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.core.account.created":
		result := &V2CoreAccountCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2CoreAccount, error) {
			v := &V2CoreAccount{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.core.account.updated":
		result := &V2CoreAccountUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2CoreAccount, error) {
			v := &V2CoreAccount{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.core.account[configuration.customer].capability_status_updated":
		result := &V2CoreAccountIncludingConfigurationCustomerCapabilityStatusUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2CoreAccount, error) {
			v := &V2CoreAccount{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		if err := json.Unmarshal(*event.Data, &result.Data); err != nil {
			return nil, err
		}
		return result, nil
	case "v2.core.account[configuration.customer].updated":
		result := &V2CoreAccountIncludingConfigurationCustomerUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2CoreAccount, error) {
			v := &V2CoreAccount{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.core.account[configuration.merchant].capability_status_updated":
		result := &V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2CoreAccount, error) {
			v := &V2CoreAccount{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		if err := json.Unmarshal(*event.Data, &result.Data); err != nil {
			return nil, err
		}
		return result, nil
	case "v2.core.account[configuration.merchant].updated":
		result := &V2CoreAccountIncludingConfigurationMerchantUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2CoreAccount, error) {
			v := &V2CoreAccount{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.core.account[configuration.recipient].capability_status_updated":
		result := &V2CoreAccountIncludingConfigurationRecipientCapabilityStatusUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2CoreAccount, error) {
			v := &V2CoreAccount{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		if err := json.Unmarshal(*event.Data, &result.Data); err != nil {
			return nil, err
		}
		return result, nil
	case "v2.core.account[configuration.recipient].updated":
		result := &V2CoreAccountIncludingConfigurationRecipientUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2CoreAccount, error) {
			v := &V2CoreAccount{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.core.account[configuration.storer].capability_status_updated":
		result := &V2CoreAccountIncludingConfigurationStorerCapabilityStatusUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2CoreAccount, error) {
			v := &V2CoreAccount{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		if err := json.Unmarshal(*event.Data, &result.Data); err != nil {
			return nil, err
		}
		return result, nil
	case "v2.core.account[configuration.storer].updated":
		result := &V2CoreAccountIncludingConfigurationStorerUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2CoreAccount, error) {
			v := &V2CoreAccount{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.core.account[defaults].updated":
		result := &V2CoreAccountIncludingDefaultsUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2CoreAccount, error) {
			v := &V2CoreAccount{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.core.account[identity].updated":
		result := &V2CoreAccountIncludingIdentityUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2CoreAccount, error) {
			v := &V2CoreAccount{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.core.account[requirements].updated":
		result := &V2CoreAccountIncludingRequirementsUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2CoreAccount, error) {
			v := &V2CoreAccount{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.core.account_link.returned":
		result := &V2CoreAccountLinkReturnedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		if err := json.Unmarshal(*event.Data, &result.Data); err != nil {
			return nil, err
		}
		return result, nil
	case "v2.core.account_person.created":
		result := &V2CoreAccountPersonCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2CoreAccountPerson, error) {
			v := &V2CoreAccountPerson{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		if err := json.Unmarshal(*event.Data, &result.Data); err != nil {
			return nil, err
		}
		return result, nil
	case "v2.core.account_person.deleted":
		result := &V2CoreAccountPersonDeletedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2CoreAccountPerson, error) {
			v := &V2CoreAccountPerson{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		if err := json.Unmarshal(*event.Data, &result.Data); err != nil {
			return nil, err
		}
		return result, nil
	case "v2.core.account_person.updated":
		result := &V2CoreAccountPersonUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2CoreAccountPerson, error) {
			v := &V2CoreAccountPerson{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		if err := json.Unmarshal(*event.Data, &result.Data); err != nil {
			return nil, err
		}
		return result, nil
	case "v2.core.claimable_sandbox.claimed":
		result := &V2CoreClaimableSandboxClaimedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2CoreClaimableSandbox, error) {
			v := &V2CoreClaimableSandbox{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.core.claimable_sandbox.created":
		result := &V2CoreClaimableSandboxCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2CoreClaimableSandbox, error) {
			v := &V2CoreClaimableSandbox{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.core.claimable_sandbox.expired":
		result := &V2CoreClaimableSandboxExpiredEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2CoreClaimableSandbox, error) {
			v := &V2CoreClaimableSandbox{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.core.claimable_sandbox.expiring":
		result := &V2CoreClaimableSandboxExpiringEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2CoreClaimableSandbox, error) {
			v := &V2CoreClaimableSandbox{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.core.claimable_sandbox.sandbox_details_owner_account_updated":
		result := &V2CoreClaimableSandboxSandboxDetailsOwnerAccountUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2CoreClaimableSandbox, error) {
			v := &V2CoreClaimableSandbox{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.core.event_destination.ping":
		result := &V2CoreEventDestinationPingEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2EventDestination, error) {
			v := &V2EventDestination{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.core.health.api_error.firing":
		result := &V2CoreHealthAPIErrorFiringEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		if err := json.Unmarshal(*event.Data, &result.Data); err != nil {
			return nil, err
		}
		return result, nil
	case "v2.core.health.api_error.resolved":
		result := &V2CoreHealthAPIErrorResolvedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		if err := json.Unmarshal(*event.Data, &result.Data); err != nil {
			return nil, err
		}
		return result, nil
	case "v2.core.health.api_latency.firing":
		result := &V2CoreHealthAPILatencyFiringEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		if err := json.Unmarshal(*event.Data, &result.Data); err != nil {
			return nil, err
		}
		return result, nil
	case "v2.core.health.api_latency.resolved":
		result := &V2CoreHealthAPILatencyResolvedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		if err := json.Unmarshal(*event.Data, &result.Data); err != nil {
			return nil, err
		}
		return result, nil
	case "v2.core.health.authorization_rate_drop.firing":
		result := &V2CoreHealthAuthorizationRateDropFiringEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		if err := json.Unmarshal(*event.Data, &result.Data); err != nil {
			return nil, err
		}
		return result, nil
	case "v2.core.health.authorization_rate_drop.resolved":
		result := &V2CoreHealthAuthorizationRateDropResolvedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		if err := json.Unmarshal(*event.Data, &result.Data); err != nil {
			return nil, err
		}
		return result, nil
	case "v2.core.health.event_generation_failure.resolved":
		result := &V2CoreHealthEventGenerationFailureResolvedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		if err := json.Unmarshal(*event.Data, &result.Data); err != nil {
			return nil, err
		}
		return result, nil
	case "v2.core.health.fraud_rate.increased":
		result := &V2CoreHealthFraudRateIncreasedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		if err := json.Unmarshal(*event.Data, &result.Data); err != nil {
			return nil, err
		}
		return result, nil
	case "v2.core.health.issuing_authorization_request_errors.firing":
		result := &V2CoreHealthIssuingAuthorizationRequestErrorsFiringEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		if err := json.Unmarshal(*event.Data, &result.Data); err != nil {
			return nil, err
		}
		return result, nil
	case "v2.core.health.issuing_authorization_request_errors.resolved":
		result := &V2CoreHealthIssuingAuthorizationRequestErrorsResolvedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		if err := json.Unmarshal(*event.Data, &result.Data); err != nil {
			return nil, err
		}
		return result, nil
	case "v2.core.health.issuing_authorization_request_timeout.firing":
		result := &V2CoreHealthIssuingAuthorizationRequestTimeoutFiringEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		if err := json.Unmarshal(*event.Data, &result.Data); err != nil {
			return nil, err
		}
		return result, nil
	case "v2.core.health.issuing_authorization_request_timeout.resolved":
		result := &V2CoreHealthIssuingAuthorizationRequestTimeoutResolvedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		if err := json.Unmarshal(*event.Data, &result.Data); err != nil {
			return nil, err
		}
		return result, nil
	case "v2.core.health.payment_method_error.firing":
		result := &V2CoreHealthPaymentMethodErrorFiringEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		if err := json.Unmarshal(*event.Data, &result.Data); err != nil {
			return nil, err
		}
		return result, nil
	case "v2.core.health.payment_method_error.resolved":
		result := &V2CoreHealthPaymentMethodErrorResolvedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		if err := json.Unmarshal(*event.Data, &result.Data); err != nil {
			return nil, err
		}
		return result, nil
	case "v2.core.health.traffic_volume_drop.firing":
		result := &V2CoreHealthTrafficVolumeDropFiringEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		if err := json.Unmarshal(*event.Data, &result.Data); err != nil {
			return nil, err
		}
		return result, nil
	case "v2.core.health.traffic_volume_drop.resolved":
		result := &V2CoreHealthTrafficVolumeDropResolvedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		if err := json.Unmarshal(*event.Data, &result.Data); err != nil {
			return nil, err
		}
		return result, nil
	case "v2.core.health.webhook_latency.firing":
		result := &V2CoreHealthWebhookLatencyFiringEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		if err := json.Unmarshal(*event.Data, &result.Data); err != nil {
			return nil, err
		}
		return result, nil
	case "v2.core.health.webhook_latency.resolved":
		result := &V2CoreHealthWebhookLatencyResolvedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		if err := json.Unmarshal(*event.Data, &result.Data); err != nil {
			return nil, err
		}
		return result, nil
	case "v2.money_management.adjustment.created":
		result := &V2MoneyManagementAdjustmentCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2MoneyManagementAdjustment, error) {
			v := &V2MoneyManagementAdjustment{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.money_management.financial_account.created":
		result := &V2MoneyManagementFinancialAccountCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2MoneyManagementFinancialAccount, error) {
			v := &V2MoneyManagementFinancialAccount{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.money_management.financial_account.updated":
		result := &V2MoneyManagementFinancialAccountUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2MoneyManagementFinancialAccount, error) {
			v := &V2MoneyManagementFinancialAccount{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.money_management.financial_address.activated":
		result := &V2MoneyManagementFinancialAddressActivatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2MoneyManagementFinancialAddress, error) {
			v := &V2MoneyManagementFinancialAddress{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.money_management.financial_address.failed":
		result := &V2MoneyManagementFinancialAddressFailedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2MoneyManagementFinancialAddress, error) {
			v := &V2MoneyManagementFinancialAddress{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.money_management.inbound_transfer.available":
		result := &V2MoneyManagementInboundTransferAvailableEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2MoneyManagementInboundTransfer, error) {
			v := &V2MoneyManagementInboundTransfer{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		if err := json.Unmarshal(*event.Data, &result.Data); err != nil {
			return nil, err
		}
		return result, nil
	case "v2.money_management.inbound_transfer.bank_debit_failed":
		result := &V2MoneyManagementInboundTransferBankDebitFailedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2MoneyManagementInboundTransfer, error) {
			v := &V2MoneyManagementInboundTransfer{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.money_management.inbound_transfer.bank_debit_processing":
		result := &V2MoneyManagementInboundTransferBankDebitProcessingEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2MoneyManagementInboundTransfer, error) {
			v := &V2MoneyManagementInboundTransfer{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.money_management.inbound_transfer.bank_debit_queued":
		result := &V2MoneyManagementInboundTransferBankDebitQueuedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2MoneyManagementInboundTransfer, error) {
			v := &V2MoneyManagementInboundTransfer{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.money_management.inbound_transfer.bank_debit_returned":
		result := &V2MoneyManagementInboundTransferBankDebitReturnedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2MoneyManagementInboundTransfer, error) {
			v := &V2MoneyManagementInboundTransfer{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.money_management.inbound_transfer.bank_debit_succeeded":
		result := &V2MoneyManagementInboundTransferBankDebitSucceededEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2MoneyManagementInboundTransfer, error) {
			v := &V2MoneyManagementInboundTransfer{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.money_management.outbound_payment.canceled":
		result := &V2MoneyManagementOutboundPaymentCanceledEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2MoneyManagementOutboundPayment, error) {
			v := &V2MoneyManagementOutboundPayment{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.money_management.outbound_payment.created":
		result := &V2MoneyManagementOutboundPaymentCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2MoneyManagementOutboundPayment, error) {
			v := &V2MoneyManagementOutboundPayment{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.money_management.outbound_payment.failed":
		result := &V2MoneyManagementOutboundPaymentFailedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2MoneyManagementOutboundPayment, error) {
			v := &V2MoneyManagementOutboundPayment{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.money_management.outbound_payment.posted":
		result := &V2MoneyManagementOutboundPaymentPostedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2MoneyManagementOutboundPayment, error) {
			v := &V2MoneyManagementOutboundPayment{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.money_management.outbound_payment.returned":
		result := &V2MoneyManagementOutboundPaymentReturnedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2MoneyManagementOutboundPayment, error) {
			v := &V2MoneyManagementOutboundPayment{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.money_management.outbound_payment.updated":
		result := &V2MoneyManagementOutboundPaymentUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2MoneyManagementOutboundPayment, error) {
			v := &V2MoneyManagementOutboundPayment{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.money_management.outbound_transfer.canceled":
		result := &V2MoneyManagementOutboundTransferCanceledEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2MoneyManagementOutboundTransfer, error) {
			v := &V2MoneyManagementOutboundTransfer{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.money_management.outbound_transfer.created":
		result := &V2MoneyManagementOutboundTransferCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2MoneyManagementOutboundTransfer, error) {
			v := &V2MoneyManagementOutboundTransfer{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.money_management.outbound_transfer.failed":
		result := &V2MoneyManagementOutboundTransferFailedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2MoneyManagementOutboundTransfer, error) {
			v := &V2MoneyManagementOutboundTransfer{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.money_management.outbound_transfer.posted":
		result := &V2MoneyManagementOutboundTransferPostedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2MoneyManagementOutboundTransfer, error) {
			v := &V2MoneyManagementOutboundTransfer{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.money_management.outbound_transfer.returned":
		result := &V2MoneyManagementOutboundTransferReturnedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2MoneyManagementOutboundTransfer, error) {
			v := &V2MoneyManagementOutboundTransfer{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.money_management.outbound_transfer.updated":
		result := &V2MoneyManagementOutboundTransferUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2MoneyManagementOutboundTransfer, error) {
			v := &V2MoneyManagementOutboundTransfer{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.money_management.payout_method.updated":
		result := &V2MoneyManagementPayoutMethodUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2MoneyManagementPayoutMethod, error) {
			v := &V2MoneyManagementPayoutMethod{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.money_management.received_credit.available":
		result := &V2MoneyManagementReceivedCreditAvailableEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2MoneyManagementReceivedCredit, error) {
			v := &V2MoneyManagementReceivedCredit{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		if err := json.Unmarshal(*event.Data, &result.Data); err != nil {
			return nil, err
		}
		return result, nil
	case "v2.money_management.received_credit.failed":
		result := &V2MoneyManagementReceivedCreditFailedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2MoneyManagementReceivedCredit, error) {
			v := &V2MoneyManagementReceivedCredit{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.money_management.received_credit.returned":
		result := &V2MoneyManagementReceivedCreditReturnedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2MoneyManagementReceivedCredit, error) {
			v := &V2MoneyManagementReceivedCredit{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.money_management.received_credit.succeeded":
		result := &V2MoneyManagementReceivedCreditSucceededEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2MoneyManagementReceivedCredit, error) {
			v := &V2MoneyManagementReceivedCredit{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.money_management.received_debit.canceled":
		result := &V2MoneyManagementReceivedDebitCanceledEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2MoneyManagementReceivedDebit, error) {
			v := &V2MoneyManagementReceivedDebit{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.money_management.received_debit.failed":
		result := &V2MoneyManagementReceivedDebitFailedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2MoneyManagementReceivedDebit, error) {
			v := &V2MoneyManagementReceivedDebit{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.money_management.received_debit.pending":
		result := &V2MoneyManagementReceivedDebitPendingEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2MoneyManagementReceivedDebit, error) {
			v := &V2MoneyManagementReceivedDebit{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.money_management.received_debit.succeeded":
		result := &V2MoneyManagementReceivedDebitSucceededEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2MoneyManagementReceivedDebit, error) {
			v := &V2MoneyManagementReceivedDebit{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.money_management.received_debit.updated":
		result := &V2MoneyManagementReceivedDebitUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2MoneyManagementReceivedDebit, error) {
			v := &V2MoneyManagementReceivedDebit{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.money_management.recipient_verification.created":
		result := &V2MoneyManagementRecipientVerificationCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2MoneyManagementRecipientVerification, error) {
			v := &V2MoneyManagementRecipientVerification{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.money_management.recipient_verification.updated":
		result := &V2MoneyManagementRecipientVerificationUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2MoneyManagementRecipientVerification, error) {
			v := &V2MoneyManagementRecipientVerification{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.money_management.transaction.created":
		result := &V2MoneyManagementTransactionCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2MoneyManagementTransaction, error) {
			v := &V2MoneyManagementTransaction{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.money_management.transaction.updated":
		result := &V2MoneyManagementTransactionUpdatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2MoneyManagementTransaction, error) {
			v := &V2MoneyManagementTransaction{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.payments.off_session_payment.authorization_attempt_failed":
		result := &V2PaymentsOffSessionPaymentAuthorizationAttemptFailedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2PaymentsOffSessionPayment, error) {
			v := &V2PaymentsOffSessionPayment{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.payments.off_session_payment.authorization_attempt_started":
		result := &V2PaymentsOffSessionPaymentAuthorizationAttemptStartedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2PaymentsOffSessionPayment, error) {
			v := &V2PaymentsOffSessionPayment{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.payments.off_session_payment.canceled":
		result := &V2PaymentsOffSessionPaymentCanceledEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2PaymentsOffSessionPayment, error) {
			v := &V2PaymentsOffSessionPayment{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.payments.off_session_payment.created":
		result := &V2PaymentsOffSessionPaymentCreatedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2PaymentsOffSessionPayment, error) {
			v := &V2PaymentsOffSessionPayment{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.payments.off_session_payment.failed":
		result := &V2PaymentsOffSessionPaymentFailedEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2PaymentsOffSessionPayment, error) {
			v := &V2PaymentsOffSessionPayment{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	case "v2.payments.off_session_payment.succeeded":
		result := &V2PaymentsOffSessionPaymentSucceededEvent{}
		result.V2BaseEvent = event.V2BaseEvent
		result.RelatedObject = *event.RelatedObject
		result.fetchRelatedObject = func() (*V2PaymentsOffSessionPayment, error) {
			v := &V2PaymentsOffSessionPayment{}
			err := backend.Call(http.MethodGet, event.RelatedObject.URL, key, nil, v)
			return v, err
		}
		return result, nil
	default:
		return event, nil
	}
}

// V2Events: The end of the section generated from our OpenAPI spec

// EventNotificationFromJSON is a helper for constructing an Event Notification. Doesn't perform signature validation,
// so you should use [Client.ParseEventNotification] instead for initial handling.
// This is useful in unit tests and working with EventNotifications that you've already validated the authenticity of.
func EventNotificationFromJSON(payload []byte, client Client) (EventNotificationContainer, error) {
	// we can pull the type out to base our matching on
	var result = &struct {
		Type string `json:"type"`
	}{}
	if err := json.Unmarshal(payload, result); err != nil {
		return nil, err
	}

	// V2EventNotificationTypes: The beginning of the section generated from our OpenAPI spec
	switch result.Type {
	case "v1.account.updated":
		evt := V1AccountUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.application_fee.created":
		evt := V1ApplicationFeeCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.application_fee.refunded":
		evt := V1ApplicationFeeRefundedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.billing.meter.error_report_triggered":
		evt := V1BillingMeterErrorReportTriggeredEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.billing.meter.no_meter_found":
		evt := V1BillingMeterNoMeterFoundEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.billing_portal.configuration.created":
		evt := V1BillingPortalConfigurationCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.billing_portal.configuration.updated":
		evt := V1BillingPortalConfigurationUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.capability.updated":
		evt := V1CapabilityUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.charge.captured":
		evt := V1ChargeCapturedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.charge.dispute.closed":
		evt := V1ChargeDisputeClosedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.charge.dispute.created":
		evt := V1ChargeDisputeCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.charge.dispute.funds_reinstated":
		evt := V1ChargeDisputeFundsReinstatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.charge.dispute.funds_withdrawn":
		evt := V1ChargeDisputeFundsWithdrawnEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.charge.dispute.updated":
		evt := V1ChargeDisputeUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.charge.expired":
		evt := V1ChargeExpiredEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.charge.failed":
		evt := V1ChargeFailedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.charge.pending":
		evt := V1ChargePendingEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.charge.refund.updated":
		evt := V1ChargeRefundUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.charge.refunded":
		evt := V1ChargeRefundedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.charge.succeeded":
		evt := V1ChargeSucceededEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.charge.updated":
		evt := V1ChargeUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.checkout.session.async_payment_failed":
		evt := V1CheckoutSessionAsyncPaymentFailedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.checkout.session.async_payment_succeeded":
		evt := V1CheckoutSessionAsyncPaymentSucceededEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.checkout.session.completed":
		evt := V1CheckoutSessionCompletedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.checkout.session.expired":
		evt := V1CheckoutSessionExpiredEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.climate.order.canceled":
		evt := V1ClimateOrderCanceledEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.climate.order.created":
		evt := V1ClimateOrderCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.climate.order.delayed":
		evt := V1ClimateOrderDelayedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.climate.order.delivered":
		evt := V1ClimateOrderDeliveredEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.climate.order.product_substituted":
		evt := V1ClimateOrderProductSubstitutedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.climate.product.created":
		evt := V1ClimateProductCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.climate.product.pricing_updated":
		evt := V1ClimateProductPricingUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.coupon.created":
		evt := V1CouponCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.coupon.deleted":
		evt := V1CouponDeletedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.coupon.updated":
		evt := V1CouponUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.credit_note.created":
		evt := V1CreditNoteCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.credit_note.updated":
		evt := V1CreditNoteUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.credit_note.voided":
		evt := V1CreditNoteVoidedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.customer.created":
		evt := V1CustomerCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.customer.deleted":
		evt := V1CustomerDeletedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.customer.discount.created":
		evt := V1CustomerDiscountCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.customer.discount.deleted":
		evt := V1CustomerDiscountDeletedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.customer.discount.updated":
		evt := V1CustomerDiscountUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.customer.subscription.created":
		evt := V1CustomerSubscriptionCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.customer.subscription.deleted":
		evt := V1CustomerSubscriptionDeletedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.customer.subscription.paused":
		evt := V1CustomerSubscriptionPausedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.customer.subscription.pending_update_applied":
		evt := V1CustomerSubscriptionPendingUpdateAppliedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.customer.subscription.pending_update_expired":
		evt := V1CustomerSubscriptionPendingUpdateExpiredEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.customer.subscription.resumed":
		evt := V1CustomerSubscriptionResumedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.customer.subscription.trial_will_end":
		evt := V1CustomerSubscriptionTrialWillEndEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.customer.subscription.updated":
		evt := V1CustomerSubscriptionUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.customer.tax_id.created":
		evt := V1CustomerTaxIDCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.customer.tax_id.deleted":
		evt := V1CustomerTaxIDDeletedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.customer.tax_id.updated":
		evt := V1CustomerTaxIDUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.customer.updated":
		evt := V1CustomerUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.file.created":
		evt := V1FileCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.financial_connections.account.created":
		evt := V1FinancialConnectionsAccountCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.financial_connections.account.deactivated":
		evt := V1FinancialConnectionsAccountDeactivatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.financial_connections.account.disconnected":
		evt := V1FinancialConnectionsAccountDisconnectedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.financial_connections.account.reactivated":
		evt := V1FinancialConnectionsAccountReactivatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.financial_connections.account.refreshed_balance":
		evt := V1FinancialConnectionsAccountRefreshedBalanceEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.financial_connections.account.refreshed_ownership":
		evt := V1FinancialConnectionsAccountRefreshedOwnershipEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.financial_connections.account.refreshed_transactions":
		evt := V1FinancialConnectionsAccountRefreshedTransactionsEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.identity.verification_session.canceled":
		evt := V1IdentityVerificationSessionCanceledEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.identity.verification_session.created":
		evt := V1IdentityVerificationSessionCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.identity.verification_session.processing":
		evt := V1IdentityVerificationSessionProcessingEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.identity.verification_session.redacted":
		evt := V1IdentityVerificationSessionRedactedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.identity.verification_session.requires_input":
		evt := V1IdentityVerificationSessionRequiresInputEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.identity.verification_session.verified":
		evt := V1IdentityVerificationSessionVerifiedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.invoice.created":
		evt := V1InvoiceCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.invoice.deleted":
		evt := V1InvoiceDeletedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.invoice.finalization_failed":
		evt := V1InvoiceFinalizationFailedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.invoice.finalized":
		evt := V1InvoiceFinalizedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.invoice.marked_uncollectible":
		evt := V1InvoiceMarkedUncollectibleEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.invoice.overdue":
		evt := V1InvoiceOverdueEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.invoice.overpaid":
		evt := V1InvoiceOverpaidEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.invoice.paid":
		evt := V1InvoicePaidEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.invoice.payment_action_required":
		evt := V1InvoicePaymentActionRequiredEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.invoice.payment_failed":
		evt := V1InvoicePaymentFailedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.invoice.payment_succeeded":
		evt := V1InvoicePaymentSucceededEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.invoice.sent":
		evt := V1InvoiceSentEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.invoice.upcoming":
		evt := V1InvoiceUpcomingEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.invoice.updated":
		evt := V1InvoiceUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.invoice.voided":
		evt := V1InvoiceVoidedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.invoice.will_be_due":
		evt := V1InvoiceWillBeDueEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.invoice_payment.paid":
		evt := V1InvoicePaymentPaidEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.invoiceitem.created":
		evt := V1InvoiceitemCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.invoiceitem.deleted":
		evt := V1InvoiceitemDeletedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.issuing_authorization.created":
		evt := V1IssuingAuthorizationCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.issuing_authorization.request":
		evt := V1IssuingAuthorizationRequestEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.issuing_authorization.updated":
		evt := V1IssuingAuthorizationUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.issuing_card.created":
		evt := V1IssuingCardCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.issuing_card.updated":
		evt := V1IssuingCardUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.issuing_cardholder.created":
		evt := V1IssuingCardholderCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.issuing_cardholder.updated":
		evt := V1IssuingCardholderUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.issuing_dispute.closed":
		evt := V1IssuingDisputeClosedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.issuing_dispute.created":
		evt := V1IssuingDisputeCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.issuing_dispute.funds_reinstated":
		evt := V1IssuingDisputeFundsReinstatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.issuing_dispute.funds_rescinded":
		evt := V1IssuingDisputeFundsRescindedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.issuing_dispute.submitted":
		evt := V1IssuingDisputeSubmittedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.issuing_dispute.updated":
		evt := V1IssuingDisputeUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.issuing_personalization_design.activated":
		evt := V1IssuingPersonalizationDesignActivatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.issuing_personalization_design.deactivated":
		evt := V1IssuingPersonalizationDesignDeactivatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.issuing_personalization_design.rejected":
		evt := V1IssuingPersonalizationDesignRejectedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.issuing_personalization_design.updated":
		evt := V1IssuingPersonalizationDesignUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.issuing_token.created":
		evt := V1IssuingTokenCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.issuing_token.updated":
		evt := V1IssuingTokenUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.issuing_transaction.created":
		evt := V1IssuingTransactionCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.issuing_transaction.purchase_details_receipt_updated":
		evt := V1IssuingTransactionPurchaseDetailsReceiptUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.issuing_transaction.updated":
		evt := V1IssuingTransactionUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.mandate.updated":
		evt := V1MandateUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.payment_intent.amount_capturable_updated":
		evt := V1PaymentIntentAmountCapturableUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.payment_intent.canceled":
		evt := V1PaymentIntentCanceledEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.payment_intent.created":
		evt := V1PaymentIntentCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.payment_intent.partially_funded":
		evt := V1PaymentIntentPartiallyFundedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.payment_intent.payment_failed":
		evt := V1PaymentIntentPaymentFailedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.payment_intent.processing":
		evt := V1PaymentIntentProcessingEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.payment_intent.requires_action":
		evt := V1PaymentIntentRequiresActionEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.payment_intent.succeeded":
		evt := V1PaymentIntentSucceededEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.payment_link.created":
		evt := V1PaymentLinkCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.payment_link.updated":
		evt := V1PaymentLinkUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.payment_method.attached":
		evt := V1PaymentMethodAttachedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.payment_method.automatically_updated":
		evt := V1PaymentMethodAutomaticallyUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.payment_method.detached":
		evt := V1PaymentMethodDetachedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.payment_method.updated":
		evt := V1PaymentMethodUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.payout.canceled":
		evt := V1PayoutCanceledEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.payout.created":
		evt := V1PayoutCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.payout.failed":
		evt := V1PayoutFailedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.payout.paid":
		evt := V1PayoutPaidEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.payout.reconciliation_completed":
		evt := V1PayoutReconciliationCompletedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.payout.updated":
		evt := V1PayoutUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.person.created":
		evt := V1PersonCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.person.deleted":
		evt := V1PersonDeletedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.person.updated":
		evt := V1PersonUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.plan.created":
		evt := V1PlanCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.plan.deleted":
		evt := V1PlanDeletedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.plan.updated":
		evt := V1PlanUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.price.created":
		evt := V1PriceCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.price.deleted":
		evt := V1PriceDeletedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.price.updated":
		evt := V1PriceUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.product.created":
		evt := V1ProductCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.product.deleted":
		evt := V1ProductDeletedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.product.updated":
		evt := V1ProductUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.promotion_code.created":
		evt := V1PromotionCodeCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.promotion_code.updated":
		evt := V1PromotionCodeUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.quote.accepted":
		evt := V1QuoteAcceptedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.quote.canceled":
		evt := V1QuoteCanceledEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.quote.created":
		evt := V1QuoteCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.quote.finalized":
		evt := V1QuoteFinalizedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.radar.early_fraud_warning.created":
		evt := V1RadarEarlyFraudWarningCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.radar.early_fraud_warning.updated":
		evt := V1RadarEarlyFraudWarningUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.refund.created":
		evt := V1RefundCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.refund.failed":
		evt := V1RefundFailedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.refund.updated":
		evt := V1RefundUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.review.closed":
		evt := V1ReviewClosedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.review.opened":
		evt := V1ReviewOpenedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.setup_intent.canceled":
		evt := V1SetupIntentCanceledEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.setup_intent.created":
		evt := V1SetupIntentCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.setup_intent.requires_action":
		evt := V1SetupIntentRequiresActionEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.setup_intent.setup_failed":
		evt := V1SetupIntentSetupFailedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.setup_intent.succeeded":
		evt := V1SetupIntentSucceededEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.sigma.scheduled_query_run.created":
		evt := V1SigmaScheduledQueryRunCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.source.canceled":
		evt := V1SourceCanceledEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.source.chargeable":
		evt := V1SourceChargeableEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.source.failed":
		evt := V1SourceFailedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.source.refund_attributes_required":
		evt := V1SourceRefundAttributesRequiredEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.subscription_schedule.aborted":
		evt := V1SubscriptionScheduleAbortedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.subscription_schedule.canceled":
		evt := V1SubscriptionScheduleCanceledEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.subscription_schedule.completed":
		evt := V1SubscriptionScheduleCompletedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.subscription_schedule.created":
		evt := V1SubscriptionScheduleCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.subscription_schedule.expiring":
		evt := V1SubscriptionScheduleExpiringEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.subscription_schedule.released":
		evt := V1SubscriptionScheduleReleasedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.subscription_schedule.updated":
		evt := V1SubscriptionScheduleUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.tax_rate.created":
		evt := V1TaxRateCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.tax_rate.updated":
		evt := V1TaxRateUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.terminal.reader.action_failed":
		evt := V1TerminalReaderActionFailedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.terminal.reader.action_succeeded":
		evt := V1TerminalReaderActionSucceededEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.terminal.reader.action_updated":
		evt := V1TerminalReaderActionUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.test_helpers.test_clock.advancing":
		evt := V1TestHelpersTestClockAdvancingEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.test_helpers.test_clock.created":
		evt := V1TestHelpersTestClockCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.test_helpers.test_clock.deleted":
		evt := V1TestHelpersTestClockDeletedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.test_helpers.test_clock.internal_failure":
		evt := V1TestHelpersTestClockInternalFailureEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.test_helpers.test_clock.ready":
		evt := V1TestHelpersTestClockReadyEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.topup.canceled":
		evt := V1TopupCanceledEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.topup.created":
		evt := V1TopupCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.topup.failed":
		evt := V1TopupFailedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.topup.reversed":
		evt := V1TopupReversedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.topup.succeeded":
		evt := V1TopupSucceededEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.transfer.created":
		evt := V1TransferCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.transfer.reversed":
		evt := V1TransferReversedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v1.transfer.updated":
		evt := V1TransferUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.billing.bill_setting.updated":
		evt := V2BillingBillSettingUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.billing.cadence.billed":
		evt := V2BillingCadenceBilledEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.billing.cadence.canceled":
		evt := V2BillingCadenceCanceledEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.billing.cadence.created":
		evt := V2BillingCadenceCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.billing.license_fee.created":
		evt := V2BillingLicenseFeeCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.billing.license_fee.updated":
		evt := V2BillingLicenseFeeUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.billing.license_fee_version.created":
		evt := V2BillingLicenseFeeVersionCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.billing.licensed_item.created":
		evt := V2BillingLicensedItemCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.billing.licensed_item.updated":
		evt := V2BillingLicensedItemUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.billing.metered_item.created":
		evt := V2BillingMeteredItemCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.billing.metered_item.updated":
		evt := V2BillingMeteredItemUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.billing.pricing_plan.created":
		evt := V2BillingPricingPlanCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.billing.pricing_plan.updated":
		evt := V2BillingPricingPlanUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.billing.pricing_plan_component.created":
		evt := V2BillingPricingPlanComponentCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.billing.pricing_plan_component.updated":
		evt := V2BillingPricingPlanComponentUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.billing.pricing_plan_subscription.collection_awaiting_customer_action":
		evt := V2BillingPricingPlanSubscriptionCollectionAwaitingCustomerActionEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.billing.pricing_plan_subscription.collection_current":
		evt := V2BillingPricingPlanSubscriptionCollectionCurrentEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.billing.pricing_plan_subscription.collection_past_due":
		evt := V2BillingPricingPlanSubscriptionCollectionPastDueEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.billing.pricing_plan_subscription.collection_paused":
		evt := V2BillingPricingPlanSubscriptionCollectionPausedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.billing.pricing_plan_subscription.collection_unpaid":
		evt := V2BillingPricingPlanSubscriptionCollectionUnpaidEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.billing.pricing_plan_subscription.servicing_activated":
		evt := V2BillingPricingPlanSubscriptionServicingActivatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.billing.pricing_plan_subscription.servicing_canceled":
		evt := V2BillingPricingPlanSubscriptionServicingCanceledEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.billing.pricing_plan_subscription.servicing_paused":
		evt := V2BillingPricingPlanSubscriptionServicingPausedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.billing.pricing_plan_version.created":
		evt := V2BillingPricingPlanVersionCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.billing.rate_card.created":
		evt := V2BillingRateCardCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.billing.rate_card.updated":
		evt := V2BillingRateCardUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.billing.rate_card_rate.created":
		evt := V2BillingRateCardRateCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.billing.rate_card_subscription.activated":
		evt := V2BillingRateCardSubscriptionActivatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.billing.rate_card_subscription.canceled":
		evt := V2BillingRateCardSubscriptionCanceledEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.billing.rate_card_subscription.collection_awaiting_customer_action":
		evt := V2BillingRateCardSubscriptionCollectionAwaitingCustomerActionEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.billing.rate_card_subscription.collection_current":
		evt := V2BillingRateCardSubscriptionCollectionCurrentEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.billing.rate_card_subscription.collection_past_due":
		evt := V2BillingRateCardSubscriptionCollectionPastDueEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.billing.rate_card_subscription.collection_paused":
		evt := V2BillingRateCardSubscriptionCollectionPausedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.billing.rate_card_subscription.collection_unpaid":
		evt := V2BillingRateCardSubscriptionCollectionUnpaidEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.billing.rate_card_subscription.servicing_activated":
		evt := V2BillingRateCardSubscriptionServicingActivatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.billing.rate_card_subscription.servicing_canceled":
		evt := V2BillingRateCardSubscriptionServicingCanceledEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.billing.rate_card_subscription.servicing_paused":
		evt := V2BillingRateCardSubscriptionServicingPausedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.billing.rate_card_version.created":
		evt := V2BillingRateCardVersionCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.core.account.closed":
		evt := V2CoreAccountClosedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.core.account.created":
		evt := V2CoreAccountCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.core.account.updated":
		evt := V2CoreAccountUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.core.account[configuration.customer].capability_status_updated":
		evt := V2CoreAccountIncludingConfigurationCustomerCapabilityStatusUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.core.account[configuration.customer].updated":
		evt := V2CoreAccountIncludingConfigurationCustomerUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.core.account[configuration.merchant].capability_status_updated":
		evt := V2CoreAccountIncludingConfigurationMerchantCapabilityStatusUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.core.account[configuration.merchant].updated":
		evt := V2CoreAccountIncludingConfigurationMerchantUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.core.account[configuration.recipient].capability_status_updated":
		evt := V2CoreAccountIncludingConfigurationRecipientCapabilityStatusUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.core.account[configuration.recipient].updated":
		evt := V2CoreAccountIncludingConfigurationRecipientUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.core.account[configuration.storer].capability_status_updated":
		evt := V2CoreAccountIncludingConfigurationStorerCapabilityStatusUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.core.account[configuration.storer].updated":
		evt := V2CoreAccountIncludingConfigurationStorerUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.core.account[defaults].updated":
		evt := V2CoreAccountIncludingDefaultsUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.core.account[identity].updated":
		evt := V2CoreAccountIncludingIdentityUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.core.account[requirements].updated":
		evt := V2CoreAccountIncludingRequirementsUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.core.account_link.returned":
		evt := V2CoreAccountLinkReturnedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.core.account_person.created":
		evt := V2CoreAccountPersonCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.core.account_person.deleted":
		evt := V2CoreAccountPersonDeletedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.core.account_person.updated":
		evt := V2CoreAccountPersonUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.core.claimable_sandbox.claimed":
		evt := V2CoreClaimableSandboxClaimedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.core.claimable_sandbox.created":
		evt := V2CoreClaimableSandboxCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.core.claimable_sandbox.expired":
		evt := V2CoreClaimableSandboxExpiredEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.core.claimable_sandbox.expiring":
		evt := V2CoreClaimableSandboxExpiringEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.core.claimable_sandbox.sandbox_details_owner_account_updated":
		evt := V2CoreClaimableSandboxSandboxDetailsOwnerAccountUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.core.event_destination.ping":
		evt := V2CoreEventDestinationPingEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.core.health.api_error.firing":
		evt := V2CoreHealthAPIErrorFiringEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.core.health.api_error.resolved":
		evt := V2CoreHealthAPIErrorResolvedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.core.health.api_latency.firing":
		evt := V2CoreHealthAPILatencyFiringEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.core.health.api_latency.resolved":
		evt := V2CoreHealthAPILatencyResolvedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.core.health.authorization_rate_drop.firing":
		evt := V2CoreHealthAuthorizationRateDropFiringEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.core.health.authorization_rate_drop.resolved":
		evt := V2CoreHealthAuthorizationRateDropResolvedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.core.health.event_generation_failure.resolved":
		evt := V2CoreHealthEventGenerationFailureResolvedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.core.health.fraud_rate.increased":
		evt := V2CoreHealthFraudRateIncreasedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.core.health.issuing_authorization_request_errors.firing":
		evt := V2CoreHealthIssuingAuthorizationRequestErrorsFiringEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.core.health.issuing_authorization_request_errors.resolved":
		evt := V2CoreHealthIssuingAuthorizationRequestErrorsResolvedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.core.health.issuing_authorization_request_timeout.firing":
		evt := V2CoreHealthIssuingAuthorizationRequestTimeoutFiringEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.core.health.issuing_authorization_request_timeout.resolved":
		evt := V2CoreHealthIssuingAuthorizationRequestTimeoutResolvedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.core.health.payment_method_error.firing":
		evt := V2CoreHealthPaymentMethodErrorFiringEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.core.health.payment_method_error.resolved":
		evt := V2CoreHealthPaymentMethodErrorResolvedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.core.health.traffic_volume_drop.firing":
		evt := V2CoreHealthTrafficVolumeDropFiringEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.core.health.traffic_volume_drop.resolved":
		evt := V2CoreHealthTrafficVolumeDropResolvedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.core.health.webhook_latency.firing":
		evt := V2CoreHealthWebhookLatencyFiringEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.core.health.webhook_latency.resolved":
		evt := V2CoreHealthWebhookLatencyResolvedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.money_management.adjustment.created":
		evt := V2MoneyManagementAdjustmentCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.money_management.financial_account.created":
		evt := V2MoneyManagementFinancialAccountCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.money_management.financial_account.updated":
		evt := V2MoneyManagementFinancialAccountUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.money_management.financial_address.activated":
		evt := V2MoneyManagementFinancialAddressActivatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.money_management.financial_address.failed":
		evt := V2MoneyManagementFinancialAddressFailedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.money_management.inbound_transfer.available":
		evt := V2MoneyManagementInboundTransferAvailableEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.money_management.inbound_transfer.bank_debit_failed":
		evt := V2MoneyManagementInboundTransferBankDebitFailedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.money_management.inbound_transfer.bank_debit_processing":
		evt := V2MoneyManagementInboundTransferBankDebitProcessingEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.money_management.inbound_transfer.bank_debit_queued":
		evt := V2MoneyManagementInboundTransferBankDebitQueuedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.money_management.inbound_transfer.bank_debit_returned":
		evt := V2MoneyManagementInboundTransferBankDebitReturnedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.money_management.inbound_transfer.bank_debit_succeeded":
		evt := V2MoneyManagementInboundTransferBankDebitSucceededEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.money_management.outbound_payment.canceled":
		evt := V2MoneyManagementOutboundPaymentCanceledEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.money_management.outbound_payment.created":
		evt := V2MoneyManagementOutboundPaymentCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.money_management.outbound_payment.failed":
		evt := V2MoneyManagementOutboundPaymentFailedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.money_management.outbound_payment.posted":
		evt := V2MoneyManagementOutboundPaymentPostedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.money_management.outbound_payment.returned":
		evt := V2MoneyManagementOutboundPaymentReturnedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.money_management.outbound_payment.updated":
		evt := V2MoneyManagementOutboundPaymentUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.money_management.outbound_transfer.canceled":
		evt := V2MoneyManagementOutboundTransferCanceledEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.money_management.outbound_transfer.created":
		evt := V2MoneyManagementOutboundTransferCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.money_management.outbound_transfer.failed":
		evt := V2MoneyManagementOutboundTransferFailedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.money_management.outbound_transfer.posted":
		evt := V2MoneyManagementOutboundTransferPostedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.money_management.outbound_transfer.returned":
		evt := V2MoneyManagementOutboundTransferReturnedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.money_management.outbound_transfer.updated":
		evt := V2MoneyManagementOutboundTransferUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.money_management.payout_method.updated":
		evt := V2MoneyManagementPayoutMethodUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.money_management.received_credit.available":
		evt := V2MoneyManagementReceivedCreditAvailableEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.money_management.received_credit.failed":
		evt := V2MoneyManagementReceivedCreditFailedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.money_management.received_credit.returned":
		evt := V2MoneyManagementReceivedCreditReturnedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.money_management.received_credit.succeeded":
		evt := V2MoneyManagementReceivedCreditSucceededEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.money_management.received_debit.canceled":
		evt := V2MoneyManagementReceivedDebitCanceledEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.money_management.received_debit.failed":
		evt := V2MoneyManagementReceivedDebitFailedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.money_management.received_debit.pending":
		evt := V2MoneyManagementReceivedDebitPendingEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.money_management.received_debit.succeeded":
		evt := V2MoneyManagementReceivedDebitSucceededEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.money_management.received_debit.updated":
		evt := V2MoneyManagementReceivedDebitUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.money_management.recipient_verification.created":
		evt := V2MoneyManagementRecipientVerificationCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.money_management.recipient_verification.updated":
		evt := V2MoneyManagementRecipientVerificationUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.money_management.transaction.created":
		evt := V2MoneyManagementTransactionCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.money_management.transaction.updated":
		evt := V2MoneyManagementTransactionUpdatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.payments.off_session_payment.authorization_attempt_failed":
		evt := V2PaymentsOffSessionPaymentAuthorizationAttemptFailedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.payments.off_session_payment.authorization_attempt_started":
		evt := V2PaymentsOffSessionPaymentAuthorizationAttemptStartedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.payments.off_session_payment.canceled":
		evt := V2PaymentsOffSessionPaymentCanceledEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.payments.off_session_payment.created":
		evt := V2PaymentsOffSessionPaymentCreatedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.payments.off_session_payment.failed":
		evt := V2PaymentsOffSessionPaymentFailedEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	case "v2.payments.off_session_payment.succeeded":
		evt := V2PaymentsOffSessionPaymentSucceededEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	default:
		evt := V2UnknownEventNotification{}
		if err := json.Unmarshal(payload, &evt); err != nil {
			return nil, err
		}
		evt.client = client
		return &evt, nil
	}
	// V2EventNotificationTypes: The end of the section generated from our OpenAPI spec
}
